   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB128:
  14               		.file 1 "tmk_core/protocol/lufa/lufa.c"
   1:tmk_core/protocol/lufa/lufa.c **** /*
   2:tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/lufa/lufa.c ****  */
   7:tmk_core/protocol/lufa/lufa.c **** 
   8:tmk_core/protocol/lufa/lufa.c **** /*
   9:tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/lufa/lufa.c **** 
  12:tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:tmk_core/protocol/lufa/lufa.c **** */
  15:tmk_core/protocol/lufa/lufa.c **** 
  16:tmk_core/protocol/lufa/lufa.c **** /*
  17:tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/lufa/lufa.c **** 
  20:tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:tmk_core/protocol/lufa/lufa.c **** 
  29:tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:tmk_core/protocol/lufa/lufa.c ****   this software.
  37:tmk_core/protocol/lufa/lufa.c **** */
  38:tmk_core/protocol/lufa/lufa.c **** 
  39:tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:tmk_core/protocol/lufa/lufa.c **** #endif
  50:tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:tmk_core/protocol/lufa/lufa.c **** 
  52:tmk_core/protocol/lufa/lufa.c **** #include "usb_descriptor.h"
  53:tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:tmk_core/protocol/lufa/lufa.c **** #include "rgblight_reconfig.h"
  58:tmk_core/protocol/lufa/lufa.c **** 
  59:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  60:tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  61:tmk_core/protocol/lufa/lufa.c **** 
  62:tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  63:tmk_core/protocol/lufa/lufa.c **** #endif
  64:tmk_core/protocol/lufa/lufa.c **** 
  65:tmk_core/protocol/lufa/lufa.c **** 
  66:tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  67:tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  68:tmk_core/protocol/lufa/lufa.c **** #endif
  69:tmk_core/protocol/lufa/lufa.c **** 
  70:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  71:tmk_core/protocol/lufa/lufa.c ****   #ifdef MODULE_ADAFRUIT_BLE
  72:tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  73:tmk_core/protocol/lufa/lufa.c ****   #else
  74:tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  75:tmk_core/protocol/lufa/lufa.c ****   #endif
  76:tmk_core/protocol/lufa/lufa.c **** #endif
  77:tmk_core/protocol/lufa/lufa.c **** 
  78:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  79:tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  80:tmk_core/protocol/lufa/lufa.c **** #endif
  81:tmk_core/protocol/lufa/lufa.c **** 
  82:tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  83:tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  84:tmk_core/protocol/lufa/lufa.c **** #endif
  85:tmk_core/protocol/lufa/lufa.c **** 
  86:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  87:tmk_core/protocol/lufa/lufa.c ****   #include "qmk_midi.h"
  88:tmk_core/protocol/lufa/lufa.c **** #endif
  89:tmk_core/protocol/lufa/lufa.c **** 
  90:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  91:tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  92:tmk_core/protocol/lufa/lufa.c **** #endif
  93:tmk_core/protocol/lufa/lufa.c **** 
  94:tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  95:tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  96:tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  97:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  98:tmk_core/protocol/lufa/lufa.c **** 
  99:tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
 100:tmk_core/protocol/lufa/lufa.c **** 
 101:tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 102:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 103:tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 104:tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 105:tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 106:tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 107:tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 108:tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 109:tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 110:tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 111:tmk_core/protocol/lufa/lufa.c ****     send_system,
 112:tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 113:tmk_core/protocol/lufa/lufa.c **** };
 114:tmk_core/protocol/lufa/lufa.c **** 
 115:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 116:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 117:tmk_core/protocol/lufa/lufa.c **** {
 118:tmk_core/protocol/lufa/lufa.c ****   .Config =
 119:tmk_core/protocol/lufa/lufa.c ****   {
 120:tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 121:tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 122:tmk_core/protocol/lufa/lufa.c ****     {
 123:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 124:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 125:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 126:tmk_core/protocol/lufa/lufa.c ****     },
 127:tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 128:tmk_core/protocol/lufa/lufa.c ****     {
 129:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 130:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 131:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 132:tmk_core/protocol/lufa/lufa.c ****     },
 133:tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 134:tmk_core/protocol/lufa/lufa.c ****     {
 135:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 136:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 137:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 138:tmk_core/protocol/lufa/lufa.c ****     },
 139:tmk_core/protocol/lufa/lufa.c ****   },
 140:tmk_core/protocol/lufa/lufa.c **** };
 141:tmk_core/protocol/lufa/lufa.c **** #endif
 142:tmk_core/protocol/lufa/lufa.c **** 
 143:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 144:tmk_core/protocol/lufa/lufa.c **** 
 145:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Send
 146:tmk_core/protocol/lufa/lufa.c ****  *
 147:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 148:tmk_core/protocol/lufa/lufa.c ****  */
 149:tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 150:tmk_core/protocol/lufa/lufa.c **** {
 151:tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 152:tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 153:tmk_core/protocol/lufa/lufa.c **** 	{
 154:tmk_core/protocol/lufa/lufa.c **** 		return;
 155:tmk_core/protocol/lufa/lufa.c **** 	}
 156:tmk_core/protocol/lufa/lufa.c **** 
 157:tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 158:tmk_core/protocol/lufa/lufa.c **** 	{
 159:tmk_core/protocol/lufa/lufa.c **** 		return;
 160:tmk_core/protocol/lufa/lufa.c **** 	}
 161:tmk_core/protocol/lufa/lufa.c **** 
 162:tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 163:tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 164:tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 165:tmk_core/protocol/lufa/lufa.c **** 
 166:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 167:tmk_core/protocol/lufa/lufa.c **** 
 168:tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 169:tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 170:tmk_core/protocol/lufa/lufa.c **** 	{
 171:tmk_core/protocol/lufa/lufa.c **** 		// Write data
 172:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 173:tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 174:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 175:tmk_core/protocol/lufa/lufa.c **** 	}
 176:tmk_core/protocol/lufa/lufa.c **** 
 177:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 178:tmk_core/protocol/lufa/lufa.c **** }
 179:tmk_core/protocol/lufa/lufa.c **** 
 180:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Receive
 181:tmk_core/protocol/lufa/lufa.c ****  *
 182:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 183:tmk_core/protocol/lufa/lufa.c ****  */
 184:tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 185:tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 186:tmk_core/protocol/lufa/lufa.c **** {
 187:tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 188:tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 189:tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 190:tmk_core/protocol/lufa/lufa.c **** }
 191:tmk_core/protocol/lufa/lufa.c **** 
 192:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Task
 193:tmk_core/protocol/lufa/lufa.c ****  *
 194:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 195:tmk_core/protocol/lufa/lufa.c ****  */
 196:tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 197:tmk_core/protocol/lufa/lufa.c **** {
 198:tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 199:tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 200:tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 201:tmk_core/protocol/lufa/lufa.c **** 
 202:tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 203:tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 204:tmk_core/protocol/lufa/lufa.c **** 	return;
 205:tmk_core/protocol/lufa/lufa.c **** 
 206:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 207:tmk_core/protocol/lufa/lufa.c **** 
 208:tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 209:tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 210:tmk_core/protocol/lufa/lufa.c **** 	{
 211:tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 212:tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 213:tmk_core/protocol/lufa/lufa.c **** 		{
 214:tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 215:tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 216:tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 217:tmk_core/protocol/lufa/lufa.c **** 		}
 218:tmk_core/protocol/lufa/lufa.c **** 
 219:tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 220:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 221:tmk_core/protocol/lufa/lufa.c **** 
 222:tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 223:tmk_core/protocol/lufa/lufa.c **** 		{
 224:tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 225:tmk_core/protocol/lufa/lufa.c **** 		}
 226:tmk_core/protocol/lufa/lufa.c **** 	}
 227:tmk_core/protocol/lufa/lufa.c **** }
 228:tmk_core/protocol/lufa/lufa.c **** #endif
 229:tmk_core/protocol/lufa/lufa.c **** 
 230:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 231:tmk_core/protocol/lufa/lufa.c ****  * Console
 232:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 233:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 234:tmk_core/protocol/lufa/lufa.c **** /** \brief Console Task
 235:tmk_core/protocol/lufa/lufa.c ****  *
 236:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 237:tmk_core/protocol/lufa/lufa.c ****  */
 238:tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 239:tmk_core/protocol/lufa/lufa.c **** {
 240:tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 241:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 242:tmk_core/protocol/lufa/lufa.c ****         return;
 243:tmk_core/protocol/lufa/lufa.c **** 
 244:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 245:tmk_core/protocol/lufa/lufa.c **** 
 246:tmk_core/protocol/lufa/lufa.c **** #if 0
 247:tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 248:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 249:tmk_core/protocol/lufa/lufa.c **** 
 250:tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 251:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 252:tmk_core/protocol/lufa/lufa.c ****     {
 253:tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 254:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 255:tmk_core/protocol/lufa/lufa.c ****         {
 256:tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 257:tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 258:tmk_core/protocol/lufa/lufa.c **** 
 259:tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 260:tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 261:tmk_core/protocol/lufa/lufa.c **** 
 262:tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 263:tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 264:tmk_core/protocol/lufa/lufa.c ****         }
 265:tmk_core/protocol/lufa/lufa.c **** 
 266:tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 267:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 268:tmk_core/protocol/lufa/lufa.c ****     }
 269:tmk_core/protocol/lufa/lufa.c **** #endif
 270:tmk_core/protocol/lufa/lufa.c **** 
 271:tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 272:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 273:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 274:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 275:tmk_core/protocol/lufa/lufa.c ****         return;
 276:tmk_core/protocol/lufa/lufa.c ****     }
 277:tmk_core/protocol/lufa/lufa.c **** 
 278:tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 279:tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 280:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 281:tmk_core/protocol/lufa/lufa.c **** 
 282:tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 283:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 284:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 285:tmk_core/protocol/lufa/lufa.c ****     }
 286:tmk_core/protocol/lufa/lufa.c **** 
 287:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 288:tmk_core/protocol/lufa/lufa.c **** }
 289:tmk_core/protocol/lufa/lufa.c **** #endif
 290:tmk_core/protocol/lufa/lufa.c **** 
 291:tmk_core/protocol/lufa/lufa.c **** 
 292:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 293:tmk_core/protocol/lufa/lufa.c ****  * USB Events
 294:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 295:tmk_core/protocol/lufa/lufa.c **** /*
 296:tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 297:tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 298:tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 299:tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 300:tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 301:tmk_core/protocol/lufa/lufa.c **** */
 302:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 303:tmk_core/protocol/lufa/lufa.c ****  *
 304:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 305:tmk_core/protocol/lufa/lufa.c ****  */
 306:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 307:tmk_core/protocol/lufa/lufa.c **** {
 308:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 309:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 310:tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 311:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 312:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 313:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 314:tmk_core/protocol/lufa/lufa.c ****     }
 315:tmk_core/protocol/lufa/lufa.c **** }
 316:tmk_core/protocol/lufa/lufa.c **** 
 317:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 318:tmk_core/protocol/lufa/lufa.c ****  *
 319:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 320:tmk_core/protocol/lufa/lufa.c ****  */
 321:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 322:tmk_core/protocol/lufa/lufa.c **** {
 323:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 324:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 325:tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 326:tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 327:tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 328:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 329:tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 330:tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 331:tmk_core/protocol/lufa/lufa.c ****     }
 332:tmk_core/protocol/lufa/lufa.c **** */
 333:tmk_core/protocol/lufa/lufa.c **** }
 334:tmk_core/protocol/lufa/lufa.c **** 
 335:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 336:tmk_core/protocol/lufa/lufa.c ****  *
 337:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 338:tmk_core/protocol/lufa/lufa.c ****  */
 339:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 340:tmk_core/protocol/lufa/lufa.c **** {
 341:tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 342:tmk_core/protocol/lufa/lufa.c **** }
 343:tmk_core/protocol/lufa/lufa.c **** 
 344:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 345:tmk_core/protocol/lufa/lufa.c ****  *
 346:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 347:tmk_core/protocol/lufa/lufa.c ****  */
 348:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 349:tmk_core/protocol/lufa/lufa.c **** {
 350:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 351:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 352:tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 353:tmk_core/protocol/lufa/lufa.c **** #endif
 354:tmk_core/protocol/lufa/lufa.c **** }
 355:tmk_core/protocol/lufa/lufa.c **** 
 356:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 357:tmk_core/protocol/lufa/lufa.c ****  *
 358:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 359:tmk_core/protocol/lufa/lufa.c ****  */
 360:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 361:tmk_core/protocol/lufa/lufa.c **** {
 362:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 363:tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 364:tmk_core/protocol/lufa/lufa.c **** 
 365:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 366:tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 367:tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 368:tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 369:tmk_core/protocol/lufa/lufa.c **** #endif
 370:tmk_core/protocol/lufa/lufa.c **** }
 371:tmk_core/protocol/lufa/lufa.c **** 
 372:tmk_core/protocol/lufa/lufa.c **** 
 373:tmk_core/protocol/lufa/lufa.c **** 
 374:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 375:tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 376:tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 377:tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 378:tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 379:tmk_core/protocol/lufa/lufa.c ****   } \
 380:tmk_core/protocol/lufa/lufa.c **** } while (0)
 381:tmk_core/protocol/lufa/lufa.c **** 
 382:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Start Of Frame
 383:tmk_core/protocol/lufa/lufa.c ****  *
 384:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 385:tmk_core/protocol/lufa/lufa.c ****  * called every 1ms
 386:tmk_core/protocol/lufa/lufa.c ****  */
 387:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 388:tmk_core/protocol/lufa/lufa.c **** {
 389:tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 390:tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 391:tmk_core/protocol/lufa/lufa.c ****     count = 0;
 392:tmk_core/protocol/lufa/lufa.c **** 
 393:tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 394:tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 395:tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 396:tmk_core/protocol/lufa/lufa.c **** }
 397:tmk_core/protocol/lufa/lufa.c **** 
 398:tmk_core/protocol/lufa/lufa.c **** #endif
 399:tmk_core/protocol/lufa/lufa.c **** 
 400:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ConfigurationChanged event.
 401:tmk_core/protocol/lufa/lufa.c ****  *
 402:tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 403:tmk_core/protocol/lufa/lufa.c ****  *
 404:tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 405:tmk_core/protocol/lufa/lufa.c ****  * it is safe to use single bank for all endpoints.
 406:tmk_core/protocol/lufa/lufa.c ****  */
 407:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 408:tmk_core/protocol/lufa/lufa.c **** {
 409:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 410:tmk_core/protocol/lufa/lufa.c **** 
 411:tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 412:tmk_core/protocol/lufa/lufa.c **** #ifndef KEYBOARD_SHARED_EP
 413:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 414:tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 415:tmk_core/protocol/lufa/lufa.c **** #endif
 416:tmk_core/protocol/lufa/lufa.c **** 
 417:tmk_core/protocol/lufa/lufa.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 418:tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 419:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 420:tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 421:tmk_core/protocol/lufa/lufa.c **** #endif
 422:tmk_core/protocol/lufa/lufa.c **** 
 423:tmk_core/protocol/lufa/lufa.c **** #ifdef SHARED_EP_ENABLE
 424:tmk_core/protocol/lufa/lufa.c ****     /* Setup Shared HID Report Endpoint */
 425:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(SHARED_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 426:tmk_core/protocol/lufa/lufa.c ****                                      SHARED_EPSIZE, ENDPOINT_BANK_SINGLE);
 427:tmk_core/protocol/lufa/lufa.c **** #endif
 428:tmk_core/protocol/lufa/lufa.c **** 
 429:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 430:tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 431:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 432:tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 433:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 434:tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 435:tmk_core/protocol/lufa/lufa.c **** #endif
 436:tmk_core/protocol/lufa/lufa.c **** 
 437:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 438:tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 439:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 440:tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 441:tmk_core/protocol/lufa/lufa.c **** #if 0
 442:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 443:tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 444:tmk_core/protocol/lufa/lufa.c **** #endif
 445:tmk_core/protocol/lufa/lufa.c **** #endif
 446:tmk_core/protocol/lufa/lufa.c **** 
 447:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 448:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 449:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 450:tmk_core/protocol/lufa/lufa.c **** #endif
 451:tmk_core/protocol/lufa/lufa.c **** 
 452:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 453:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 454:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 455:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 456:tmk_core/protocol/lufa/lufa.c **** #endif
 457:tmk_core/protocol/lufa/lufa.c **** }
 458:tmk_core/protocol/lufa/lufa.c **** 
 459:tmk_core/protocol/lufa/lufa.c **** /* FIXME: Expose this table in the docs somehow
 460:tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 461:tmk_core/protocol/lufa/lufa.c **** 
 462:tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 463:tmk_core/protocol/lufa/lufa.c **** 
 464:tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 465:tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 466:tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 467:tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 468:tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 469:tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 470:tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 471:tmk_core/protocol/lufa/lufa.c **** */
 472:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ControlRequest event.
 473:tmk_core/protocol/lufa/lufa.c ****  *
 474:tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 475:tmk_core/protocol/lufa/lufa.c ****  */
 476:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 477:tmk_core/protocol/lufa/lufa.c **** {
 478:tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 479:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 480:tmk_core/protocol/lufa/lufa.c **** 
 481:tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 482:tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 483:tmk_core/protocol/lufa/lufa.c ****     {
 484:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 485:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 486:tmk_core/protocol/lufa/lufa.c ****             {
 487:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 488:tmk_core/protocol/lufa/lufa.c **** 
 489:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 490:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 491:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 492:tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 493:tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 494:tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 495:tmk_core/protocol/lufa/lufa.c ****                     break;
 496:tmk_core/protocol/lufa/lufa.c ****                 }
 497:tmk_core/protocol/lufa/lufa.c **** 
 498:tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 499:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 500:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 501:tmk_core/protocol/lufa/lufa.c ****             }
 502:tmk_core/protocol/lufa/lufa.c **** 
 503:tmk_core/protocol/lufa/lufa.c ****             break;
 504:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 505:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 506:tmk_core/protocol/lufa/lufa.c ****             {
 507:tmk_core/protocol/lufa/lufa.c **** 
 508:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 509:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 510:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 511:tmk_core/protocol/lufa/lufa.c **** #if defined(SHARED_EP_ENABLE) && !defined(KEYBOARD_SHARED_EP)
 512:tmk_core/protocol/lufa/lufa.c ****                 case SHARED_INTERFACE:
 513:tmk_core/protocol/lufa/lufa.c **** #endif
 514:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 515:tmk_core/protocol/lufa/lufa.c **** 
 516:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 517:tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 518:tmk_core/protocol/lufa/lufa.c ****                           return;
 519:tmk_core/protocol/lufa/lufa.c ****                     }
 520:tmk_core/protocol/lufa/lufa.c **** 
 521:tmk_core/protocol/lufa/lufa.c ****                     if (Endpoint_BytesInEndpoint() == 2) {
 522:tmk_core/protocol/lufa/lufa.c ****                       uint8_t report_id = Endpoint_Read_8();
 523:tmk_core/protocol/lufa/lufa.c **** 
 524:tmk_core/protocol/lufa/lufa.c ****                       if (report_id == REPORT_ID_KEYBOARD || report_id == REPORT_ID_NKRO) {
 525:tmk_core/protocol/lufa/lufa.c ****                         keyboard_led_stats = Endpoint_Read_8();
 526:tmk_core/protocol/lufa/lufa.c ****                       }
 527:tmk_core/protocol/lufa/lufa.c ****                     } else {
 528:tmk_core/protocol/lufa/lufa.c ****                       keyboard_led_stats = Endpoint_Read_8();
 529:tmk_core/protocol/lufa/lufa.c ****                     }
 530:tmk_core/protocol/lufa/lufa.c **** 
 531:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 532:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 533:tmk_core/protocol/lufa/lufa.c ****                     break;
 534:tmk_core/protocol/lufa/lufa.c ****                 }
 535:tmk_core/protocol/lufa/lufa.c **** 
 536:tmk_core/protocol/lufa/lufa.c ****             }
 537:tmk_core/protocol/lufa/lufa.c **** 
 538:tmk_core/protocol/lufa/lufa.c ****             break;
 539:tmk_core/protocol/lufa/lufa.c **** 
 540:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 541:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 542:tmk_core/protocol/lufa/lufa.c ****             {
 543:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 544:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 545:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 546:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 547:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 548:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 549:tmk_core/protocol/lufa/lufa.c ****                 }
 550:tmk_core/protocol/lufa/lufa.c ****             }
 551:tmk_core/protocol/lufa/lufa.c **** 
 552:tmk_core/protocol/lufa/lufa.c ****             break;
 553:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 554:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 555:tmk_core/protocol/lufa/lufa.c ****             {
 556:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 557:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 558:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 559:tmk_core/protocol/lufa/lufa.c **** 
 560:tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 561:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 562:tmk_core/protocol/lufa/lufa.c ****                 }
 563:tmk_core/protocol/lufa/lufa.c ****             }
 564:tmk_core/protocol/lufa/lufa.c **** 
 565:tmk_core/protocol/lufa/lufa.c ****             break;
 566:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 567:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 568:tmk_core/protocol/lufa/lufa.c ****             {
 569:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 570:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 571:tmk_core/protocol/lufa/lufa.c **** 
 572:tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 573:tmk_core/protocol/lufa/lufa.c ****             }
 574:tmk_core/protocol/lufa/lufa.c **** 
 575:tmk_core/protocol/lufa/lufa.c ****             break;
 576:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 577:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 578:tmk_core/protocol/lufa/lufa.c ****             {
 579:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 580:tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 581:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 582:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 583:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 584:tmk_core/protocol/lufa/lufa.c ****             }
 585:tmk_core/protocol/lufa/lufa.c **** 
 586:tmk_core/protocol/lufa/lufa.c ****             break;
 587:tmk_core/protocol/lufa/lufa.c ****     }
 588:tmk_core/protocol/lufa/lufa.c **** 
 589:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 590:tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 591:tmk_core/protocol/lufa/lufa.c **** #endif
 592:tmk_core/protocol/lufa/lufa.c **** }
 593:tmk_core/protocol/lufa/lufa.c **** 
 594:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 595:tmk_core/protocol/lufa/lufa.c ****  * Host driver
 596:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 597:tmk_core/protocol/lufa/lufa.c **** /** \brief Keyboard LEDs
 598:tmk_core/protocol/lufa/lufa.c ****  *
 599:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 600:tmk_core/protocol/lufa/lufa.c ****  */
 601:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 602:tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 602 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 603:tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 604:tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 604 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE128:
  27               		.section	.text.send_system,"ax",@progbits
  29               	send_system:
  30               	.LFB131:
 605:tmk_core/protocol/lufa/lufa.c **** 
 606:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Keyboard
 607:tmk_core/protocol/lufa/lufa.c ****  *
 608:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 609:tmk_core/protocol/lufa/lufa.c ****  */
 610:tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 611:tmk_core/protocol/lufa/lufa.c **** {
 612:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 613:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 614:tmk_core/protocol/lufa/lufa.c **** 
 615:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 616:tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 617:tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 618:tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 619:tmk_core/protocol/lufa/lufa.c ****     #elif MODULE_RN42
 620:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 621:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x09);
 622:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x01);
 623:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->mods);
 624:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->reserved);
 625:tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 626:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->keys[i]);
 627:tmk_core/protocol/lufa/lufa.c ****       }
 628:tmk_core/protocol/lufa/lufa.c ****     #else
 629:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 630:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->mods);
 631:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->reserved);
 632:tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 633:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->keys[i]);
 634:tmk_core/protocol/lufa/lufa.c ****       }
 635:tmk_core/protocol/lufa/lufa.c ****     #endif
 636:tmk_core/protocol/lufa/lufa.c ****   }
 637:tmk_core/protocol/lufa/lufa.c **** #endif
 638:tmk_core/protocol/lufa/lufa.c **** 
 639:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 640:tmk_core/protocol/lufa/lufa.c ****       return;
 641:tmk_core/protocol/lufa/lufa.c ****     }
 642:tmk_core/protocol/lufa/lufa.c **** 
 643:tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 644:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = KEYBOARD_IN_EPNUM;
 645:tmk_core/protocol/lufa/lufa.c ****     uint8_t size = KEYBOARD_REPORT_SIZE;
 646:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 647:tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 648:tmk_core/protocol/lufa/lufa.c ****         ep = SHARED_IN_EPNUM;
 649:tmk_core/protocol/lufa/lufa.c ****         size = sizeof(struct nkro_report);
 650:tmk_core/protocol/lufa/lufa.c ****     }
 651:tmk_core/protocol/lufa/lufa.c **** #endif
 652:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 653:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 654:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 655:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 656:tmk_core/protocol/lufa/lufa.c **** 
 657:tmk_core/protocol/lufa/lufa.c ****     /* If we're in Boot Protocol, don't send any report ID or other funky fields */
 658:tmk_core/protocol/lufa/lufa.c ****     if (!keyboard_protocol) {
 659:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(&report->mods, 8, NULL);
 660:tmk_core/protocol/lufa/lufa.c ****     } else {
 661:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, size, NULL);
 662:tmk_core/protocol/lufa/lufa.c ****     }
 663:tmk_core/protocol/lufa/lufa.c **** 
 664:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 665:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 666:tmk_core/protocol/lufa/lufa.c **** 
 667:tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 668:tmk_core/protocol/lufa/lufa.c **** }
 669:tmk_core/protocol/lufa/lufa.c ****  
 670:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Mouse
 671:tmk_core/protocol/lufa/lufa.c ****  *
 672:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 673:tmk_core/protocol/lufa/lufa.c ****  */
 674:tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 675:tmk_core/protocol/lufa/lufa.c **** {
 676:tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 677:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 678:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 679:tmk_core/protocol/lufa/lufa.c **** 
 680:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 681:tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 682:tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 683:tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 684:tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 685:tmk_core/protocol/lufa/lufa.c ****     #else
 686:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 687:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 688:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x03);
 689:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->buttons);
 690:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->x);
 691:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->y);
 692:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->v); // should try sending the wheel v here
 693:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->h); // should try sending the wheel h here
 694:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 695:tmk_core/protocol/lufa/lufa.c ****     #endif
 696:tmk_core/protocol/lufa/lufa.c ****   }
 697:tmk_core/protocol/lufa/lufa.c **** #endif
 698:tmk_core/protocol/lufa/lufa.c **** 
 699:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 700:tmk_core/protocol/lufa/lufa.c ****       return;
 701:tmk_core/protocol/lufa/lufa.c ****     }
 702:tmk_core/protocol/lufa/lufa.c **** 
 703:tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 704:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 705:tmk_core/protocol/lufa/lufa.c **** 
 706:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 707:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 708:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 709:tmk_core/protocol/lufa/lufa.c **** 
 710:tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 711:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 712:tmk_core/protocol/lufa/lufa.c **** 
 713:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 714:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 715:tmk_core/protocol/lufa/lufa.c **** #endif
 716:tmk_core/protocol/lufa/lufa.c **** }
 717:tmk_core/protocol/lufa/lufa.c **** 
 718:tmk_core/protocol/lufa/lufa.c **** /** \brief Send System
 719:tmk_core/protocol/lufa/lufa.c ****  *
 720:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 721:tmk_core/protocol/lufa/lufa.c ****  */
 722:tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 723:tmk_core/protocol/lufa/lufa.c **** {
  31               		.loc 1 723 0
  32               		.cfi_startproc
  33               	.LVL0:
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 0 */
  37               	.L__stack_usage = 0
  38 0000 0895      		ret
  39               		.cfi_endproc
  40               	.LFE131:
  42               		.section	.text.send_consumer,"ax",@progbits
  44               	send_consumer:
  45               	.LFB132:
 724:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 725:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 726:tmk_core/protocol/lufa/lufa.c **** 
 727:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 728:tmk_core/protocol/lufa/lufa.c ****         return;
 729:tmk_core/protocol/lufa/lufa.c **** 
 730:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 731:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 732:tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 733:tmk_core/protocol/lufa/lufa.c ****     };
 734:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 735:tmk_core/protocol/lufa/lufa.c **** 
 736:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 737:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 738:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 739:tmk_core/protocol/lufa/lufa.c **** 
 740:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 741:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 742:tmk_core/protocol/lufa/lufa.c **** #endif
 743:tmk_core/protocol/lufa/lufa.c **** }
 744:tmk_core/protocol/lufa/lufa.c **** 
 745:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Consumer
 746:tmk_core/protocol/lufa/lufa.c ****  *
 747:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 748:tmk_core/protocol/lufa/lufa.c ****  */
 749:tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 750:tmk_core/protocol/lufa/lufa.c **** {
  46               		.loc 1 750 0
  47               		.cfi_startproc
  48               	.LVL1:
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 0 */
  52               	.L__stack_usage = 0
  53 0000 0895      		ret
  54               		.cfi_endproc
  55               	.LFE132:
  57               		.section	.text.send_mouse,"ax",@progbits
  59               	send_mouse:
  60               	.LFB130:
 675:tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
  61               		.loc 1 675 0
  62               		.cfi_startproc
  63               	.LVL2:
 675:tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
  64               		.loc 1 675 0
  65 0000 CF93      		push r28
  66               	.LCFI0:
  67               		.cfi_def_cfa_offset 3
  68               		.cfi_offset 28, -2
  69 0002 DF93      		push r29
  70               	.LCFI1:
  71               		.cfi_def_cfa_offset 4
  72               		.cfi_offset 29, -3
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 2 */
  76               	.L__stack_usage = 2
  77 0004 EC01      		movw r28,r24
  78               	.LVL3:
 678:tmk_core/protocol/lufa/lufa.c **** 
  79               		.loc 1 678 0
  80 0006 0E94 0000 		call where_to_send
  81               	.LVL4:
 699:tmk_core/protocol/lufa/lufa.c ****       return;
  82               		.loc 1 699 0
  83 000a 8230      		cpi r24,lo8(2)
  84 000c 01F0      		breq .L5
 699:tmk_core/protocol/lufa/lufa.c ****       return;
  85               		.loc 1 699 0 is_stmt 0 discriminator 1
  86 000e 8430      		cpi r24,lo8(4)
  87 0010 01F4      		brne .L4
  88               	.L5:
  89               	.LVL5:
  90               	.LBB84:
  91               	.LBB85:
  92               		.file 2 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  93               		.loc 2 270 0 is_stmt 1
  94 0012 82E0      		ldi r24,lo8(2)
  95               	.LVL6:
  96 0014 8093 E900 		sts 233,r24
  97               	.LVL7:
  98 0018 9FEF      		ldi r25,lo8(-1)
  99               	.LVL8:
 100               	.L7:
 101               	.LBE85:
 102               	.LBE84:
 103               	.LBB86:
 104               	.LBB87:
 271:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 105               		.loc 2 360 0
 106 001a 8091 E800 		lds r24,232
 107 001e 9150      		subi r25,lo8(-(-1))
 108               	.LVL9:
 109               	.LBE87:
 110               	.LBE86:
 707:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 111               		.loc 1 707 0
 112 0020 85FD      		sbrc r24,5
 113 0022 00C0      		rjmp .L8
 114               	.LVL10:
 115               	.LBB88:
 116               	.LBB89:
 117               		.file 3 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 164:/usr/lib/avr/include/util/delay.h **** 
 165:/usr/lib/avr/include/util/delay.h **** #else
 166:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 167:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/avr/include/util/delay.h **** 	{
 172:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/avr/include/util/delay.h **** 		{
 176:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/avr/include/util/delay.h **** 		}
 180:/usr/lib/avr/include/util/delay.h **** 		return;
 181:/usr/lib/avr/include/util/delay.h **** 	}
 182:/usr/lib/avr/include/util/delay.h **** 	else
 183:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/avr/include/util/delay.h **** #endif
 186:/usr/lib/avr/include/util/delay.h **** }
 187:/usr/lib/avr/include/util/delay.h **** 
 188:/usr/lib/avr/include/util/delay.h **** /**
 189:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/avr/include/util/delay.h **** 
 191:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/avr/include/util/delay.h **** 
 193:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/avr/include/util/delay.h **** 
 196:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/avr/include/util/delay.h **** 
 198:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/avr/include/util/delay.h **** 
 202:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/avr/include/util/delay.h ****   
 207:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/avr/include/util/delay.h **** 
 211:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/avr/include/util/delay.h ****  
 214:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****  */
 223:/usr/lib/avr/include/util/delay.h **** void
 224:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/avr/include/util/delay.h **** {
 226:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 227:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 228:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 229:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 230:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 231:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 232:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 233:/usr/lib/avr/include/util/delay.h **** 
 234:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 235:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 236:/usr/lib/avr/include/util/delay.h **** 
 237:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 238:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 239:/usr/lib/avr/include/util/delay.h **** 
 240:/usr/lib/avr/include/util/delay.h **** 	#else
 241:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 242:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 243:/usr/lib/avr/include/util/delay.h **** 	#endif
 244:/usr/lib/avr/include/util/delay.h **** 
 245:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 118               		.loc 3 245 0
 119 0024 85ED      		ldi r24,lo8(-43)
 120 0026 8A95      	1:	dec r24
 121 0028 01F4      		brne 1b
 122 002a 0000      		nop
 123               	.LVL11:
 124               	.LBE89:
 125               	.LBE88:
 707:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 126               		.loc 1 707 0
 127 002c 9111      		cpse r25,__zero_reg__
 128 002e 00C0      		rjmp .L7
 129               	.LVL12:
 130               	.L8:
 131               	.LBB90:
 132               	.LBB91:
 133               		.loc 2 360 0
 134 0030 8091 E800 		lds r24,232
 135               	.LBE91:
 136               	.LBE90:
 708:tmk_core/protocol/lufa/lufa.c **** 
 137               		.loc 1 708 0
 138 0034 85FF      		sbrs r24,5
 139 0036 00C0      		rjmp .L4
 711:tmk_core/protocol/lufa/lufa.c **** 
 140               		.loc 1 711 0
 141 0038 40E0      		ldi r20,0
 142 003a 50E0      		ldi r21,0
 143 003c 66E0      		ldi r22,lo8(6)
 144 003e 70E0      		ldi r23,0
 145 0040 CE01      		movw r24,r28
 146 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 147               	.LVL13:
 148               	.LBB92:
 149               	.LBB93:
 361:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 150               		.loc 2 456 0
 151 0046 8091 E800 		lds r24,232
 152 004a 8E77      		andi r24,lo8(126)
 153 004c 8093 E800 		sts 232,r24
 154               	.LVL14:
 155               	.L4:
 156               	/* epilogue start */
 157               	.LBE93:
 158               	.LBE92:
 716:tmk_core/protocol/lufa/lufa.c **** 
 159               		.loc 1 716 0
 160 0050 DF91      		pop r29
 161 0052 CF91      		pop r28
 162               	.LVL15:
 163 0054 0895      		ret
 164               		.cfi_endproc
 165               	.LFE130:
 167               		.section	.text.send_keyboard,"ax",@progbits
 169               	send_keyboard:
 170               	.LFB129:
 611:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 171               		.loc 1 611 0
 172               		.cfi_startproc
 173               	.LVL16:
 174 0000 CF93      		push r28
 175               	.LCFI2:
 176               		.cfi_def_cfa_offset 3
 177               		.cfi_offset 28, -2
 178 0002 DF93      		push r29
 179               	.LCFI3:
 180               		.cfi_def_cfa_offset 4
 181               		.cfi_offset 29, -3
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 2 */
 185               	.L__stack_usage = 2
 186 0004 EC01      		movw r28,r24
 187               	.LVL17:
 613:tmk_core/protocol/lufa/lufa.c **** 
 188               		.loc 1 613 0
 189 0006 0E94 0000 		call where_to_send
 190               	.LVL18:
 639:tmk_core/protocol/lufa/lufa.c ****       return;
 191               		.loc 1 639 0
 192 000a 8230      		cpi r24,lo8(2)
 193 000c 01F0      		breq .L25
 639:tmk_core/protocol/lufa/lufa.c ****       return;
 194               		.loc 1 639 0 is_stmt 0 discriminator 1
 195 000e 8430      		cpi r24,lo8(4)
 196 0010 01F4      		brne .L24
 197               	.L25:
 198               	.LVL19:
 199               	.LBB94:
 200               	.LBB95:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 201               		.loc 2 270 0 is_stmt 1
 202 0012 81E0      		ldi r24,lo8(1)
 203               	.LVL20:
 204 0014 8093 E900 		sts 233,r24
 205               	.LVL21:
 206 0018 8FEF      		ldi r24,lo8(-1)
 207               	.LVL22:
 208               	.L27:
 209               	.LBE95:
 210               	.LBE94:
 211               	.LBB96:
 212               	.LBB97:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 213               		.loc 2 360 0
 214 001a 9091 E800 		lds r25,232
 215 001e 8150      		subi r24,lo8(-(-1))
 216               	.LVL23:
 217               	.LBE97:
 218               	.LBE96:
 654:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 219               		.loc 1 654 0
 220 0020 95FD      		sbrc r25,5
 221 0022 00C0      		rjmp .L28
 222               	.LVL24:
 223               	.LBB98:
 224               	.LBB99:
 225               		.loc 3 245 0
 226 0024 95ED      		ldi r25,lo8(-43)
 227 0026 9A95      	1:	dec r25
 228 0028 01F4      		brne 1b
 229 002a 0000      		nop
 230               	.LVL25:
 231               	.LBE99:
 232               	.LBE98:
 654:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 233               		.loc 1 654 0
 234 002c 8111      		cpse r24,__zero_reg__
 235 002e 00C0      		rjmp .L27
 236               	.LVL26:
 237               	.L28:
 238               	.LBB100:
 239               	.LBB101:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 240               		.loc 2 360 0
 241 0030 8091 E800 		lds r24,232
 242               	.LBE101:
 243               	.LBE100:
 655:tmk_core/protocol/lufa/lufa.c **** 
 244               		.loc 1 655 0
 245 0034 85FF      		sbrs r24,5
 246 0036 00C0      		rjmp .L24
 659:tmk_core/protocol/lufa/lufa.c ****     } else {
 247               		.loc 1 659 0
 248 0038 40E0      		ldi r20,0
 249 003a 50E0      		ldi r21,0
 250 003c 68E0      		ldi r22,lo8(8)
 251 003e 70E0      		ldi r23,0
 661:tmk_core/protocol/lufa/lufa.c ****     }
 252               		.loc 1 661 0
 253 0040 CE01      		movw r24,r28
 254 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 255               	.LVL27:
 256               	.LBB102:
 257               	.LBB103:
 258               		.loc 2 456 0
 259 0046 8091 E800 		lds r24,232
 260 004a 8E77      		andi r24,lo8(126)
 261 004c 8093 E800 		sts 232,r24
 262               	.LBE103:
 263               	.LBE102:
 667:tmk_core/protocol/lufa/lufa.c **** }
 264               		.loc 1 667 0
 265 0050 88E0      		ldi r24,lo8(8)
 266 0052 FE01      		movw r30,r28
 267 0054 A0E0      		ldi r26,lo8(keyboard_report_sent)
 268 0056 B0E0      		ldi r27,hi8(keyboard_report_sent)
 269               		0:
 270 0058 0190      		ld r0,Z+
 271 005a 0D92      		st X+,r0
 272 005c 8A95      		dec r24
 273 005e 01F4      		brne 0b
 274               	.LVL28:
 275               	.L24:
 276               	/* epilogue start */
 668:tmk_core/protocol/lufa/lufa.c ****  
 277               		.loc 1 668 0
 278 0060 DF91      		pop r29
 279 0062 CF91      		pop r28
 280               	.LVL29:
 281 0064 0895      		ret
 282               		.cfi_endproc
 283               	.LFE129:
 285               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 286               	.global	EVENT_USB_Device_Connect
 288               	EVENT_USB_Device_Connect:
 289               	.LFB121:
 307:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 290               		.loc 1 307 0
 291               		.cfi_startproc
 292               	/* prologue: function */
 293               	/* frame size = 0 */
 294               	/* stack size = 0 */
 295               	.L__stack_usage = 0
 310:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 296               		.loc 1 310 0
 297 0000 8091 0000 		lds r24,USB_IsInitialized
 298 0004 8111      		cpse r24,__zero_reg__
 299 0006 00C0      		rjmp .L45
 311:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 300               		.loc 1 311 0
 301 0008 0E94 0000 		call USB_Disable
 302               	.LVL30:
 312:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 303               		.loc 1 312 0
 304 000c 0E94 0000 		call USB_Init
 305               	.LVL31:
 306               	.LBB104:
 307               	.LBB105:
 308               	.LBB106:
 309               		.file 4 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 310               		.loc 4 113 0
 311 0010 8091 E200 		lds r24,226
 312 0014 8460      		ori r24,lo8(4)
 313 0016 8093 E200 		sts 226,r24
 314               	.LVL32:
 315               	.L45:
 316 001a 0895      		ret
 317               	.LBE106:
 318               	.LBE105:
 319               	.LBE104:
 320               		.cfi_endproc
 321               	.LFE121:
 323               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 324               	.global	EVENT_USB_Device_Disconnect
 326               	EVENT_USB_Device_Disconnect:
 327               	.LFB122:
 322:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 328               		.loc 1 322 0
 329               		.cfi_startproc
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 0 */
 333               	.L__stack_usage = 0
 325:tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 334               		.loc 1 325 0
 335 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 336 0004 0895      		ret
 337               		.cfi_endproc
 338               	.LFE122:
 340               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 341               	.global	EVENT_USB_Device_Reset
 343               	EVENT_USB_Device_Reset:
 344               	.LFB123:
 340:tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 345               		.loc 1 340 0
 346               		.cfi_startproc
 347               	/* prologue: function */
 348               	/* frame size = 0 */
 349               	/* stack size = 0 */
 350               	.L__stack_usage = 0
 351 0000 0895      		ret
 352               		.cfi_endproc
 353               	.LFE123:
 355               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 356               	.global	EVENT_USB_Device_Suspend
 358               	EVENT_USB_Device_Suspend:
 359               	.LFB124:
 349:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 360               		.loc 1 349 0
 361               		.cfi_startproc
 362               	/* prologue: function */
 363               	/* frame size = 0 */
 364               	/* stack size = 0 */
 365               	.L__stack_usage = 0
 366 0000 0895      		ret
 367               		.cfi_endproc
 368               	.LFE124:
 370               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 371               	.global	EVENT_USB_Device_WakeUp
 373               	EVENT_USB_Device_WakeUp:
 374               	.LFB125:
 361:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 375               		.loc 1 361 0
 376               		.cfi_startproc
 377               	/* prologue: function */
 378               	/* frame size = 0 */
 379               	/* stack size = 0 */
 380               	.L__stack_usage = 0
 363:tmk_core/protocol/lufa/lufa.c **** 
 381               		.loc 1 363 0
 382 0000 0C94 0000 		jmp suspend_wakeup_init
 383               	.LVL33:
 384               		.cfi_endproc
 385               	.LFE125:
 387               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 388               	.global	EVENT_USB_Device_ConfigurationChanged
 390               	EVENT_USB_Device_ConfigurationChanged:
 391               	.LFB126:
 408:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 392               		.loc 1 408 0
 393               		.cfi_startproc
 394               	/* prologue: function */
 395               	/* frame size = 0 */
 396               	/* stack size = 0 */
 397               	.L__stack_usage = 0
 398               	.LVL34:
 399               	.LBB107:
 400               	.LBB108:
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 401               		.loc 2 210 0
 402 0000 42E0      		ldi r20,lo8(2)
 403 0002 61EC      		ldi r22,lo8(-63)
 404 0004 81E0      		ldi r24,lo8(1)
 405 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 406               	.LVL35:
 407               	.LBE108:
 408               	.LBE107:
 409               	.LBB109:
 410               	.LBB110:
 411 000a 42E2      		ldi r20,lo8(34)
 412 000c 61EC      		ldi r22,lo8(-63)
 413 000e 82E0      		ldi r24,lo8(2)
 414 0010 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 415               	.LVL36:
 416               	.LBE110:
 417               	.LBE109:
 418               		.cfi_endproc
 419               	.LFE126:
 421               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 422               	.global	EVENT_USB_Device_ControlRequest
 424               	EVENT_USB_Device_ControlRequest:
 425               	.LFB127:
 477:tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 426               		.loc 1 477 0
 427               		.cfi_startproc
 428               	/* prologue: function */
 429               	/* frame size = 0 */
 430               	/* stack size = 0 */
 431               	.L__stack_usage = 0
 432               	.LVL37:
 482:tmk_core/protocol/lufa/lufa.c ****     {
 433               		.loc 1 482 0
 434 0000 8091 0000 		lds r24,USB_ControlRequest+1
 435 0004 8330      		cpi r24,lo8(3)
 436 0006 01F4      		brne .+2
 437 0008 00C0      		rjmp .L54
 438 000a 00F4      		brsh .L55
 439 000c 8130      		cpi r24,lo8(1)
 440 000e 01F0      		breq .L56
 441 0010 8230      		cpi r24,lo8(2)
 442 0012 01F4      		brne .+2
 443 0014 00C0      		rjmp .L57
 444 0016 0895      		ret
 445               	.L55:
 446 0018 8A30      		cpi r24,lo8(10)
 447 001a 01F4      		brne .+2
 448 001c 00C0      		rjmp .L58
 449 001e 8B30      		cpi r24,lo8(11)
 450 0020 01F4      		brne .+2
 451 0022 00C0      		rjmp .L59
 452 0024 8930      		cpi r24,lo8(9)
 453 0026 01F0      		breq .+2
 454 0028 00C0      		rjmp .L52
 455 002a 00C0      		rjmp .L83
 456               	.L56:
 485:tmk_core/protocol/lufa/lufa.c ****             {
 457               		.loc 1 485 0
 458 002c 8091 0000 		lds r24,USB_ControlRequest
 459 0030 813A      		cpi r24,lo8(-95)
 460 0032 01F0      		breq .+2
 461 0034 00C0      		rjmp .L52
 462               	.LBB111:
 463               	.LBB112:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 464               		.loc 2 444 0
 465 0036 8091 E800 		lds r24,232
 466 003a 877F      		andi r24,lo8(-9)
 467 003c 8093 E800 		sts 232,r24
 468               	.LBE112:
 469               	.LBE111:
 490:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 470               		.loc 1 490 0
 471 0040 8091 0000 		lds r24,USB_ControlRequest+4
 472 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 473 0048 892B      		or r24,r25
 474 004a 01F4      		brne .L80
 494:tmk_core/protocol/lufa/lufa.c ****                     break;
 475               		.loc 1 494 0
 476 004c 68E0      		ldi r22,lo8(8)
 493:tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 477               		.loc 1 493 0
 478 004e 80E0      		ldi r24,lo8(keyboard_report_sent)
 479 0050 90E0      		ldi r25,hi8(keyboard_report_sent)
 480 0052 00C0      		rjmp .L62
 481               	.L80:
 479:tmk_core/protocol/lufa/lufa.c **** 
 482               		.loc 1 479 0
 483 0054 60E0      		ldi r22,0
 478:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 484               		.loc 1 478 0
 485 0056 80E0      		ldi r24,0
 486 0058 90E0      		ldi r25,0
 487               	.L62:
 488               	.LVL38:
 499:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 489               		.loc 1 499 0
 490 005a 70E0      		ldi r23,0
 491 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 492               	.LVL39:
 493               	.LBB113:
 494               	.LBB114:
 457:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 495               		.loc 2 471 0
 496 0060 8091 E800 		lds r24,232
 497 0064 8B77      		andi r24,lo8(123)
 498 0066 8093 E800 		sts 232,r24
 499 006a 0895      		ret
 500               	.LVL40:
 501               	.L83:
 502               	.LBE114:
 503               	.LBE113:
 505:tmk_core/protocol/lufa/lufa.c ****             {
 504               		.loc 1 505 0
 505 006c 8091 0000 		lds r24,USB_ControlRequest
 506 0070 8132      		cpi r24,lo8(33)
 507 0072 01F0      		breq .+2
 508 0074 00C0      		rjmp .L52
 509:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 509               		.loc 1 509 0
 510 0076 8091 0000 		lds r24,USB_ControlRequest+4
 511 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 512 007e 0297      		sbiw r24,2
 513 0080 00F0      		brlo .+2
 514 0082 00C0      		rjmp .L52
 515               	.LBB115:
 516               	.LBB116:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 517               		.loc 2 444 0
 518 0084 8091 E800 		lds r24,232
 519 0088 877F      		andi r24,lo8(-9)
 520 008a 8093 E800 		sts 232,r24
 521               	.L66:
 522               	.LBE116:
 523               	.LBE115:
 524               	.LBB117:
 525               	.LBB118:
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 526               		.loc 2 419 0
 527 008e 8091 E800 		lds r24,232
 528               	.LBE118:
 529               	.LBE117:
 516:tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 530               		.loc 1 516 0
 531 0092 82FD      		sbrc r24,2
 532 0094 00C0      		rjmp .L84
 517:tmk_core/protocol/lufa/lufa.c ****                           return;
 533               		.loc 1 517 0
 534 0096 8091 0000 		lds r24,USB_DeviceState
 535 009a 8111      		cpse r24,__zero_reg__
 536 009c 00C0      		rjmp .L66
 537 009e 00C0      		rjmp .L52
 538               	.L84:
 539               	.LBB119:
 540               	.LBB120:
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 541               		.loc 2 227 0
 542 00a0 2091 F300 		lds r18,243
 543 00a4 8091 F200 		lds r24,242
 544 00a8 90E0      		ldi r25,0
 545 00aa 922B      		or r25,r18
 546               	.LBE120:
 547               	.LBE119:
 521:tmk_core/protocol/lufa/lufa.c ****                       uint8_t report_id = Endpoint_Read_8();
 548               		.loc 1 521 0
 549 00ac 0297      		sbiw r24,2
 550 00ae 01F4      		brne .L68
 551               	.LBB121:
 552               	.LBB122:
 553               	.LBB123:
 472:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 554               		.loc 2 542 0
 555 00b0 8091 F100 		lds r24,241
 556               	.LBE123:
 557               	.LBE122:
 524:tmk_core/protocol/lufa/lufa.c ****                         keyboard_led_stats = Endpoint_Read_8();
 558               		.loc 1 524 0
 559 00b4 8B7F      		andi r24,lo8(-5)
 560 00b6 8130      		cpi r24,lo8(1)
 561 00b8 01F4      		brne .L69
 562               	.L68:
 563               	.LBE121:
 564               	.LBB124:
 565               	.LBB125:
 566               		.loc 2 542 0
 567 00ba 8091 F100 		lds r24,241
 568               	.LBE125:
 569               	.LBE124:
 528:tmk_core/protocol/lufa/lufa.c ****                     }
 570               		.loc 1 528 0
 571 00be 8093 0000 		sts keyboard_led_stats,r24
 572               	.L69:
 573               	.LBB126:
 574               	.LBB127:
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 575               		.loc 2 471 0
 576 00c2 8091 E800 		lds r24,232
 577 00c6 8B77      		andi r24,lo8(123)
 578 00c8 00C0      		rjmp .L81
 579               	.L54:
 580               	.LBE127:
 581               	.LBE126:
 541:tmk_core/protocol/lufa/lufa.c ****             {
 582               		.loc 1 541 0
 583 00ca 8091 0000 		lds r24,USB_ControlRequest
 584 00ce 813A      		cpi r24,lo8(-95)
 585 00d0 01F0      		breq .+2
 586 00d2 00C0      		rjmp .L52
 543:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 587               		.loc 1 543 0
 588 00d4 8091 0000 		lds r24,USB_ControlRequest+4
 589 00d8 9091 0000 		lds r25,USB_ControlRequest+4+1
 590 00dc 892B      		or r24,r25
 591 00de 01F0      		breq .+2
 592 00e0 00C0      		rjmp .L52
 593               	.LBB128:
 594               	.LBB129:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 595               		.loc 2 444 0
 596 00e2 8091 E800 		lds r24,232
 597 00e6 877F      		andi r24,lo8(-9)
 598 00e8 8093 E800 		sts 232,r24
 599               	.L70:
 600               	.LBE129:
 601               	.LBE128:
 602               	.LBB130:
 603               	.LBB131:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 604               		.loc 2 407 0 discriminator 1
 605 00ec 8091 E800 		lds r24,232
 606               	.LBE131:
 607               	.LBE130:
 545:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 608               		.loc 1 545 0 discriminator 1
 609 00f0 80FF      		sbrs r24,0
 610 00f2 00C0      		rjmp .L70
 546:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 611               		.loc 1 546 0
 612 00f4 8091 0000 		lds r24,keyboard_protocol
 613               	.LVL41:
 614 00f8 00C0      		rjmp .L82
 615               	.LVL42:
 616               	.L59:
 554:tmk_core/protocol/lufa/lufa.c ****             {
 617               		.loc 1 554 0
 618 00fa 8091 0000 		lds r24,USB_ControlRequest
 619 00fe 8132      		cpi r24,lo8(33)
 620 0100 01F4      		brne .L52
 556:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 621               		.loc 1 556 0
 622 0102 8091 0000 		lds r24,USB_ControlRequest+4
 623 0106 9091 0000 		lds r25,USB_ControlRequest+4+1
 624 010a 892B      		or r24,r25
 625 010c 01F4      		brne .L52
 626               	.LBB132:
 627               	.LBB133:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 628               		.loc 2 444 0
 629 010e 8091 E800 		lds r24,232
 630 0112 877F      		andi r24,lo8(-9)
 631 0114 8093 E800 		sts 232,r24
 632               	.LBE133:
 633               	.LBE132:
 558:tmk_core/protocol/lufa/lufa.c **** 
 634               		.loc 1 558 0
 635 0118 0E94 0000 		call Endpoint_ClearStatusStage
 636               	.LVL43:
 560:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 637               		.loc 1 560 0
 638 011c 8091 0000 		lds r24,USB_ControlRequest+2
 639 0120 8093 0000 		sts keyboard_protocol,r24
 561:tmk_core/protocol/lufa/lufa.c ****                 }
 640               		.loc 1 561 0
 641 0124 0C94 0000 		jmp clear_keyboard
 642               	.LVL44:
 643               	.L58:
 567:tmk_core/protocol/lufa/lufa.c ****             {
 644               		.loc 1 567 0
 645 0128 8091 0000 		lds r24,USB_ControlRequest
 646 012c 8132      		cpi r24,lo8(33)
 647 012e 01F4      		brne .L52
 648               	.LBB134:
 649               	.LBB135:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 650               		.loc 2 444 0
 651 0130 8091 E800 		lds r24,232
 652 0134 877F      		andi r24,lo8(-9)
 653 0136 8093 E800 		sts 232,r24
 654               	.LBE135:
 655               	.LBE134:
 570:tmk_core/protocol/lufa/lufa.c **** 
 656               		.loc 1 570 0
 657 013a 0E94 0000 		call Endpoint_ClearStatusStage
 658               	.LVL45:
 572:tmk_core/protocol/lufa/lufa.c ****             }
 659               		.loc 1 572 0
 660 013e 8091 0000 		lds r24,USB_ControlRequest+3
 661 0142 8093 0000 		sts keyboard_idle,r24
 662 0146 0895      		ret
 663               	.L57:
 577:tmk_core/protocol/lufa/lufa.c ****             {
 664               		.loc 1 577 0
 665 0148 8091 0000 		lds r24,USB_ControlRequest
 666 014c 813A      		cpi r24,lo8(-95)
 667 014e 01F4      		brne .L52
 668               	.LBB136:
 669               	.LBB137:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 670               		.loc 2 444 0
 671 0150 8091 E800 		lds r24,232
 672 0154 877F      		andi r24,lo8(-9)
 673 0156 8093 E800 		sts 232,r24
 674               	.L71:
 675               	.LBE137:
 676               	.LBE136:
 677               	.LBB138:
 678               	.LBB139:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 679               		.loc 2 407 0 discriminator 1
 680 015a 8091 E800 		lds r24,232
 681               	.LBE139:
 682               	.LBE138:
 580:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 683               		.loc 1 580 0 discriminator 1
 684 015e 80FF      		sbrs r24,0
 685 0160 00C0      		rjmp .L71
 581:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 686               		.loc 1 581 0
 687 0162 8091 0000 		lds r24,keyboard_idle
 688               	.L82:
 689               	.LVL46:
 690               	.LBB140:
 691               	.LBB141:
 543:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 692               		.loc 2 554 0
 693 0166 8093 F100 		sts 241,r24
 694               	.LBE141:
 695               	.LBE140:
 696               	.LBB142:
 697               	.LBB143:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 698               		.loc 2 456 0
 699 016a 8091 E800 		lds r24,232
 700               	.LVL47:
 701 016e 8E77      		andi r24,lo8(126)
 702               	.LVL48:
 703               	.L81:
 704 0170 8093 E800 		sts 232,r24
 705               	.LBE143:
 706               	.LBE142:
 583:tmk_core/protocol/lufa/lufa.c ****             }
 707               		.loc 1 583 0
 708 0174 0C94 0000 		jmp Endpoint_ClearStatusStage
 709               	.LVL49:
 710               	.L52:
 711 0178 0895      		ret
 712               		.cfi_endproc
 713               	.LFE127:
 715               		.section	.text.sendchar,"ax",@progbits
 716               	.global	sendchar
 718               	sendchar:
 719               	.LFB133:
 751:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 752:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 753:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 754:tmk_core/protocol/lufa/lufa.c **** 
 755:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 756:tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 757:tmk_core/protocol/lufa/lufa.c ****       #ifdef MODULE_ADAFRUIT_BLE
 758:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_consumer_key(data, 0);
 759:tmk_core/protocol/lufa/lufa.c ****       #elif MODULE_RN42
 760:tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 761:tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 762:tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 763:tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2RN42(data);
 764:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 765:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 766:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 767:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 768:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 769:tmk_core/protocol/lufa/lufa.c ****       #else
 770:tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 771:tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 772:tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 773:tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 774:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 775:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 776:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x02);
 777:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 778:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 779:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 780:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 781:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 782:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 783:tmk_core/protocol/lufa/lufa.c ****       #endif
 784:tmk_core/protocol/lufa/lufa.c ****     }
 785:tmk_core/protocol/lufa/lufa.c **** #endif
 786:tmk_core/protocol/lufa/lufa.c **** 
 787:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 788:tmk_core/protocol/lufa/lufa.c ****       return;
 789:tmk_core/protocol/lufa/lufa.c ****     }
 790:tmk_core/protocol/lufa/lufa.c **** 
 791:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 792:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 793:tmk_core/protocol/lufa/lufa.c ****         .usage = data
 794:tmk_core/protocol/lufa/lufa.c ****     };
 795:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 796:tmk_core/protocol/lufa/lufa.c **** 
 797:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 798:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 799:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 800:tmk_core/protocol/lufa/lufa.c **** 
 801:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 802:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 803:tmk_core/protocol/lufa/lufa.c **** #endif
 804:tmk_core/protocol/lufa/lufa.c **** }
 805:tmk_core/protocol/lufa/lufa.c **** 
 806:tmk_core/protocol/lufa/lufa.c **** 
 807:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 808:tmk_core/protocol/lufa/lufa.c ****  * sendchar
 809:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 810:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 811:tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 812:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Char
 813:tmk_core/protocol/lufa/lufa.c ****  *
 814:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 815:tmk_core/protocol/lufa/lufa.c ****  */
 816:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 817:tmk_core/protocol/lufa/lufa.c **** {
 818:tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 819:tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 820:tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 821:tmk_core/protocol/lufa/lufa.c **** 
 822:tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 823:tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 824:tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 825:tmk_core/protocol/lufa/lufa.c **** 
 826:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 827:tmk_core/protocol/lufa/lufa.c ****         return -1;
 828:tmk_core/protocol/lufa/lufa.c **** 
 829:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 830:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 831:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 832:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 833:tmk_core/protocol/lufa/lufa.c ****     }
 834:tmk_core/protocol/lufa/lufa.c **** 
 835:tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 836:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 837:tmk_core/protocol/lufa/lufa.c ****     }
 838:tmk_core/protocol/lufa/lufa.c **** 
 839:tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 840:tmk_core/protocol/lufa/lufa.c **** 
 841:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 842:tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 843:tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 844:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 845:tmk_core/protocol/lufa/lufa.c ****         }
 846:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 847:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 848:tmk_core/protocol/lufa/lufa.c ****         }
 849:tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 850:tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 851:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 852:tmk_core/protocol/lufa/lufa.c ****         }
 853:tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 854:tmk_core/protocol/lufa/lufa.c ****     }
 855:tmk_core/protocol/lufa/lufa.c **** 
 856:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 857:tmk_core/protocol/lufa/lufa.c **** 
 858:tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 859:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 860:tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 861:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 862:tmk_core/protocol/lufa/lufa.c ****     } else {
 863:tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 864:tmk_core/protocol/lufa/lufa.c ****     }
 865:tmk_core/protocol/lufa/lufa.c **** 
 866:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 867:tmk_core/protocol/lufa/lufa.c ****     return 0;
 868:tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 869:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 870:tmk_core/protocol/lufa/lufa.c ****     return -1;
 871:tmk_core/protocol/lufa/lufa.c **** }
 872:tmk_core/protocol/lufa/lufa.c **** #else
 873:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 874:tmk_core/protocol/lufa/lufa.c **** {
 720               		.loc 1 874 0
 721               		.cfi_startproc
 722               	.LVL50:
 723               	/* prologue: function */
 724               	/* frame size = 0 */
 725               	/* stack size = 0 */
 726               	.L__stack_usage = 0
 875:tmk_core/protocol/lufa/lufa.c ****     return 0;
 876:tmk_core/protocol/lufa/lufa.c **** }
 727               		.loc 1 876 0
 728 0000 80E0      		ldi r24,0
 729               	.LVL51:
 730 0002 0895      		ret
 731               		.cfi_endproc
 732               	.LFE133:
 734               		.section	.text.startup.main,"ax",@progbits
 735               		.weak	main
 737               	main:
 738               	.LFB136:
 877:tmk_core/protocol/lufa/lufa.c **** #endif
 878:tmk_core/protocol/lufa/lufa.c **** 
 879:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 880:tmk_core/protocol/lufa/lufa.c ****  * MIDI
 881:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 882:tmk_core/protocol/lufa/lufa.c **** 
 883:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 884:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 885:tmk_core/protocol/lufa/lufa.c **** {
 886:tmk_core/protocol/lufa/lufa.c ****   .Config =
 887:tmk_core/protocol/lufa/lufa.c ****   {
 888:tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 889:tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 890:tmk_core/protocol/lufa/lufa.c ****     {
 891:tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 892:tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 893:tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 894:tmk_core/protocol/lufa/lufa.c ****     },
 895:tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 896:tmk_core/protocol/lufa/lufa.c ****     {
 897:tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 898:tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 899:tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 900:tmk_core/protocol/lufa/lufa.c ****     },
 901:tmk_core/protocol/lufa/lufa.c ****   },
 902:tmk_core/protocol/lufa/lufa.c **** };
 903:tmk_core/protocol/lufa/lufa.c **** 
 904:tmk_core/protocol/lufa/lufa.c **** void send_midi_packet(MIDI_EventPacket_t* event) {
 905:tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, event);
 906:tmk_core/protocol/lufa/lufa.c **** }
 907:tmk_core/protocol/lufa/lufa.c **** 
 908:tmk_core/protocol/lufa/lufa.c **** bool recv_midi_packet(MIDI_EventPacket_t* const event) {
 909:tmk_core/protocol/lufa/lufa.c ****   return MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, event);
 910:tmk_core/protocol/lufa/lufa.c **** }
 911:tmk_core/protocol/lufa/lufa.c **** 
 912:tmk_core/protocol/lufa/lufa.c **** #endif
 913:tmk_core/protocol/lufa/lufa.c **** 
 914:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 915:tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
 916:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 917:tmk_core/protocol/lufa/lufa.c **** 
 918:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 919:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Init
 920:tmk_core/protocol/lufa/lufa.c ****  *
 921:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 922:tmk_core/protocol/lufa/lufa.c ****  */
 923:tmk_core/protocol/lufa/lufa.c **** void virtser_init(void)
 924:tmk_core/protocol/lufa/lufa.c **** {
 925:tmk_core/protocol/lufa/lufa.c ****   cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR ;
 926:tmk_core/protocol/lufa/lufa.c ****   CDC_Device_SendControlLineStateChange(&cdc_device);
 927:tmk_core/protocol/lufa/lufa.c **** }
 928:tmk_core/protocol/lufa/lufa.c **** 
 929:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Receive
 930:tmk_core/protocol/lufa/lufa.c ****  *
 931:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 932:tmk_core/protocol/lufa/lufa.c ****  */
 933:tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__ ((weak));
 934:tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c)
 935:tmk_core/protocol/lufa/lufa.c **** {
 936:tmk_core/protocol/lufa/lufa.c ****   // Ignore by default
 937:tmk_core/protocol/lufa/lufa.c **** }
 938:tmk_core/protocol/lufa/lufa.c **** 
 939:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Task
 940:tmk_core/protocol/lufa/lufa.c ****  *
 941:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 942:tmk_core/protocol/lufa/lufa.c ****  */
 943:tmk_core/protocol/lufa/lufa.c **** void virtser_task(void)
 944:tmk_core/protocol/lufa/lufa.c **** {
 945:tmk_core/protocol/lufa/lufa.c ****   uint16_t count = CDC_Device_BytesReceived(&cdc_device);
 946:tmk_core/protocol/lufa/lufa.c ****   uint8_t ch;
 947:tmk_core/protocol/lufa/lufa.c ****   if (count)
 948:tmk_core/protocol/lufa/lufa.c ****   {
 949:tmk_core/protocol/lufa/lufa.c ****     ch = CDC_Device_ReceiveByte(&cdc_device);
 950:tmk_core/protocol/lufa/lufa.c ****     virtser_recv(ch);
 951:tmk_core/protocol/lufa/lufa.c ****   }
 952:tmk_core/protocol/lufa/lufa.c **** }
 953:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Send
 954:tmk_core/protocol/lufa/lufa.c ****  *
 955:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 956:tmk_core/protocol/lufa/lufa.c ****  */
 957:tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte)
 958:tmk_core/protocol/lufa/lufa.c **** {
 959:tmk_core/protocol/lufa/lufa.c ****   uint8_t timeout = 255;
 960:tmk_core/protocol/lufa/lufa.c ****   uint8_t ep = Endpoint_GetCurrentEndpoint();
 961:tmk_core/protocol/lufa/lufa.c **** 
 962:tmk_core/protocol/lufa/lufa.c ****   if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR)
 963:tmk_core/protocol/lufa/lufa.c ****   {
 964:tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 965:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
 966:tmk_core/protocol/lufa/lufa.c **** 
 967:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 968:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 969:tmk_core/protocol/lufa/lufa.c ****         return;
 970:tmk_core/protocol/lufa/lufa.c ****     }
 971:tmk_core/protocol/lufa/lufa.c **** 
 972:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 973:tmk_core/protocol/lufa/lufa.c **** 
 974:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(byte);
 975:tmk_core/protocol/lufa/lufa.c ****     CDC_Device_Flush(&cdc_device);
 976:tmk_core/protocol/lufa/lufa.c **** 
 977:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 978:tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
 979:tmk_core/protocol/lufa/lufa.c ****     }
 980:tmk_core/protocol/lufa/lufa.c **** 
 981:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 982:tmk_core/protocol/lufa/lufa.c ****   }
 983:tmk_core/protocol/lufa/lufa.c **** }
 984:tmk_core/protocol/lufa/lufa.c **** #endif
 985:tmk_core/protocol/lufa/lufa.c **** 
 986:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 987:tmk_core/protocol/lufa/lufa.c ****  * main
 988:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 989:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup MCU
 990:tmk_core/protocol/lufa/lufa.c ****  *
 991:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 992:tmk_core/protocol/lufa/lufa.c ****  */
 993:tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 994:tmk_core/protocol/lufa/lufa.c **** {
 995:tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 996:tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 997:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 998:tmk_core/protocol/lufa/lufa.c **** 
 999:tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
1000:tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
1001:tmk_core/protocol/lufa/lufa.c **** 
1002:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
1003:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
1004:tmk_core/protocol/lufa/lufa.c **** }
1005:tmk_core/protocol/lufa/lufa.c **** 
1006:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup USB
1007:tmk_core/protocol/lufa/lufa.c ****  *
1008:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1009:tmk_core/protocol/lufa/lufa.c ****  */
1010:tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
1011:tmk_core/protocol/lufa/lufa.c **** {
1012:tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
1013:tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
1014:tmk_core/protocol/lufa/lufa.c **** 
1015:tmk_core/protocol/lufa/lufa.c ****     USB_Init();
1016:tmk_core/protocol/lufa/lufa.c **** 
1017:tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
1018:tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
1019:tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
1020:tmk_core/protocol/lufa/lufa.c **** }
1021:tmk_core/protocol/lufa/lufa.c **** 
1022:tmk_core/protocol/lufa/lufa.c **** /** \brief Main
1023:tmk_core/protocol/lufa/lufa.c ****  *
1024:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1025:tmk_core/protocol/lufa/lufa.c ****  */
1026:tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
1027:tmk_core/protocol/lufa/lufa.c **** int main(void)
1028:tmk_core/protocol/lufa/lufa.c **** {
 739               		.loc 1 1028 0
 740               		.cfi_startproc
 741               	/* prologue: function */
 742               	/* frame size = 0 */
 743               	/* stack size = 0 */
 744               	.L__stack_usage = 0
 745               	.LBB153:
 746               	.LBB154:
 996:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 747               		.loc 1 996 0
 748 0000 84B7      		in r24,0x34
 749 0002 877F      		andi r24,lo8(-9)
 750 0004 84BF      		out 0x34,r24
 751               	.LBB155:
 752               	.LBB156:
 753               		.file 5 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** 
 102:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 103:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** #else
 105:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 106:/usr/lib/avr/include/avr/wdt.h **** #endif
 107:/usr/lib/avr/include/avr/wdt.h **** 
 108:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 109:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 110:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 111:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 112:/usr/lib/avr/include/avr/wdt.h **** #else
 113:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 114:/usr/lib/avr/include/avr/wdt.h **** #endif
 115:/usr/lib/avr/include/avr/wdt.h **** 
 116:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 117:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 118:/usr/lib/avr/include/avr/wdt.h **** #else
 119:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 120:/usr/lib/avr/include/avr/wdt.h **** #endif
 121:/usr/lib/avr/include/avr/wdt.h **** 
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** /**
 124:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 125:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 126:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 127:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 128:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 129:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 130:/usr/lib/avr/include/avr/wdt.h **** 
 131:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 132:/usr/lib/avr/include/avr/wdt.h **** */
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h **** 
 135:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** /*
 138:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 139:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 140:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 141:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 142:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 143:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 144:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 145:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 146:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 147:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 148:/usr/lib/avr/include/avr/wdt.h **** */
 149:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 150:/usr/lib/avr/include/avr/wdt.h **** do { \
 151:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 152:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 153:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 155:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 156:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 157:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 158:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 159:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 160:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 161:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 162:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 163:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 164:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 165:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 166:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 167:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 168:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 169:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 170:/usr/lib/avr/include/avr/wdt.h **** ); \
 171:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 172:/usr/lib/avr/include/avr/wdt.h **** 
 173:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 174:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 175:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 176:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 177:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 178:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 179:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 180:/usr/lib/avr/include/avr/wdt.h ****     : \
 181:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 182:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 183:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 184:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 185:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 186:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 187:/usr/lib/avr/include/avr/wdt.h **** );
 188:/usr/lib/avr/include/avr/wdt.h **** 
 189:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 190:/usr/lib/avr/include/avr/wdt.h **** 
 191:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 192:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 193:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 194:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 195:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 196:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 197:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 198:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 199:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 200:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 201:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 202:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 203:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 204:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 205:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 206:/usr/lib/avr/include/avr/wdt.h **** )
 207:/usr/lib/avr/include/avr/wdt.h **** 
 208:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 209:/usr/lib/avr/include/avr/wdt.h **** do { \
 210:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 211:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 212:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 213:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 214:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 215:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 216:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 217:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 218:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 219:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 220:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 221:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 222:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 223:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 224:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 225:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 226:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 227:/usr/lib/avr/include/avr/wdt.h **** ); \
 228:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 229:/usr/lib/avr/include/avr/wdt.h **** 
 230:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 231:/usr/lib/avr/include/avr/wdt.h **** 
 232:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 233:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 234:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 235:/usr/lib/avr/include/avr/wdt.h **** {
 236:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 237:/usr/lib/avr/include/avr/wdt.h **** 	{
 238:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 239:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 240:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 241:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 242:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 243:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 244:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 245:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 246:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 247:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 248:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 249:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 250:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 251:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 252:/usr/lib/avr/include/avr/wdt.h **** 			);
 253:/usr/lib/avr/include/avr/wdt.h **** 	}
 254:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 255:/usr/lib/avr/include/avr/wdt.h **** 	{
 256:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 257:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 258:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 259:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 260:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 261:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 262:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 263:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 264:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 265:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 266:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 267:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 268:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 269:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 270:/usr/lib/avr/include/avr/wdt.h **** 			);
 271:/usr/lib/avr/include/avr/wdt.h **** 	}
 272:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 273:/usr/lib/avr/include/avr/wdt.h **** 	{
 274:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 275:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 276:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 277:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 278:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 279:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 280:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 281:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 282:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 283:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 284:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 285:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 286:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 287:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 288:/usr/lib/avr/include/avr/wdt.h **** 			);
 289:/usr/lib/avr/include/avr/wdt.h **** 	}
 290:/usr/lib/avr/include/avr/wdt.h **** 	else
 291:/usr/lib/avr/include/avr/wdt.h ****  	{
 292:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 293:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 294:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 295:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 296:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 297:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 298:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 299:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 300:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 301:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 302:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 303:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 304:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 305:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 306:/usr/lib/avr/include/avr/wdt.h **** 			);
 307:/usr/lib/avr/include/avr/wdt.h **** 	}
 308:/usr/lib/avr/include/avr/wdt.h **** }
 309:/usr/lib/avr/include/avr/wdt.h **** 
 310:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 311:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 312:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 313:/usr/lib/avr/include/avr/wdt.h **** {
 314:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 315:/usr/lib/avr/include/avr/wdt.h **** 	{
 316:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 317:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 318:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 319:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 320:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 321:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 322:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 323:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 327:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 328:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 329:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 330:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 331:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 332:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 333:/usr/lib/avr/include/avr/wdt.h **** 				);
 334:/usr/lib/avr/include/avr/wdt.h **** 	}
 335:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 336:/usr/lib/avr/include/avr/wdt.h **** 	{
 337:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 338:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 339:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 340:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 341:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 348:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 352:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 353:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 				);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 357:/usr/lib/avr/include/avr/wdt.h **** 	{
 358:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 359:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 360:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 361:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 362:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 363:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 364:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 365:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 366:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 369:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 370:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 371:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 372:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 373:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 374:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 375:/usr/lib/avr/include/avr/wdt.h **** 				);
 376:/usr/lib/avr/include/avr/wdt.h **** 	}
 377:/usr/lib/avr/include/avr/wdt.h **** 	else
 378:/usr/lib/avr/include/avr/wdt.h **** 	{
 379:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 380:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 381:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 382:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 383:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 384:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 385:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 386:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 387:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 390:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 391:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 392:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 393:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 394:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 395:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 396:/usr/lib/avr/include/avr/wdt.h **** 				);
 397:/usr/lib/avr/include/avr/wdt.h **** 	}
 398:/usr/lib/avr/include/avr/wdt.h **** }
 399:/usr/lib/avr/include/avr/wdt.h **** 
 400:/usr/lib/avr/include/avr/wdt.h **** #else
 401:/usr/lib/avr/include/avr/wdt.h **** 
 402:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 403:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 404:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 405:/usr/lib/avr/include/avr/wdt.h **** {
 406:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 407:/usr/lib/avr/include/avr/wdt.h **** 	{
 408:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 409:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 416:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 417:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 418:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 419:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 420:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 421:/usr/lib/avr/include/avr/wdt.h **** 		);
 422:/usr/lib/avr/include/avr/wdt.h **** 	}
 423:/usr/lib/avr/include/avr/wdt.h **** 	else
 424:/usr/lib/avr/include/avr/wdt.h **** 	{
 425:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 426:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 427:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 428:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 429:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 433:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 434:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 435:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 436:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 437:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 438:/usr/lib/avr/include/avr/wdt.h **** 		);
 439:/usr/lib/avr/include/avr/wdt.h **** 	}
 440:/usr/lib/avr/include/avr/wdt.h **** }
 441:/usr/lib/avr/include/avr/wdt.h **** 
 442:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 443:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 444:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 445:/usr/lib/avr/include/avr/wdt.h **** {
 446:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 447:/usr/lib/avr/include/avr/wdt.h **** 	{
 448:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 449:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 450:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 451:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 452:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 453:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 454:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 455:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 456:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 457:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 459:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 460:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 461:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 462:/usr/lib/avr/include/avr/wdt.h **** 		);
 463:/usr/lib/avr/include/avr/wdt.h **** 	}
 464:/usr/lib/avr/include/avr/wdt.h **** 	else
 465:/usr/lib/avr/include/avr/wdt.h **** 	{
 466:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 467:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 754               		.loc 5 467 0
 755               	/* #APP */
 756               	 ;  467 "/usr/lib/avr/include/avr/wdt.h" 1
 757 0006 0FB6      		in __tmp_reg__,__SREG__
 758 0008 F894      		cli
 759 000a A895      		wdr
 760 000c 8091 6000 		lds r24,96
 761 0010 8861      		ori r24,24
 762 0012 8093 6000 		sts 96,r24
 763 0016 1092 6000 		sts 96,__zero_reg__
 764 001a 0FBE      		out __SREG__,__tmp_reg__
 765               		
 766               	 ;  0 "" 2
 767               	.LVL52:
 768               	/* #NOAPP */
 769               	.LBE156:
 770               	.LBE155:
1002:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 771               		.loc 1 1002 0
 772 001c 80E8      		ldi r24,lo8(-128)
 773 001e 8093 6100 		sts 97,r24
1003:tmk_core/protocol/lufa/lufa.c **** }
 774               		.loc 1 1003 0
 775 0022 1092 6100 		sts 97,__zero_reg__
 776               	.LBE154:
 777               	.LBE153:
1029:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1030:tmk_core/protocol/lufa/lufa.c ****     setup_midi();
1031:tmk_core/protocol/lufa/lufa.c **** #endif
1032:tmk_core/protocol/lufa/lufa.c **** 
1033:tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
1034:tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 778               		.loc 1 1034 0
 779 0026 0E94 0000 		call keyboard_setup
 780               	.LVL53:
 781               	.LBB157:
 782               	.LBB158:
1013:tmk_core/protocol/lufa/lufa.c **** 
 783               		.loc 1 1013 0
 784 002a 0E94 0000 		call USB_Disable
 785               	.LVL54:
1015:tmk_core/protocol/lufa/lufa.c **** 
 786               		.loc 1 1015 0
 787 002e 0E94 0000 		call USB_Init
 788               	.LVL55:
 789               	.LBB159:
 790               	.LBB160:
 791               	.LBB161:
 792               		.loc 4 113 0
 793 0032 8091 E200 		lds r24,226
 794 0036 8460      		ori r24,lo8(4)
 795 0038 8093 E200 		sts 226,r24
 796               	.LBE161:
 797               	.LBE160:
 798               	.LBE159:
 799               	.LBE158:
 800               	.LBE157:
1035:tmk_core/protocol/lufa/lufa.c ****     setup_usb();
1036:tmk_core/protocol/lufa/lufa.c ****     sei();
 801               		.loc 1 1036 0
 802               	/* #APP */
 803               	 ;  1036 "tmk_core/protocol/lufa/lufa.c" 1
 804 003c 7894      		sei
 805               	 ;  0 "" 2
1037:tmk_core/protocol/lufa/lufa.c **** 
1038:tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
1039:tmk_core/protocol/lufa/lufa.c ****     serial_init();
1040:tmk_core/protocol/lufa/lufa.c **** #endif
1041:tmk_core/protocol/lufa/lufa.c **** 
1042:tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
1043:tmk_core/protocol/lufa/lufa.c **** 
1044:tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
1045:tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
1046:tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
1047:tmk_core/protocol/lufa/lufa.c ****             ;
1048:tmk_core/protocol/lufa/lufa.c ****     #else
1049:tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
1050:tmk_core/protocol/lufa/lufa.c ****     #endif
1051:tmk_core/protocol/lufa/lufa.c ****     }
1052:tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
1053:tmk_core/protocol/lufa/lufa.c **** #else
1054:tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 806               		.loc 1 1054 0
 807               	/* #NOAPP */
 808 003e 0E94 0000 		call USB_USBTask
 809               	.LVL56:
1055:tmk_core/protocol/lufa/lufa.c **** #endif
1056:tmk_core/protocol/lufa/lufa.c ****     /* init modules */
1057:tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 810               		.loc 1 1057 0
 811 0042 0E94 0000 		call keyboard_init
 812               	.LVL57:
1058:tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 813               		.loc 1 1058 0
 814 0046 80E0      		ldi r24,lo8(lufa_driver)
 815 0048 90E0      		ldi r25,hi8(lufa_driver)
 816 004a 0E94 0000 		call host_set_driver
 817               	.LVL58:
 818               	.L87:
1059:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
1060:tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
1061:tmk_core/protocol/lufa/lufa.c **** #endif
1062:tmk_core/protocol/lufa/lufa.c **** 
1063:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1064:tmk_core/protocol/lufa/lufa.c ****     virtser_init();
1065:tmk_core/protocol/lufa/lufa.c **** #endif
1066:tmk_core/protocol/lufa/lufa.c **** 
1067:tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
1068:tmk_core/protocol/lufa/lufa.c ****     while (1) {
1069:tmk_core/protocol/lufa/lufa.c ****         #if !defined(NO_USB_STARTUP_CHECK)
1070:tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 819               		.loc 1 1070 0
 820 004e 8091 0000 		lds r24,USB_DeviceState
 821 0052 8530      		cpi r24,lo8(5)
 822 0054 01F4      		brne .L95
1071:tmk_core/protocol/lufa/lufa.c ****             print("[s]");
1072:tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
 823               		.loc 1 1072 0
 824 0056 0E94 0000 		call suspend_power_down
 825               	.LVL59:
1073:tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 826               		.loc 1 1073 0
 827 005a 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 828 005e 8823      		tst r24
 829 0060 01F0      		breq .L87
 830               		.loc 1 1073 0 is_stmt 0 discriminator 1
 831 0062 0E94 0000 		call suspend_wakeup_condition
 832               	.LVL60:
 833 0066 8823      		tst r24
 834 0068 01F0      		breq .L87
1074:tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 835               		.loc 1 1074 0 is_stmt 1
 836 006a 0E94 0000 		call USB_Device_SendRemoteWakeup
 837               	.LVL61:
 838 006e 00C0      		rjmp .L87
 839               	.L95:
1075:tmk_core/protocol/lufa/lufa.c ****             }
1076:tmk_core/protocol/lufa/lufa.c ****         }
1077:tmk_core/protocol/lufa/lufa.c ****         #endif
1078:tmk_core/protocol/lufa/lufa.c **** 
1079:tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 840               		.loc 1 1079 0
 841 0070 0E94 0000 		call keyboard_task
 842               	.LVL62:
1080:tmk_core/protocol/lufa/lufa.c **** 
1081:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1082:tmk_core/protocol/lufa/lufa.c ****         MIDI_Device_USBTask(&USB_MIDI_Interface);
1083:tmk_core/protocol/lufa/lufa.c **** #endif
1084:tmk_core/protocol/lufa/lufa.c **** 
1085:tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
1086:tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
1087:tmk_core/protocol/lufa/lufa.c **** #endif
1088:tmk_core/protocol/lufa/lufa.c **** 
1089:tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1090:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1091:tmk_core/protocol/lufa/lufa.c **** #endif
1092:tmk_core/protocol/lufa/lufa.c **** 
1093:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1094:tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1095:tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1096:tmk_core/protocol/lufa/lufa.c **** #endif
1097:tmk_core/protocol/lufa/lufa.c **** 
1098:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1099:tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1100:tmk_core/protocol/lufa/lufa.c **** #endif
1101:tmk_core/protocol/lufa/lufa.c **** 
1102:tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1103:tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1104:tmk_core/protocol/lufa/lufa.c **** #endif
1105:tmk_core/protocol/lufa/lufa.c **** 
1106:tmk_core/protocol/lufa/lufa.c ****     }
 843               		.loc 1 1106 0
 844 0074 00C0      		rjmp .L87
 845               		.cfi_endproc
 846               	.LFE136:
 848               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
 849               	.global	CALLBACK_USB_GetDescriptor
 851               	CALLBACK_USB_GetDescriptor:
 852               	.LFB137:
1107:tmk_core/protocol/lufa/lufa.c **** }
1108:tmk_core/protocol/lufa/lufa.c **** 
1109:tmk_core/protocol/lufa/lufa.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
1110:tmk_core/protocol/lufa/lufa.c ****                                     const uint16_t wIndex,
1111:tmk_core/protocol/lufa/lufa.c ****                                     const void** const DescriptorAddress)
1112:tmk_core/protocol/lufa/lufa.c **** {
 853               		.loc 1 1112 0
 854               		.cfi_startproc
 855               	.LVL63:
 856               	/* prologue: function */
 857               	/* frame size = 0 */
 858               	/* stack size = 0 */
 859               	.L__stack_usage = 0
1113:tmk_core/protocol/lufa/lufa.c ****   return get_usb_descriptor(wValue, wIndex, DescriptorAddress);
 860               		.loc 1 1113 0
 861 0000 0C94 0000 		jmp get_usb_descriptor
 862               	.LVL64:
 863               		.cfi_endproc
 864               	.LFE137:
 866               	.global	lufa_driver
 867               		.section	.data.lufa_driver,"aw",@progbits
 870               	lufa_driver:
 871 0000 0000      		.word	gs(keyboard_leds)
 872 0002 0000      		.word	gs(send_keyboard)
 873 0004 0000      		.word	gs(send_mouse)
 874 0006 0000      		.word	gs(send_system)
 875 0008 0000      		.word	gs(send_consumer)
 876               		.section	.bss.keyboard_report_sent,"aw",@nobits
 879               	keyboard_report_sent:
 880 0000 0000 0000 		.zero	8
 880      0000 0000 
 881               		.section	.bss.keyboard_led_stats,"aw",@nobits
 884               	keyboard_led_stats:
 885 0000 00        		.zero	1
 886               	.global	keyboard_protocol
 887               		.section	.data.keyboard_protocol,"aw",@progbits
 890               	keyboard_protocol:
 891 0000 01        		.byte	1
 892               	.global	keyboard_idle
 893               		.section	.bss.keyboard_idle,"aw",@nobits
 896               	keyboard_idle:
 897 0000 00        		.zero	1
 898               		.text
 899               	.Letext0:
 900               		.file 6 "/usr/lib/avr/include/stdint.h"
 901               		.file 7 "tmk_core/common/report.h"
 902               		.file 8 "tmk_core/common/host_driver.h"
 903               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 904               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 905               		.file 11 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 906               		.file 12 "tmk_core/protocol/usb_descriptor.h"
 907               		.file 13 "tmk_core/protocol/lufa/outputselect.h"
 908               		.file 14 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 909               		.file 15 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 910               		.file 16 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 911               		.file 17 "tmk_core/common/action_util.h"
 912               		.file 18 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 913               		.file 19 "tmk_core/common/suspend.h"
 914               		.file 20 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 915               		.file 21 "tmk_core/common/action.h"
 916               		.file 22 "tmk_core/common/keyboard.h"
 917               		.file 23 "tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
     /tmp/ccOXmBgd.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccOXmBgd.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccOXmBgd.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccOXmBgd.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccOXmBgd.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccOXmBgd.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
     /tmp/ccOXmBgd.s:884    .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
     /tmp/ccOXmBgd.s:29     .text.send_system:0000000000000000 send_system
     /tmp/ccOXmBgd.s:44     .text.send_consumer:0000000000000000 send_consumer
     /tmp/ccOXmBgd.s:59     .text.send_mouse:0000000000000000 send_mouse
     /tmp/ccOXmBgd.s:169    .text.send_keyboard:0000000000000000 send_keyboard
     /tmp/ccOXmBgd.s:879    .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
     /tmp/ccOXmBgd.s:288    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/ccOXmBgd.s:326    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/ccOXmBgd.s:343    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
     /tmp/ccOXmBgd.s:358    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
     /tmp/ccOXmBgd.s:373    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
     /tmp/ccOXmBgd.s:390    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccOXmBgd.s:424    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccOXmBgd.s:890    .data.keyboard_protocol:0000000000000000 keyboard_protocol
     /tmp/ccOXmBgd.s:896    .bss.keyboard_idle:0000000000000000 keyboard_idle
     /tmp/ccOXmBgd.s:718    .text.sendchar:0000000000000000 sendchar
     /tmp/ccOXmBgd.s:737    .text.startup.main:0000000000000000 main
     /tmp/ccOXmBgd.s:870    .data.lufa_driver:0000000000000000 lufa_driver
     /tmp/ccOXmBgd.s:851    .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor

UNDEFINED SYMBOLS
where_to_send
Endpoint_Write_Stream_LE
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
USB_DeviceState
Endpoint_ClearStatusStage
clear_keyboard
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
get_usb_descriptor
__do_copy_data
__do_clear_bss
