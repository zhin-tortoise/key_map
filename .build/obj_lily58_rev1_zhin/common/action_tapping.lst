   1               		.file	"action_tapping.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.debug_waiting_buffer,"ax",@progbits
  12               	debug_waiting_buffer:
  13               	.LFB12:
  14               		.file 1 "tmk_core/common/action_tapping.c"
   1:tmk_core/common/action_tapping.c **** #include <stdint.h>
   2:tmk_core/common/action_tapping.c **** #include <stdbool.h>
   3:tmk_core/common/action_tapping.c **** #include "action.h"
   4:tmk_core/common/action_tapping.c **** #include "action_layer.h"
   5:tmk_core/common/action_tapping.c **** #include "action_tapping.h"
   6:tmk_core/common/action_tapping.c **** #include "keycode.h"
   7:tmk_core/common/action_tapping.c **** #include "timer.h"
   8:tmk_core/common/action_tapping.c **** 
   9:tmk_core/common/action_tapping.c **** #ifdef DEBUG_ACTION
  10:tmk_core/common/action_tapping.c **** #include "debug.h"
  11:tmk_core/common/action_tapping.c **** #else
  12:tmk_core/common/action_tapping.c **** #include "nodebug.h"
  13:tmk_core/common/action_tapping.c **** #endif
  14:tmk_core/common/action_tapping.c **** 
  15:tmk_core/common/action_tapping.c **** #ifndef NO_ACTION_TAPPING
  16:tmk_core/common/action_tapping.c **** 
  17:tmk_core/common/action_tapping.c **** #define IS_TAPPING()            !IS_NOEVENT(tapping_key.event)
  18:tmk_core/common/action_tapping.c **** #define IS_TAPPING_PRESSED()    (IS_TAPPING() && tapping_key.event.pressed)
  19:tmk_core/common/action_tapping.c **** #define IS_TAPPING_RELEASED()   (IS_TAPPING() && !tapping_key.event.pressed)
  20:tmk_core/common/action_tapping.c **** #define IS_TAPPING_KEY(k)       (IS_TAPPING() && KEYEQ(tapping_key.event.key, (k)))
  21:tmk_core/common/action_tapping.c **** #define WITHIN_TAPPING_TERM(e)  (TIMER_DIFF_16(e.time, tapping_key.event.time) < TAPPING_TERM)
  22:tmk_core/common/action_tapping.c **** 
  23:tmk_core/common/action_tapping.c **** 
  24:tmk_core/common/action_tapping.c **** static keyrecord_t tapping_key = {};
  25:tmk_core/common/action_tapping.c **** static keyrecord_t waiting_buffer[WAITING_BUFFER_SIZE] = {};
  26:tmk_core/common/action_tapping.c **** static uint8_t waiting_buffer_head = 0;
  27:tmk_core/common/action_tapping.c **** static uint8_t waiting_buffer_tail = 0;
  28:tmk_core/common/action_tapping.c **** 
  29:tmk_core/common/action_tapping.c **** static bool process_tapping(keyrecord_t *record);
  30:tmk_core/common/action_tapping.c **** static bool waiting_buffer_enq(keyrecord_t record);
  31:tmk_core/common/action_tapping.c **** static void waiting_buffer_clear(void);
  32:tmk_core/common/action_tapping.c **** static bool waiting_buffer_typed(keyevent_t event);
  33:tmk_core/common/action_tapping.c **** static bool waiting_buffer_has_anykey_pressed(void);
  34:tmk_core/common/action_tapping.c **** static void waiting_buffer_scan_tap(void);
  35:tmk_core/common/action_tapping.c **** static void debug_tapping_key(void);
  36:tmk_core/common/action_tapping.c **** static void debug_waiting_buffer(void);
  37:tmk_core/common/action_tapping.c **** 
  38:tmk_core/common/action_tapping.c **** 
  39:tmk_core/common/action_tapping.c **** /** \brief Action Tapping Process
  40:tmk_core/common/action_tapping.c ****  *
  41:tmk_core/common/action_tapping.c ****  * FIXME: Needs doc
  42:tmk_core/common/action_tapping.c ****  */
  43:tmk_core/common/action_tapping.c **** void action_tapping_process(keyrecord_t record)
  44:tmk_core/common/action_tapping.c **** {
  45:tmk_core/common/action_tapping.c ****     if (process_tapping(&record)) {
  46:tmk_core/common/action_tapping.c ****         if (!IS_NOEVENT(record.event)) {
  47:tmk_core/common/action_tapping.c ****             debug("processed: "); debug_record(record); debug("\n");
  48:tmk_core/common/action_tapping.c ****         }
  49:tmk_core/common/action_tapping.c ****     } else {
  50:tmk_core/common/action_tapping.c ****         if (!waiting_buffer_enq(record)) {
  51:tmk_core/common/action_tapping.c ****             // clear all in case of overflow.
  52:tmk_core/common/action_tapping.c ****             debug("OVERFLOW: CLEAR ALL STATES\n");
  53:tmk_core/common/action_tapping.c ****             clear_keyboard();
  54:tmk_core/common/action_tapping.c ****             waiting_buffer_clear();
  55:tmk_core/common/action_tapping.c ****             tapping_key = (keyrecord_t){};
  56:tmk_core/common/action_tapping.c ****         }
  57:tmk_core/common/action_tapping.c ****     }
  58:tmk_core/common/action_tapping.c **** 
  59:tmk_core/common/action_tapping.c ****     // process waiting_buffer
  60:tmk_core/common/action_tapping.c ****     if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
  61:tmk_core/common/action_tapping.c ****         debug("---- action_exec: process waiting_buffer -----\n");
  62:tmk_core/common/action_tapping.c ****     }
  63:tmk_core/common/action_tapping.c ****     for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail +
  64:tmk_core/common/action_tapping.c ****         if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
  65:tmk_core/common/action_tapping.c ****             debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
  66:tmk_core/common/action_tapping.c ****             debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
  67:tmk_core/common/action_tapping.c ****         } else {
  68:tmk_core/common/action_tapping.c ****             break;
  69:tmk_core/common/action_tapping.c ****         }
  70:tmk_core/common/action_tapping.c ****     }
  71:tmk_core/common/action_tapping.c ****     if (!IS_NOEVENT(record.event)) {
  72:tmk_core/common/action_tapping.c ****         debug("\n");
  73:tmk_core/common/action_tapping.c ****     }
  74:tmk_core/common/action_tapping.c **** }
  75:tmk_core/common/action_tapping.c **** 
  76:tmk_core/common/action_tapping.c **** 
  77:tmk_core/common/action_tapping.c **** /** \brief Tapping
  78:tmk_core/common/action_tapping.c ****  *
  79:tmk_core/common/action_tapping.c ****  * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
  80:tmk_core/common/action_tapping.c ****  *       (without interfering by typing other key)
  81:tmk_core/common/action_tapping.c ****  */
  82:tmk_core/common/action_tapping.c **** /* return true when key event is processed or consumed. */
  83:tmk_core/common/action_tapping.c **** bool process_tapping(keyrecord_t *keyp)
  84:tmk_core/common/action_tapping.c **** {
  85:tmk_core/common/action_tapping.c ****     keyevent_t event = keyp->event;
  86:tmk_core/common/action_tapping.c **** 
  87:tmk_core/common/action_tapping.c ****     // if tapping
  88:tmk_core/common/action_tapping.c ****     if (IS_TAPPING_PRESSED()) {
  89:tmk_core/common/action_tapping.c ****         if (WITHIN_TAPPING_TERM(event)) {
  90:tmk_core/common/action_tapping.c ****             if (tapping_key.tap.count == 0) {
  91:tmk_core/common/action_tapping.c ****                 if (IS_TAPPING_KEY(event.key) && !event.pressed) {
  92:tmk_core/common/action_tapping.c ****                     // first tap!
  93:tmk_core/common/action_tapping.c ****                     debug("Tapping: First tap(0->1).\n");
  94:tmk_core/common/action_tapping.c ****                     tapping_key.tap.count = 1;
  95:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
  96:tmk_core/common/action_tapping.c ****                     process_record(&tapping_key);
  97:tmk_core/common/action_tapping.c **** 
  98:tmk_core/common/action_tapping.c ****                     // copy tapping state
  99:tmk_core/common/action_tapping.c ****                     keyp->tap = tapping_key.tap;
 100:tmk_core/common/action_tapping.c ****                     // enqueue
 101:tmk_core/common/action_tapping.c ****                     return false;
 102:tmk_core/common/action_tapping.c ****                 }
 103:tmk_core/common/action_tapping.c **** #if TAPPING_TERM >= 500 || defined PERMISSIVE_HOLD
 104:tmk_core/common/action_tapping.c ****                 /* Process a key typed within TAPPING_TERM
 105:tmk_core/common/action_tapping.c ****                  * This can register the key before settlement of tapping,
 106:tmk_core/common/action_tapping.c ****                  * useful for long TAPPING_TERM but may prevent fast typing.
 107:tmk_core/common/action_tapping.c ****                  */
 108:tmk_core/common/action_tapping.c ****                 else if (IS_RELEASED(event) && waiting_buffer_typed(event)) {
 109:tmk_core/common/action_tapping.c ****                     debug("Tapping: End. No tap. Interfered by typing key\n");
 110:tmk_core/common/action_tapping.c ****                     process_record(&tapping_key);
 111:tmk_core/common/action_tapping.c ****                     tapping_key = (keyrecord_t){};
 112:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 113:tmk_core/common/action_tapping.c ****                     // enqueue
 114:tmk_core/common/action_tapping.c ****                     return false;
 115:tmk_core/common/action_tapping.c ****                 }
 116:tmk_core/common/action_tapping.c **** #endif
 117:tmk_core/common/action_tapping.c ****                 /* Process release event of a key pressed before tapping starts
 118:tmk_core/common/action_tapping.c ****                  * Without this unexpected repeating will occur with having fast repeating setting
 119:tmk_core/common/action_tapping.c ****                  * https://github.com/tmk/tmk_keyboard/issues/60
 120:tmk_core/common/action_tapping.c ****                  */
 121:tmk_core/common/action_tapping.c ****                 else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
 122:tmk_core/common/action_tapping.c ****                     // Modifier should be retained till end of this tapping.
 123:tmk_core/common/action_tapping.c ****                     action_t action = layer_switch_get_action(event.key);
 124:tmk_core/common/action_tapping.c ****                     switch (action.kind.id) {
 125:tmk_core/common/action_tapping.c ****                         case ACT_LMODS:
 126:tmk_core/common/action_tapping.c ****                         case ACT_RMODS:
 127:tmk_core/common/action_tapping.c ****                             if (action.key.mods && !action.key.code) return false;
 128:tmk_core/common/action_tapping.c ****                             if (IS_MOD(action.key.code)) return false;
 129:tmk_core/common/action_tapping.c ****                             break;
 130:tmk_core/common/action_tapping.c ****                         case ACT_LMODS_TAP:
 131:tmk_core/common/action_tapping.c ****                         case ACT_RMODS_TAP:
 132:tmk_core/common/action_tapping.c ****                             if (action.key.mods && keyp->tap.count == 0) return false;
 133:tmk_core/common/action_tapping.c ****                             if (IS_MOD(action.key.code)) return false;
 134:tmk_core/common/action_tapping.c ****                             break;
 135:tmk_core/common/action_tapping.c ****                     }
 136:tmk_core/common/action_tapping.c ****                     // Release of key should be process immediately.
 137:tmk_core/common/action_tapping.c ****                     debug("Tapping: release event of a key pressed before tapping\n");
 138:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 139:tmk_core/common/action_tapping.c ****                     return true;
 140:tmk_core/common/action_tapping.c ****                 }
 141:tmk_core/common/action_tapping.c ****                 else {
 142:tmk_core/common/action_tapping.c ****                     // set interrupted flag when other key preesed during tapping
 143:tmk_core/common/action_tapping.c ****                     if (event.pressed) {
 144:tmk_core/common/action_tapping.c ****                         tapping_key.tap.interrupted = true;
 145:tmk_core/common/action_tapping.c ****                     }
 146:tmk_core/common/action_tapping.c ****                     // enqueue
 147:tmk_core/common/action_tapping.c ****                     return false;
 148:tmk_core/common/action_tapping.c ****                 }
 149:tmk_core/common/action_tapping.c ****             }
 150:tmk_core/common/action_tapping.c ****             // tap_count > 0
 151:tmk_core/common/action_tapping.c ****             else {
 152:tmk_core/common/action_tapping.c ****                 if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 153:tmk_core/common/action_tapping.c ****                     debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
 154:tmk_core/common/action_tapping.c ****                     keyp->tap = tapping_key.tap;
 155:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 156:tmk_core/common/action_tapping.c ****                     tapping_key = *keyp;
 157:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 158:tmk_core/common/action_tapping.c ****                     return true;
 159:tmk_core/common/action_tapping.c ****                 }
 160:tmk_core/common/action_tapping.c ****                 else if (is_tap_key(event.key) && event.pressed) {
 161:tmk_core/common/action_tapping.c ****                     if (tapping_key.tap.count > 1) {
 162:tmk_core/common/action_tapping.c ****                         debug("Tapping: Start new tap with releasing last tap(>1).\n");
 163:tmk_core/common/action_tapping.c ****                         // unregister key
 164:tmk_core/common/action_tapping.c ****                         process_record(&(keyrecord_t){
 165:tmk_core/common/action_tapping.c ****                                 .tap = tapping_key.tap,
 166:tmk_core/common/action_tapping.c ****                                 .event.key = tapping_key.event.key,
 167:tmk_core/common/action_tapping.c ****                                 .event.time = event.time,
 168:tmk_core/common/action_tapping.c ****                                 .event.pressed = false
 169:tmk_core/common/action_tapping.c ****                         });
 170:tmk_core/common/action_tapping.c ****                     } else {
 171:tmk_core/common/action_tapping.c ****                         debug("Tapping: Start while last tap(1).\n");
 172:tmk_core/common/action_tapping.c ****                     }
 173:tmk_core/common/action_tapping.c ****                     tapping_key = *keyp;
 174:tmk_core/common/action_tapping.c ****                     waiting_buffer_scan_tap();
 175:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 176:tmk_core/common/action_tapping.c ****                     return true;
 177:tmk_core/common/action_tapping.c ****                 }
 178:tmk_core/common/action_tapping.c ****                 else {
 179:tmk_core/common/action_tapping.c ****                     if (!IS_NOEVENT(event)) {
 180:tmk_core/common/action_tapping.c ****                         debug("Tapping: key event while last tap(>0).\n");
 181:tmk_core/common/action_tapping.c ****                     }
 182:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 183:tmk_core/common/action_tapping.c ****                     return true;
 184:tmk_core/common/action_tapping.c ****                 }
 185:tmk_core/common/action_tapping.c ****             }
 186:tmk_core/common/action_tapping.c ****         }
 187:tmk_core/common/action_tapping.c ****         // after TAPPING_TERM
 188:tmk_core/common/action_tapping.c ****         else {
 189:tmk_core/common/action_tapping.c ****             if (tapping_key.tap.count == 0) {
 190:tmk_core/common/action_tapping.c ****                 debug("Tapping: End. Timeout. Not tap(0): ");
 191:tmk_core/common/action_tapping.c ****                 debug_event(event); debug("\n");
 192:tmk_core/common/action_tapping.c ****                 process_record(&tapping_key);
 193:tmk_core/common/action_tapping.c ****                 tapping_key = (keyrecord_t){};
 194:tmk_core/common/action_tapping.c ****                 debug_tapping_key();
 195:tmk_core/common/action_tapping.c ****                 return false;
 196:tmk_core/common/action_tapping.c ****             }  else {
 197:tmk_core/common/action_tapping.c ****                 if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 198:tmk_core/common/action_tapping.c ****                     debug("Tapping: End. last timeout tap release(>0).");
 199:tmk_core/common/action_tapping.c ****                     keyp->tap = tapping_key.tap;
 200:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 201:tmk_core/common/action_tapping.c ****                     tapping_key = (keyrecord_t){};
 202:tmk_core/common/action_tapping.c ****                     return true;
 203:tmk_core/common/action_tapping.c ****                 }
 204:tmk_core/common/action_tapping.c ****                 else if (is_tap_key(event.key) && event.pressed) {
 205:tmk_core/common/action_tapping.c ****                     if (tapping_key.tap.count > 1) {
 206:tmk_core/common/action_tapping.c ****                         debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
 207:tmk_core/common/action_tapping.c ****                         // unregister key
 208:tmk_core/common/action_tapping.c ****                         process_record(&(keyrecord_t){
 209:tmk_core/common/action_tapping.c ****                                 .tap = tapping_key.tap,
 210:tmk_core/common/action_tapping.c ****                                 .event.key = tapping_key.event.key,
 211:tmk_core/common/action_tapping.c ****                                 .event.time = event.time,
 212:tmk_core/common/action_tapping.c ****                                 .event.pressed = false
 213:tmk_core/common/action_tapping.c ****                         });
 214:tmk_core/common/action_tapping.c ****                     } else {
 215:tmk_core/common/action_tapping.c ****                         debug("Tapping: Start while last timeout tap(1).\n");
 216:tmk_core/common/action_tapping.c ****                     }
 217:tmk_core/common/action_tapping.c ****                     tapping_key = *keyp;
 218:tmk_core/common/action_tapping.c ****                     waiting_buffer_scan_tap();
 219:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 220:tmk_core/common/action_tapping.c ****                     return true;
 221:tmk_core/common/action_tapping.c ****                 }
 222:tmk_core/common/action_tapping.c ****                 else {
 223:tmk_core/common/action_tapping.c ****                     if (!IS_NOEVENT(event)) {
 224:tmk_core/common/action_tapping.c ****                         debug("Tapping: key event while last timeout tap(>0).\n");
 225:tmk_core/common/action_tapping.c ****                     }
 226:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 227:tmk_core/common/action_tapping.c ****                     return true;
 228:tmk_core/common/action_tapping.c ****                 }
 229:tmk_core/common/action_tapping.c ****             }
 230:tmk_core/common/action_tapping.c ****         }
 231:tmk_core/common/action_tapping.c ****     } else if (IS_TAPPING_RELEASED()) {
 232:tmk_core/common/action_tapping.c ****         if (WITHIN_TAPPING_TERM(event)) {
 233:tmk_core/common/action_tapping.c ****             if (event.pressed) {
 234:tmk_core/common/action_tapping.c ****                 if (IS_TAPPING_KEY(event.key)) {
 235:tmk_core/common/action_tapping.c **** #ifndef TAPPING_FORCE_HOLD
 236:tmk_core/common/action_tapping.c ****                     if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
 237:tmk_core/common/action_tapping.c ****                         // sequential tap.
 238:tmk_core/common/action_tapping.c ****                         keyp->tap = tapping_key.tap;
 239:tmk_core/common/action_tapping.c ****                         if (keyp->tap.count < 15) keyp->tap.count += 1;
 240:tmk_core/common/action_tapping.c ****                         debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
 241:tmk_core/common/action_tapping.c ****                         process_record(keyp);
 242:tmk_core/common/action_tapping.c ****                         tapping_key = *keyp;
 243:tmk_core/common/action_tapping.c ****                         debug_tapping_key();
 244:tmk_core/common/action_tapping.c ****                         return true;
 245:tmk_core/common/action_tapping.c ****                     }
 246:tmk_core/common/action_tapping.c **** #endif
 247:tmk_core/common/action_tapping.c ****                     // FIX: start new tap again
 248:tmk_core/common/action_tapping.c ****                     tapping_key = *keyp;
 249:tmk_core/common/action_tapping.c ****                     return true;
 250:tmk_core/common/action_tapping.c ****                 } else if (is_tap_key(event.key)) {
 251:tmk_core/common/action_tapping.c ****                     // Sequential tap can be interfered with other tap key.
 252:tmk_core/common/action_tapping.c ****                     debug("Tapping: Start with interfering other tap.\n");
 253:tmk_core/common/action_tapping.c ****                     tapping_key = *keyp;
 254:tmk_core/common/action_tapping.c ****                     waiting_buffer_scan_tap();
 255:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 256:tmk_core/common/action_tapping.c ****                     return true;
 257:tmk_core/common/action_tapping.c ****                 } else {
 258:tmk_core/common/action_tapping.c ****                     // should none in buffer
 259:tmk_core/common/action_tapping.c ****                     // FIX: interrupted when other key is pressed
 260:tmk_core/common/action_tapping.c ****                     tapping_key.tap.interrupted = true;
 261:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 262:tmk_core/common/action_tapping.c ****                     return true;
 263:tmk_core/common/action_tapping.c ****                 }
 264:tmk_core/common/action_tapping.c ****             } else {
 265:tmk_core/common/action_tapping.c ****                 if (!IS_NOEVENT(event)) debug("Tapping: other key just after tap.\n");
 266:tmk_core/common/action_tapping.c ****                 process_record(keyp);
 267:tmk_core/common/action_tapping.c ****                 return true;
 268:tmk_core/common/action_tapping.c ****             }
 269:tmk_core/common/action_tapping.c ****         } else {
 270:tmk_core/common/action_tapping.c ****             // FIX: process_action here?
 271:tmk_core/common/action_tapping.c ****             // timeout. no sequential tap.
 272:tmk_core/common/action_tapping.c ****             debug("Tapping: End(Timeout after releasing last tap): ");
 273:tmk_core/common/action_tapping.c ****             debug_event(event); debug("\n");
 274:tmk_core/common/action_tapping.c ****             tapping_key = (keyrecord_t){};
 275:tmk_core/common/action_tapping.c ****             debug_tapping_key();
 276:tmk_core/common/action_tapping.c ****             return false;
 277:tmk_core/common/action_tapping.c ****         }
 278:tmk_core/common/action_tapping.c ****     }
 279:tmk_core/common/action_tapping.c ****     // not tapping state
 280:tmk_core/common/action_tapping.c ****     else {
 281:tmk_core/common/action_tapping.c ****         if (event.pressed && is_tap_key(event.key)) {
 282:tmk_core/common/action_tapping.c ****             debug("Tapping: Start(Press tap key).\n");
 283:tmk_core/common/action_tapping.c ****             tapping_key = *keyp;
 284:tmk_core/common/action_tapping.c ****             process_record_tap_hint(&tapping_key);
 285:tmk_core/common/action_tapping.c ****             waiting_buffer_scan_tap();
 286:tmk_core/common/action_tapping.c ****             debug_tapping_key();
 287:tmk_core/common/action_tapping.c ****             return true;
 288:tmk_core/common/action_tapping.c ****         } else {
 289:tmk_core/common/action_tapping.c ****             process_record(keyp);
 290:tmk_core/common/action_tapping.c ****             return true;
 291:tmk_core/common/action_tapping.c ****         }
 292:tmk_core/common/action_tapping.c ****     }
 293:tmk_core/common/action_tapping.c **** }
 294:tmk_core/common/action_tapping.c **** 
 295:tmk_core/common/action_tapping.c **** 
 296:tmk_core/common/action_tapping.c **** /** \brief Waiting buffer enq
 297:tmk_core/common/action_tapping.c ****  *
 298:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 299:tmk_core/common/action_tapping.c ****  */
 300:tmk_core/common/action_tapping.c **** bool waiting_buffer_enq(keyrecord_t record)
 301:tmk_core/common/action_tapping.c **** {
 302:tmk_core/common/action_tapping.c ****     if (IS_NOEVENT(record.event)) {
 303:tmk_core/common/action_tapping.c ****         return true;
 304:tmk_core/common/action_tapping.c ****     }
 305:tmk_core/common/action_tapping.c **** 
 306:tmk_core/common/action_tapping.c ****     if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
 307:tmk_core/common/action_tapping.c ****         debug("waiting_buffer_enq: Over flow.\n");
 308:tmk_core/common/action_tapping.c ****         return false;
 309:tmk_core/common/action_tapping.c ****     }
 310:tmk_core/common/action_tapping.c **** 
 311:tmk_core/common/action_tapping.c ****     waiting_buffer[waiting_buffer_head] = record;
 312:tmk_core/common/action_tapping.c ****     waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
 313:tmk_core/common/action_tapping.c **** 
 314:tmk_core/common/action_tapping.c ****     debug("waiting_buffer_enq: "); debug_waiting_buffer();
 315:tmk_core/common/action_tapping.c ****     return true;
 316:tmk_core/common/action_tapping.c **** }
 317:tmk_core/common/action_tapping.c **** 
 318:tmk_core/common/action_tapping.c **** /** \brief Waiting buffer clear
 319:tmk_core/common/action_tapping.c ****  *
 320:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 321:tmk_core/common/action_tapping.c ****  */
 322:tmk_core/common/action_tapping.c **** void waiting_buffer_clear(void)
 323:tmk_core/common/action_tapping.c **** {
 324:tmk_core/common/action_tapping.c ****     waiting_buffer_head = 0;
 325:tmk_core/common/action_tapping.c ****     waiting_buffer_tail = 0;
 326:tmk_core/common/action_tapping.c **** }
 327:tmk_core/common/action_tapping.c **** 
 328:tmk_core/common/action_tapping.c **** /** \brief Waiting buffer typed
 329:tmk_core/common/action_tapping.c ****  *
 330:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 331:tmk_core/common/action_tapping.c ****  */
 332:tmk_core/common/action_tapping.c **** bool waiting_buffer_typed(keyevent_t event)
 333:tmk_core/common/action_tapping.c **** {
 334:tmk_core/common/action_tapping.c ****     for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SI
 335:tmk_core/common/action_tapping.c ****         if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].ev
 336:tmk_core/common/action_tapping.c ****             return true;
 337:tmk_core/common/action_tapping.c ****         }
 338:tmk_core/common/action_tapping.c ****     }
 339:tmk_core/common/action_tapping.c ****     return false;
 340:tmk_core/common/action_tapping.c **** }
 341:tmk_core/common/action_tapping.c **** 
 342:tmk_core/common/action_tapping.c **** /** \brief Waiting buffer has anykey pressed
 343:tmk_core/common/action_tapping.c ****  *
 344:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 345:tmk_core/common/action_tapping.c ****  */
 346:tmk_core/common/action_tapping.c **** __attribute__((unused))
 347:tmk_core/common/action_tapping.c **** bool waiting_buffer_has_anykey_pressed(void)
 348:tmk_core/common/action_tapping.c **** {
 349:tmk_core/common/action_tapping.c ****     for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SI
 350:tmk_core/common/action_tapping.c ****         if (waiting_buffer[i].event.pressed) return true;
 351:tmk_core/common/action_tapping.c ****     }
 352:tmk_core/common/action_tapping.c ****     return false;
 353:tmk_core/common/action_tapping.c **** }
 354:tmk_core/common/action_tapping.c **** 
 355:tmk_core/common/action_tapping.c **** /** \brief Scan buffer for tapping
 356:tmk_core/common/action_tapping.c ****  *
 357:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 358:tmk_core/common/action_tapping.c ****  */
 359:tmk_core/common/action_tapping.c **** void waiting_buffer_scan_tap(void)
 360:tmk_core/common/action_tapping.c **** {
 361:tmk_core/common/action_tapping.c ****     // tapping already is settled
 362:tmk_core/common/action_tapping.c ****     if (tapping_key.tap.count > 0) return;
 363:tmk_core/common/action_tapping.c ****     // invalid state: tapping_key released && tap.count == 0
 364:tmk_core/common/action_tapping.c ****     if (!tapping_key.event.pressed) return;
 365:tmk_core/common/action_tapping.c **** 
 366:tmk_core/common/action_tapping.c ****     for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SI
 367:tmk_core/common/action_tapping.c ****         if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
 368:tmk_core/common/action_tapping.c ****                 !waiting_buffer[i].event.pressed &&
 369:tmk_core/common/action_tapping.c ****                 WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
 370:tmk_core/common/action_tapping.c ****             tapping_key.tap.count = 1;
 371:tmk_core/common/action_tapping.c ****             waiting_buffer[i].tap.count = 1;
 372:tmk_core/common/action_tapping.c ****             process_record(&tapping_key);
 373:tmk_core/common/action_tapping.c **** 
 374:tmk_core/common/action_tapping.c ****             debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
 375:tmk_core/common/action_tapping.c ****             debug_waiting_buffer();
 376:tmk_core/common/action_tapping.c ****             return;
 377:tmk_core/common/action_tapping.c ****         }
 378:tmk_core/common/action_tapping.c ****     }
 379:tmk_core/common/action_tapping.c **** }
 380:tmk_core/common/action_tapping.c **** 
 381:tmk_core/common/action_tapping.c **** 
 382:tmk_core/common/action_tapping.c **** /** \brief Tapping key debug print
 383:tmk_core/common/action_tapping.c ****  *
 384:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 385:tmk_core/common/action_tapping.c ****  */
 386:tmk_core/common/action_tapping.c **** static void debug_tapping_key(void)
 387:tmk_core/common/action_tapping.c **** {
 388:tmk_core/common/action_tapping.c ****     debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
 389:tmk_core/common/action_tapping.c **** }
 390:tmk_core/common/action_tapping.c **** 
 391:tmk_core/common/action_tapping.c **** /** \brief Waiting buffer debug print
 392:tmk_core/common/action_tapping.c ****  *
 393:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 394:tmk_core/common/action_tapping.c ****  */
 395:tmk_core/common/action_tapping.c **** static void debug_waiting_buffer(void)
 396:tmk_core/common/action_tapping.c **** {
  15               		.loc 1 396 0
  16               		.cfi_startproc
  17 0000 1F93      		push r17
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 17, -2
  21 0002 CF93      		push r28
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 28, -3
  25 0004 DF93      		push r29
  26               	.LCFI2:
  27               		.cfi_def_cfa_offset 5
  28               		.cfi_offset 29, -4
  29               	/* prologue: function */
  30               	/* frame size = 0 */
  31               	/* stack size = 3 */
  32               	.L__stack_usage = 3
  33               	.LBB3:
 397:tmk_core/common/action_tapping.c ****     debug("{ ");
 398:tmk_core/common/action_tapping.c ****     for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SI
  34               		.loc 1 398 0
  35 0006 C091 0000 		lds r28,waiting_buffer_tail
  36               	.LVL0:
 399:tmk_core/common/action_tapping.c ****         debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
  37               		.loc 1 399 0
  38 000a 16E0      		ldi r17,lo8(6)
  39               	.LVL1:
  40               	.L2:
 398:tmk_core/common/action_tapping.c ****         debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
  41               		.loc 1 398 0 discriminator 1
  42 000c 8091 0000 		lds r24,waiting_buffer_head
  43 0010 C817      		cp r28,r24
  44 0012 01F0      		breq .L5
  45               		.loc 1 399 0 discriminator 3
  46 0014 D0E0      		ldi r29,0
  47 0016 1C9F      		mul r17,r28
  48 0018 F001      		movw r30,r0
  49 001a 1D9F      		mul r17,r29
  50 001c F00D      		add r31,r0
  51 001e 1124      		clr __zero_reg__
  52 0020 E050      		subi r30,lo8(-(waiting_buffer))
  53 0022 F040      		sbci r31,hi8(-(waiting_buffer))
  54 0024 4081      		ld r20,Z
  55 0026 5181      		ldd r21,Z+1
  56 0028 6281      		ldd r22,Z+2
  57 002a 7381      		ldd r23,Z+3
  58 002c 8481      		ldd r24,Z+4
  59 002e 9581      		ldd r25,Z+5
  60 0030 0E94 0000 		call debug_record
  61               	.LVL2:
 398:tmk_core/common/action_tapping.c ****         debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
  62               		.loc 1 398 0 discriminator 3
  63 0034 2196      		adiw r28,1
  64               	.LVL3:
  65 0036 C770      		andi r28,lo8(7)
  66 0038 00C0      		rjmp .L2
  67               	.LVL4:
  68               	.L5:
  69               	/* epilogue start */
  70               	.LBE3:
 400:tmk_core/common/action_tapping.c ****     }
 401:tmk_core/common/action_tapping.c ****     debug("}\n");
 402:tmk_core/common/action_tapping.c **** }
  71               		.loc 1 402 0
  72 003a DF91      		pop r29
  73 003c CF91      		pop r28
  74               	.LVL5:
  75 003e 1F91      		pop r17
  76 0040 0895      		ret
  77               		.cfi_endproc
  78               	.LFE12:
  80               		.section	.text.debug_tapping_key,"ax",@progbits
  82               	debug_tapping_key:
  83               	.LFB11:
 387:tmk_core/common/action_tapping.c ****     debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
  84               		.loc 1 387 0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
 388:tmk_core/common/action_tapping.c **** }
  90               		.loc 1 388 0
  91 0000 4091 0000 		lds r20,tapping_key
  92 0004 5091 0000 		lds r21,tapping_key+1
  93 0008 6091 0000 		lds r22,tapping_key+2
  94 000c 7091 0000 		lds r23,tapping_key+3
  95 0010 8091 0000 		lds r24,tapping_key+4
  96 0014 9091 0000 		lds r25,tapping_key+5
  97 0018 0C94 0000 		jmp debug_record
  98               	.LVL6:
  99               		.cfi_endproc
 100               	.LFE11:
 102               		.section	.text.waiting_buffer_scan_tap,"ax",@progbits
 104               	waiting_buffer_scan_tap:
 105               	.LFB10:
 360:tmk_core/common/action_tapping.c ****     // tapping already is settled
 106               		.loc 1 360 0
 107               		.cfi_startproc
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 0 */
 111               	.L__stack_usage = 0
 362:tmk_core/common/action_tapping.c ****     // invalid state: tapping_key released && tap.count == 0
 112               		.loc 1 362 0
 113 0000 8091 0000 		lds r24,tapping_key+5
 114 0004 8295      		swap r24
 115 0006 8F70      		andi r24,lo8(15)
 116 0008 01F0      		breq .+2
 117 000a 00C0      		rjmp .L7
 364:tmk_core/common/action_tapping.c **** 
 118               		.loc 1 364 0
 119 000c 8091 0000 		lds r24,tapping_key+2
 120 0010 8823      		tst r24
 121 0012 01F4      		brne .+2
 122 0014 00C0      		rjmp .L7
 123               	.LBB7:
 366:tmk_core/common/action_tapping.c ****         if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
 124               		.loc 1 366 0
 125 0016 8091 0000 		lds r24,waiting_buffer_tail
 126               	.LVL7:
 127 001a A091 0000 		lds r26,waiting_buffer_head
 128 001e 6091 0000 		lds r22,tapping_key
 129 0022 7091 0000 		lds r23,tapping_key+1
 130 0026 4091 0000 		lds r20,tapping_key+3
 131 002a 5091 0000 		lds r21,tapping_key+3+1
 367:tmk_core/common/action_tapping.c ****                 !waiting_buffer[i].event.pressed &&
 132               		.loc 1 367 0
 133 002e B6E0      		ldi r27,lo8(6)
 134               	.LVL8:
 135               	.L9:
 366:tmk_core/common/action_tapping.c ****         if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
 136               		.loc 1 366 0 discriminator 1
 137 0030 8A17      		cp r24,r26
 138 0032 01F4      		brne .+2
 139 0034 00C0      		rjmp .L7
 140 0036 90E0      		ldi r25,0
 141               	.LBB8:
 142               	.LBB9:
 143               		.file 2 "tmk_core/common/keyboard.h"
   1:tmk_core/common/keyboard.h **** /*
   2:tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.h **** 
   4:tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.h **** (at your option) any later version.
   8:tmk_core/common/keyboard.h **** 
   9:tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.h **** 
  14:tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.h **** */
  17:tmk_core/common/keyboard.h **** 
  18:tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:tmk_core/common/keyboard.h **** 
  21:tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:tmk_core/common/keyboard.h **** #include <stdint.h>
  23:tmk_core/common/keyboard.h **** 
  24:tmk_core/common/keyboard.h **** 
  25:tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:tmk_core/common/keyboard.h **** extern "C" {
  27:tmk_core/common/keyboard.h **** #endif
  28:tmk_core/common/keyboard.h **** 
  29:tmk_core/common/keyboard.h **** /* key matrix position */
  30:tmk_core/common/keyboard.h **** typedef struct {
  31:tmk_core/common/keyboard.h ****     uint8_t col;
  32:tmk_core/common/keyboard.h ****     uint8_t row;
  33:tmk_core/common/keyboard.h **** } keypos_t;
  34:tmk_core/common/keyboard.h **** 
  35:tmk_core/common/keyboard.h **** /* key event */
  36:tmk_core/common/keyboard.h **** typedef struct {
  37:tmk_core/common/keyboard.h ****     keypos_t key;
  38:tmk_core/common/keyboard.h ****     bool     pressed;
  39:tmk_core/common/keyboard.h ****     uint16_t time;
  40:tmk_core/common/keyboard.h **** } keyevent_t;
  41:tmk_core/common/keyboard.h **** 
  42:tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:tmk_core/common/keyboard.h **** 
  45:tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:tmk_core/common/keyboard.h ****  */
  49:tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 144               		.loc 2 49 0
 145 0038 4115      		cp r20,__zero_reg__
 146 003a 5105      		cpc r21,__zero_reg__
 147 003c 01F0      		breq .L10
 148 003e 7F3F      		cpi r23,lo8(-1)
 149 0040 01F4      		brne .L11
 150               	.LBE9:
 151               	.LBE8:
 367:tmk_core/common/action_tapping.c ****                 !waiting_buffer[i].event.pressed &&
 152               		.loc 1 367 0
 153 0042 6F3F      		cpi r22,lo8(-1)
 154 0044 01F0      		breq .L10
 155               	.L11:
 367:tmk_core/common/action_tapping.c ****                 !waiting_buffer[i].event.pressed &&
 156               		.loc 1 367 0 is_stmt 0 discriminator 1
 157 0046 B89F      		mul r27,r24
 158 0048 F001      		movw r30,r0
 159 004a B99F      		mul r27,r25
 160 004c F00D      		add r31,r0
 161 004e 1124      		clr __zero_reg__
 162 0050 E050      		subi r30,lo8(-(waiting_buffer))
 163 0052 F040      		sbci r31,hi8(-(waiting_buffer))
 164 0054 2181      		ldd r18,Z+1
 165 0056 7213      		cpse r23,r18
 166 0058 00C0      		rjmp .L10
 367:tmk_core/common/action_tapping.c ****                 !waiting_buffer[i].event.pressed &&
 167               		.loc 1 367 0 discriminator 2
 168 005a 2081      		ld r18,Z
 169 005c 6213      		cpse r22,r18
 170 005e 00C0      		rjmp .L10
 367:tmk_core/common/action_tapping.c ****                 !waiting_buffer[i].event.pressed &&
 171               		.loc 1 367 0 discriminator 3
 172 0060 2281      		ldd r18,Z+2
 173 0062 2111      		cpse r18,__zero_reg__
 174 0064 00C0      		rjmp .L10
 369:tmk_core/common/action_tapping.c ****             tapping_key.tap.count = 1;
 175               		.loc 1 369 0 is_stmt 1
 176 0066 2381      		ldd r18,Z+3
 177 0068 3481      		ldd r19,Z+4
 178 006a 2417      		cp r18,r20
 179 006c 3507      		cpc r19,r21
 180 006e 00F4      		brsh .L28
 181 0070 2150      		subi r18,1
 182 0072 3109      		sbc r19,__zero_reg__
 183               	.L28:
 369:tmk_core/common/action_tapping.c ****             tapping_key.tap.count = 1;
 184               		.loc 1 369 0 is_stmt 0 discriminator 2
 185 0074 241B      		sub r18,r20
 186 0076 350B      		sbc r19,r21
 187 0078 2436      		cpi r18,100
 188 007a 3105      		cpc r19,__zero_reg__
 189 007c 00F4      		brsh .L10
 370:tmk_core/common/action_tapping.c ****             waiting_buffer[i].tap.count = 1;
 190               		.loc 1 370 0 is_stmt 1
 191 007e 2091 0000 		lds r18,tapping_key+5
 192 0082 2F70      		andi r18,lo8(15)
 193 0084 2061      		ori r18,lo8(16)
 194 0086 2093 0000 		sts tapping_key+5,r18
 371:tmk_core/common/action_tapping.c ****             process_record(&tapping_key);
 195               		.loc 1 371 0
 196 008a 26E0      		ldi r18,lo8(6)
 197 008c 289F      		mul r18,r24
 198 008e F001      		movw r30,r0
 199 0090 299F      		mul r18,r25
 200 0092 F00D      		add r31,r0
 201 0094 1124      		clr __zero_reg__
 202 0096 E050      		subi r30,lo8(-(waiting_buffer+5))
 203 0098 F040      		sbci r31,hi8(-(waiting_buffer+5))
 204 009a 8081      		ld r24,Z
 205               	.LVL9:
 206 009c 8F70      		andi r24,lo8(15)
 207 009e 8061      		ori r24,lo8(16)
 208 00a0 8083      		st Z,r24
 372:tmk_core/common/action_tapping.c **** 
 209               		.loc 1 372 0
 210 00a2 80E0      		ldi r24,lo8(tapping_key)
 211 00a4 90E0      		ldi r25,hi8(tapping_key)
 212 00a6 0E94 0000 		call process_record
 213               	.LVL10:
 375:tmk_core/common/action_tapping.c ****             return;
 214               		.loc 1 375 0
 215 00aa 0C94 0000 		jmp debug_waiting_buffer
 216               	.LVL11:
 217               	.L10:
 366:tmk_core/common/action_tapping.c ****         if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
 218               		.loc 1 366 0 discriminator 2
 219 00ae 0196      		adiw r24,1
 220               	.LVL12:
 221 00b0 8770      		andi r24,lo8(7)
 222 00b2 00C0      		rjmp .L9
 223               	.L7:
 224 00b4 0895      		ret
 225               	.LBE7:
 226               		.cfi_endproc
 227               	.LFE10:
 229               		.section	.text.process_tapping,"ax",@progbits
 231               	process_tapping:
 232               	.LFB5:
  84:tmk_core/common/action_tapping.c ****     keyevent_t event = keyp->event;
 233               		.loc 1 84 0
 234               		.cfi_startproc
 235               	.LVL13:
 236 0000 CF92      		push r12
 237               	.LCFI3:
 238               		.cfi_def_cfa_offset 3
 239               		.cfi_offset 12, -2
 240 0002 DF92      		push r13
 241               	.LCFI4:
 242               		.cfi_def_cfa_offset 4
 243               		.cfi_offset 13, -3
 244 0004 EF92      		push r14
 245               	.LCFI5:
 246               		.cfi_def_cfa_offset 5
 247               		.cfi_offset 14, -4
 248 0006 FF92      		push r15
 249               	.LCFI6:
 250               		.cfi_def_cfa_offset 6
 251               		.cfi_offset 15, -5
 252 0008 0F93      		push r16
 253               	.LCFI7:
 254               		.cfi_def_cfa_offset 7
 255               		.cfi_offset 16, -6
 256 000a 1F93      		push r17
 257               	.LCFI8:
 258               		.cfi_def_cfa_offset 8
 259               		.cfi_offset 17, -7
 260 000c CF93      		push r28
 261               	.LCFI9:
 262               		.cfi_def_cfa_offset 9
 263               		.cfi_offset 28, -8
 264 000e DF93      		push r29
 265               	.LCFI10:
 266               		.cfi_def_cfa_offset 10
 267               		.cfi_offset 29, -9
 268 0010 CDB7      		in r28,__SP_L__
 269 0012 DEB7      		in r29,__SP_H__
 270               	.LCFI11:
 271               		.cfi_def_cfa_register 28
 272 0014 6297      		sbiw r28,18
 273               	.LCFI12:
 274               		.cfi_def_cfa_offset 28
 275 0016 0FB6      		in __tmp_reg__,__SREG__
 276 0018 F894      		cli
 277 001a DEBF      		out __SP_H__,r29
 278 001c 0FBE      		out __SREG__,__tmp_reg__
 279 001e CDBF      		out __SP_L__,r28
 280               	/* prologue: function */
 281               	/* frame size = 18 */
 282               	/* stack size = 26 */
 283               	.L__stack_usage = 26
 284 0020 7C01      		movw r14,r24
  85:tmk_core/common/action_tapping.c **** 
 285               		.loc 1 85 0
 286 0022 85E0      		ldi r24,lo8(5)
 287               	.LVL14:
 288 0024 F701      		movw r30,r14
 289 0026 DE01      		movw r26,r28
 290 0028 1D96      		adiw r26,13
 291               		0:
 292 002a 0190      		ld r0,Z+
 293 002c 0D92      		st X+,r0
 294 002e 8A95      		dec r24
 295 0030 01F4      		brne 0b
 296 0032 D701      		movw r26,r14
 297 0034 4C91      		ld r20,X
 298               	.LVL15:
 299 0036 1196      		adiw r26,1
 300 0038 5C91      		ld r21,X
 301 003a 1197      		sbiw r26,1
 302               	.LVL16:
 303 003c 1296      		adiw r26,2
 304 003e 6C91      		ld r22,X
 305 0040 1297      		sbiw r26,2
 306               	.LVL17:
 307 0042 1396      		adiw r26,3
 308 0044 CD90      		ld r12,X+
 309 0046 DC90      		ld r13,X
 310 0048 1497      		sbiw r26,3+1
 311               	.LVL18:
 312 004a 3091 0000 		lds r19,tapping_key
 313 004e 7091 0000 		lds r23,tapping_key+1
 314 0052 8091 0000 		lds r24,tapping_key+3
 315 0056 9091 0000 		lds r25,tapping_key+3+1
 316               	.LBB20:
 317               	.LBB21:
 318               		.loc 2 49 0
 319 005a 0097      		sbiw r24,0
 320 005c 01F4      		brne .+2
 321 005e 00C0      		rjmp .L30
 322 0060 7F3F      		cpi r23,lo8(-1)
 323 0062 01F4      		brne .L31
 324               	.LBE21:
 325               	.LBE20:
  88:tmk_core/common/action_tapping.c ****         if (WITHIN_TAPPING_TERM(event)) {
 326               		.loc 1 88 0
 327 0064 3F3F      		cpi r19,lo8(-1)
 328 0066 01F4      		brne .+2
 329 0068 00C0      		rjmp .L30
 330               	.L31:
  88:tmk_core/common/action_tapping.c ****         if (WITHIN_TAPPING_TERM(event)) {
 331               		.loc 1 88 0 is_stmt 0 discriminator 1
 332 006a 0091 0000 		lds r16,tapping_key+2
 333 006e 0023      		tst r16
 334 0070 01F4      		brne .+2
 335 0072 00C0      		rjmp .L32
 336 0074 2091 0000 		lds r18,tapping_key+5
  89:tmk_core/common/action_tapping.c ****             if (tapping_key.tap.count == 0) {
 337               		.loc 1 89 0 is_stmt 1
 338 0078 C816      		cp r12,r24
 339 007a D906      		cpc r13,r25
 340 007c 00F0      		brlo .L33
  89:tmk_core/common/action_tapping.c ****             if (tapping_key.tap.count == 0) {
 341               		.loc 1 89 0 is_stmt 0 discriminator 1
 342 007e F601      		movw r30,r12
 343 0080 E81B      		sub r30,r24
 344 0082 F90B      		sbc r31,r25
 345 0084 CF01      		movw r24,r30
 346 0086 00C0      		rjmp .L128
 347               	.L33:
 348 0088 8095      		com r24
 349 008a 9095      		com r25
  89:tmk_core/common/action_tapping.c ****             if (tapping_key.tap.count == 0) {
 350               		.loc 1 89 0 discriminator 2
 351 008c 8C0D      		add r24,r12
 352 008e 9D1D      		adc r25,r13
 353               	.L128:
 354 0090 11E0      		ldi r17,lo8(1)
 355 0092 8436      		cpi r24,100
 356 0094 9105      		cpc r25,__zero_reg__
 357 0096 00F0      		brlo .L83
 358 0098 10E0      		ldi r17,0
 189:tmk_core/common/action_tapping.c ****                 debug("Tapping: End. Timeout. Not tap(0): ");
 359               		.loc 1 189 0 is_stmt 1 discriminator 2
 360 009a 207F      		andi r18,lo8(-16)
 361 009c 01F0      		breq .+2
 362 009e 00C0      		rjmp .L57
 191:tmk_core/common/action_tapping.c ****                 process_record(&tapping_key);
 363               		.loc 1 191 0
 364 00a0 7C2D      		mov r23,r12
 365 00a2 D98A      		std Y+17,r13
 366 00a4 C88A      		std Y+16,r12
 367 00a6 8989      		ldd r24,Y+17
 368 00a8 0E94 0000 		call debug_event
 369               	.LVL19:
 192:tmk_core/common/action_tapping.c ****                 tapping_key = (keyrecord_t){};
 370               		.loc 1 192 0
 371 00ac 80E0      		ldi r24,lo8(tapping_key)
 372 00ae 90E0      		ldi r25,hi8(tapping_key)
 373 00b0 0E94 0000 		call process_record
 374               	.LVL20:
 375 00b4 00C0      		rjmp .L131
 376               	.LVL21:
 377               	.L83:
  90:tmk_core/common/action_tapping.c ****                 if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 378               		.loc 1 90 0
 379 00b6 822F      		mov r24,r18
 380 00b8 807F      		andi r24,lo8(-16)
 381 00ba 01F0      		breq .+2
 382 00bc 00C0      		rjmp .L38
  91:tmk_core/common/action_tapping.c ****                     // first tap!
 383               		.loc 1 91 0 discriminator 1
 384 00be 7513      		cpse r23,r21
 385 00c0 00C0      		rjmp .L39
  91:tmk_core/common/action_tapping.c ****                     // first tap!
 386               		.loc 1 91 0 is_stmt 0 discriminator 2
 387 00c2 3413      		cpse r19,r20
 388 00c4 00C0      		rjmp .L39
  91:tmk_core/common/action_tapping.c ****                     // first tap!
 389               		.loc 1 91 0 discriminator 3
 390 00c6 6111      		cpse r22,__zero_reg__
 391 00c8 00C0      		rjmp .L39
  94:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 392               		.loc 1 94 0 is_stmt 1
 393 00ca 2F70      		andi r18,lo8(15)
 394 00cc 2061      		ori r18,lo8(16)
 395 00ce 2093 0000 		sts tapping_key+5,r18
  95:tmk_core/common/action_tapping.c ****                     process_record(&tapping_key);
 396               		.loc 1 95 0
 397 00d2 0E94 0000 		call debug_tapping_key
 398               	.LVL22:
  96:tmk_core/common/action_tapping.c **** 
 399               		.loc 1 96 0
 400 00d6 80E0      		ldi r24,lo8(tapping_key)
 401 00d8 90E0      		ldi r25,hi8(tapping_key)
 402 00da 0E94 0000 		call process_record
 403               	.LVL23:
  99:tmk_core/common/action_tapping.c ****                     // enqueue
 404               		.loc 1 99 0
 405 00de 8091 0000 		lds r24,tapping_key+5
 406 00e2 D701      		movw r26,r14
 407 00e4 1596      		adiw r26,5
 408 00e6 8C93      		st X,r24
 409 00e8 00C0      		rjmp .L124
 410               	.LVL24:
 411               	.L39:
 412               	.LBB22:
 413               	.LBB23:
 414               	.LBB24:
 415               	.LBB25:
 416               		.loc 2 49 0
 417 00ea CD28      		or r12,r13
 418 00ec 01F0      		breq .L41
 419 00ee 5F3F      		cpi r21,lo8(-1)
 420 00f0 01F4      		brne .L42
 421               	.LBE25:
 422               	.LBE24:
  50:tmk_core/common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
  51:tmk_core/common/keyboard.h **** static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
 423               		.loc 2 51 0
 424 00f2 4F3F      		cpi r20,lo8(-1)
 425 00f4 01F0      		breq .L41
 426               	.L42:
 427 00f6 162F      		mov r17,r22
 428 00f8 6111      		cpse r22,__zero_reg__
 429 00fa 00C0      		rjmp .L41
 430               	.LVL25:
 431               	.LBE23:
 432               	.LBE22:
 433               	.LBB26:
 434               	.LBB27:
 334:tmk_core/common/action_tapping.c ****         if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].ev
 435               		.loc 1 334 0 discriminator 1
 436 00fc 8091 0000 		lds r24,waiting_buffer_tail
 437               	.LVL26:
 438 0100 2091 0000 		lds r18,waiting_buffer_head
 335:tmk_core/common/action_tapping.c ****             return true;
 439               		.loc 1 335 0 discriminator 1
 440 0104 36E0      		ldi r19,lo8(6)
 441               	.LVL27:
 442               	.L43:
 334:tmk_core/common/action_tapping.c ****         if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].ev
 443               		.loc 1 334 0
 444 0106 8217      		cp r24,r18
 445 0108 01F4      		brne .+2
 446 010a 00C0      		rjmp .L132
 335:tmk_core/common/action_tapping.c ****             return true;
 447               		.loc 1 335 0
 448 010c 90E0      		ldi r25,0
 449 010e 389F      		mul r19,r24
 450 0110 F001      		movw r30,r0
 451 0112 399F      		mul r19,r25
 452 0114 F00D      		add r31,r0
 453 0116 1124      		clr __zero_reg__
 454 0118 E050      		subi r30,lo8(-(waiting_buffer))
 455 011a F040      		sbci r31,hi8(-(waiting_buffer))
 456 011c 7181      		ldd r23,Z+1
 457 011e 5713      		cpse r21,r23
 458 0120 00C0      		rjmp .L44
 459 0122 7081      		ld r23,Z
 460 0124 4713      		cpse r20,r23
 461 0126 00C0      		rjmp .L44
 462 0128 7281      		ldd r23,Z+2
 463 012a 7111      		cpse r23,__zero_reg__
 464 012c 00C0      		rjmp .L41
 465               	.L44:
 334:tmk_core/common/action_tapping.c ****         if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].ev
 466               		.loc 1 334 0
 467 012e 0196      		adiw r24,1
 468               	.LVL28:
 469 0130 8770      		andi r24,lo8(7)
 470 0132 00C0      		rjmp .L43
 471               	.LVL29:
 472               	.L41:
 473               	.LBE27:
 474               	.LBE26:
 143:tmk_core/common/action_tapping.c ****                         tapping_key.tap.interrupted = true;
 475               		.loc 1 143 0
 476 0134 162F      		mov r17,r22
 477 0136 6623      		tst r22
 478 0138 01F4      		brne .+2
 479 013a 00C0      		rjmp .L85
 480               	.LVL30:
 144:tmk_core/common/action_tapping.c ****                     }
 481               		.loc 1 144 0
 482 013c 8091 0000 		lds r24,tapping_key+5
 483 0140 8160      		ori r24,lo8(1<<0)
 484 0142 8093 0000 		sts tapping_key+5,r24
 485               	.LVL31:
 486               	.L124:
 147:tmk_core/common/action_tapping.c ****                 }
 487               		.loc 1 147 0
 488 0146 10E0      		ldi r17,0
 489 0148 00C0      		rjmp .L85
 490               	.LVL32:
 491               	.L38:
 152:tmk_core/common/action_tapping.c ****                     debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
 492               		.loc 1 152 0 discriminator 1
 493 014a 7513      		cpse r23,r21
 494 014c 00C0      		rjmp .L53
 152:tmk_core/common/action_tapping.c ****                     debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
 495               		.loc 1 152 0 is_stmt 0 discriminator 2
 496 014e 3413      		cpse r19,r20
 497 0150 00C0      		rjmp .L53
 152:tmk_core/common/action_tapping.c ****                     debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
 498               		.loc 1 152 0 discriminator 3
 499 0152 6111      		cpse r22,__zero_reg__
 500 0154 00C0      		rjmp .L53
 154:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 501               		.loc 1 154 0 is_stmt 1
 502 0156 8091 0000 		lds r24,tapping_key+5
 503 015a D701      		movw r26,r14
 504 015c 1596      		adiw r26,5
 505 015e 8C93      		st X,r24
 155:tmk_core/common/action_tapping.c ****                     tapping_key = *keyp;
 506               		.loc 1 155 0
 507 0160 C701      		movw r24,r14
 508 0162 0E94 0000 		call process_record
 509               	.LVL33:
 156:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 510               		.loc 1 156 0
 511 0166 86E0      		ldi r24,lo8(6)
 512 0168 F701      		movw r30,r14
 513 016a A0E0      		ldi r26,lo8(tapping_key)
 514 016c B0E0      		ldi r27,hi8(tapping_key)
 515               		0:
 516 016e 0190      		ld r0,Z+
 517 0170 0D92      		st X+,r0
 518 0172 8A95      		dec r24
 519 0174 01F4      		brne 0b
 520 0176 00C0      		rjmp .L126
 521               	.LVL34:
 522               	.L53:
 160:tmk_core/common/action_tapping.c ****                     if (tapping_key.tap.count > 1) {
 523               		.loc 1 160 0
 524 0178 4D87      		std Y+13,r20
 525 017a 5E87      		std Y+14,r21
 526 017c 8D85      		ldd r24,Y+13
 527 017e 9E85      		ldd r25,Y+14
 528 0180 6A8B      		std Y+18,r22
 529 0182 0E94 0000 		call is_tap_key
 530               	.LVL35:
 531 0186 6A89      		ldd r22,Y+18
 532 0188 8823      		tst r24
 533 018a 01F0      		breq .L65
 160:tmk_core/common/action_tapping.c ****                     if (tapping_key.tap.count > 1) {
 534               		.loc 1 160 0 is_stmt 0 discriminator 1
 535 018c 6623      		tst r22
 536 018e 01F0      		breq .L65
 161:tmk_core/common/action_tapping.c ****                         debug("Tapping: Start new tap with releasing last tap(>1).\n");
 537               		.loc 1 161 0 is_stmt 1
 538 0190 2091 0000 		lds r18,tapping_key+5
 539 0194 822F      		mov r24,r18
 540 0196 8295      		swap r24
 541 0198 8F70      		andi r24,lo8(15)
 542 019a 90E0      		ldi r25,0
 543 019c 0297      		sbiw r24,2
 544 019e 04F0      		brlt .L56
 164:tmk_core/common/action_tapping.c ****                                 .tap = tapping_key.tap,
 545               		.loc 1 164 0
 546 01a0 8091 0000 		lds r24,tapping_key
 547 01a4 9091 0000 		lds r25,tapping_key+1
 548 01a8 9887      		std Y+8,r25
 549 01aa 8F83      		std Y+7,r24
 550 01ac 1986      		std Y+9,__zero_reg__
 551 01ae DB86      		std Y+11,r13
 552 01b0 CA86      		std Y+10,r12
 553 01b2 2C87      		std Y+12,r18
 554 01b4 CE01      		movw r24,r28
 555 01b6 0796      		adiw r24,7
 556               	.L120:
 557 01b8 0E94 0000 		call process_record
 558               	.LVL36:
 559               	.L56:
 173:tmk_core/common/action_tapping.c ****                     waiting_buffer_scan_tap();
 560               		.loc 1 173 0
 561 01bc 86E0      		ldi r24,lo8(6)
 562 01be F701      		movw r30,r14
 563 01c0 A0E0      		ldi r26,lo8(tapping_key)
 564 01c2 B0E0      		ldi r27,hi8(tapping_key)
 565               		0:
 566 01c4 0190      		ld r0,Z+
 567 01c6 0D92      		st X+,r0
 568 01c8 8A95      		dec r24
 569 01ca 01F4      		brne 0b
 174:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 570               		.loc 1 174 0
 571 01cc 0E94 0000 		call waiting_buffer_scan_tap
 572               	.LVL37:
 175:tmk_core/common/action_tapping.c ****                     return true;
 573               		.loc 1 175 0
 574 01d0 0E94 0000 		call debug_tapping_key
 575               	.LVL38:
 576               	.L125:
 176:tmk_core/common/action_tapping.c ****                 }
 577               		.loc 1 176 0
 578 01d4 11E0      		ldi r17,lo8(1)
 579 01d6 00C0      		rjmp .L85
 580               	.LVL39:
 581               	.L132:
 582               	.LBB28:
 123:tmk_core/common/action_tapping.c ****                     switch (action.kind.id) {
 583               		.loc 1 123 0
 584 01d8 4D87      		std Y+13,r20
 585 01da 5E87      		std Y+14,r21
 586 01dc 8D85      		ldd r24,Y+13
 587 01de 9E85      		ldd r25,Y+14
 588               	.LVL40:
 589 01e0 0E94 0000 		call layer_switch_get_action
 590               	.LVL41:
 124:tmk_core/common/action_tapping.c ****                         case ACT_LMODS:
 591               		.loc 1 124 0
 592 01e4 292F      		mov r18,r25
 593 01e6 2295      		swap r18
 594 01e8 2F70      		andi r18,lo8(15)
 595 01ea 30E0      		ldi r19,0
 596 01ec 2230      		cpi r18,2
 597 01ee 3105      		cpc r19,__zero_reg__
 598 01f0 04F0      		brlt .+2
 599 01f2 00C0      		rjmp .L133
 127:tmk_core/common/action_tapping.c ****                             if (IS_MOD(action.key.code)) return false;
 600               		.loc 1 127 0
 601 01f4 9F70      		andi r25,lo8(15)
 602               	.LVL42:
 603 01f6 01F0      		breq .+2
 604 01f8 00C0      		rjmp .L134
 605               	.L52:
 133:tmk_core/common/action_tapping.c ****                             break;
 606               		.loc 1 133 0
 607 01fa 805E      		subi r24,lo8(-(32))
 608               	.LVL43:
 609 01fc 8830      		cpi r24,lo8(8)
 610 01fe 00F4      		brsh .+2
 611 0200 00C0      		rjmp .L85
 612               	.LVL44:
 613               	.L65:
 614               	.LBE28:
 182:tmk_core/common/action_tapping.c ****                     return true;
 615               		.loc 1 182 0
 616 0202 C701      		movw r24,r14
 617               	.LVL45:
 618 0204 0E94 0000 		call process_record
 619               	.LVL46:
 620 0208 00C0      		rjmp .L125
 621               	.LVL47:
 622               	.L32:
 232:tmk_core/common/action_tapping.c ****             if (event.pressed) {
 623               		.loc 1 232 0
 624 020a C816      		cp r12,r24
 625 020c D906      		cpc r13,r25
 626 020e 00F4      		brsh .+2
 627 0210 00C0      		rjmp .L60
 232:tmk_core/common/action_tapping.c ****             if (event.pressed) {
 628               		.loc 1 232 0 is_stmt 0 discriminator 1
 629 0212 F601      		movw r30,r12
 630 0214 E81B      		sub r30,r24
 631 0216 F90B      		sbc r31,r25
 632 0218 CF01      		movw r24,r30
 633               	.L130:
 232:tmk_core/common/action_tapping.c ****             if (event.pressed) {
 634               		.loc 1 232 0 discriminator 2
 635 021a 8436      		cpi r24,100
 636 021c 9105      		cpc r25,__zero_reg__
 637 021e 00F4      		brsh .+2
 638 0220 00C0      		rjmp .L84
 639 0222 10E0      		ldi r17,0
 273:tmk_core/common/action_tapping.c ****             tapping_key = (keyrecord_t){};
 640               		.loc 1 273 0 is_stmt 1 discriminator 2
 641 0224 7C2D      		mov r23,r12
 642 0226 D98A      		std Y+17,r13
 643 0228 C88A      		std Y+16,r12
 644 022a 8989      		ldd r24,Y+17
 645 022c 0E94 0000 		call debug_event
 646               	.LVL48:
 647               	.L131:
 193:tmk_core/common/action_tapping.c ****                 debug_tapping_key();
 648               		.loc 1 193 0
 649 0230 E0E0      		ldi r30,lo8(tapping_key)
 650 0232 F0E0      		ldi r31,hi8(tapping_key)
 651 0234 86E0      		ldi r24,lo8(6)
 652 0236 DF01      		movw r26,r30
 653               		0:
 654 0238 1D92      		st X+,__zero_reg__
 655 023a 8A95      		dec r24
 656 023c 01F4      		brne 0b
 657               	.L126:
 194:tmk_core/common/action_tapping.c ****                 return false;
 658               		.loc 1 194 0
 659 023e 0E94 0000 		call debug_tapping_key
 660               	.LVL49:
 195:tmk_core/common/action_tapping.c ****             }  else {
 661               		.loc 1 195 0
 662 0242 00C0      		rjmp .L85
 663               	.LVL50:
 664               	.L57:
 197:tmk_core/common/action_tapping.c ****                     debug("Tapping: End. last timeout tap release(>0).");
 665               		.loc 1 197 0 discriminator 1
 666 0244 7513      		cpse r23,r21
 667 0246 00C0      		rjmp .L58
 197:tmk_core/common/action_tapping.c ****                     debug("Tapping: End. last timeout tap release(>0).");
 668               		.loc 1 197 0 is_stmt 0 discriminator 2
 669 0248 3413      		cpse r19,r20
 670 024a 00C0      		rjmp .L58
 197:tmk_core/common/action_tapping.c ****                     debug("Tapping: End. last timeout tap release(>0).");
 671               		.loc 1 197 0 discriminator 3
 672 024c 6111      		cpse r22,__zero_reg__
 673 024e 00C0      		rjmp .L58
 199:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 674               		.loc 1 199 0 is_stmt 1
 675 0250 8091 0000 		lds r24,tapping_key+5
 676 0254 F701      		movw r30,r14
 677 0256 8583      		std Z+5,r24
 200:tmk_core/common/action_tapping.c ****                     tapping_key = (keyrecord_t){};
 678               		.loc 1 200 0
 679 0258 C701      		movw r24,r14
 680 025a 0E94 0000 		call process_record
 681               	.LVL51:
 201:tmk_core/common/action_tapping.c ****                     return true;
 682               		.loc 1 201 0
 683 025e 86E0      		ldi r24,lo8(6)
 684 0260 E0E0      		ldi r30,lo8(tapping_key)
 685 0262 F0E0      		ldi r31,hi8(tapping_key)
 686 0264 DF01      		movw r26,r30
 687               		0:
 688 0266 1D92      		st X+,__zero_reg__
 689 0268 8A95      		dec r24
 690 026a 01F4      		brne 0b
 202:tmk_core/common/action_tapping.c ****                 }
 691               		.loc 1 202 0
 692 026c 102F      		mov r17,r16
 693 026e 00C0      		rjmp .L85
 694               	.LVL52:
 695               	.L58:
 204:tmk_core/common/action_tapping.c ****                     if (tapping_key.tap.count > 1) {
 696               		.loc 1 204 0
 697 0270 4D87      		std Y+13,r20
 698 0272 5E87      		std Y+14,r21
 699 0274 8D85      		ldd r24,Y+13
 700 0276 9E85      		ldd r25,Y+14
 701 0278 6A8B      		std Y+18,r22
 702 027a 0E94 0000 		call is_tap_key
 703               	.LVL53:
 704 027e 6A89      		ldd r22,Y+18
 705 0280 8823      		tst r24
 706 0282 01F4      		brne .+2
 707 0284 00C0      		rjmp .L65
 204:tmk_core/common/action_tapping.c ****                     if (tapping_key.tap.count > 1) {
 708               		.loc 1 204 0 is_stmt 0 discriminator 1
 709 0286 6623      		tst r22
 710 0288 01F4      		brne .+2
 711 028a 00C0      		rjmp .L65
 205:tmk_core/common/action_tapping.c ****                         debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
 712               		.loc 1 205 0 is_stmt 1
 713 028c 2091 0000 		lds r18,tapping_key+5
 714 0290 822F      		mov r24,r18
 715 0292 8295      		swap r24
 716 0294 8F70      		andi r24,lo8(15)
 717 0296 90E0      		ldi r25,0
 718 0298 0297      		sbiw r24,2
 719 029a 04F4      		brge .+2
 720 029c 00C0      		rjmp .L56
 208:tmk_core/common/action_tapping.c ****                                 .tap = tapping_key.tap,
 721               		.loc 1 208 0
 722 029e 8091 0000 		lds r24,tapping_key
 723 02a2 9091 0000 		lds r25,tapping_key+1
 724 02a6 9A83      		std Y+2,r25
 725 02a8 8983      		std Y+1,r24
 726 02aa 1B82      		std Y+3,__zero_reg__
 727 02ac DD82      		std Y+5,r13
 728 02ae CC82      		std Y+4,r12
 729 02b0 2E83      		std Y+6,r18
 730 02b2 CE01      		movw r24,r28
 731 02b4 0196      		adiw r24,1
 732 02b6 00C0      		rjmp .L120
 733               	.LVL54:
 734               	.L60:
 735 02b8 8095      		com r24
 736 02ba 9095      		com r25
 232:tmk_core/common/action_tapping.c ****             if (event.pressed) {
 737               		.loc 1 232 0 discriminator 2
 738 02bc 8C0D      		add r24,r12
 739 02be 9D1D      		adc r25,r13
 740 02c0 00C0      		rjmp .L130
 741               	.L84:
 233:tmk_core/common/action_tapping.c ****                 if (IS_TAPPING_KEY(event.key)) {
 742               		.loc 1 233 0
 743 02c2 162F      		mov r17,r22
 744 02c4 6623      		tst r22
 745 02c6 01F4      		brne .+2
 746 02c8 00C0      		rjmp .L65
 747               	.LVL55:
 234:tmk_core/common/action_tapping.c **** #ifndef TAPPING_FORCE_HOLD
 748               		.loc 1 234 0 discriminator 1
 749 02ca 7513      		cpse r23,r21
 750 02cc 00C0      		rjmp .L66
 234:tmk_core/common/action_tapping.c **** #ifndef TAPPING_FORCE_HOLD
 751               		.loc 1 234 0 is_stmt 0 discriminator 2
 752 02ce 3413      		cpse r19,r20
 753 02d0 00C0      		rjmp .L66
 248:tmk_core/common/action_tapping.c ****                     return true;
 754               		.loc 1 248 0 is_stmt 1
 755 02d2 86E0      		ldi r24,lo8(6)
 756 02d4 F701      		movw r30,r14
 757 02d6 A0E0      		ldi r26,lo8(tapping_key)
 758 02d8 B0E0      		ldi r27,hi8(tapping_key)
 759               		0:
 760 02da 0190      		ld r0,Z+
 761 02dc 0D92      		st X+,r0
 762 02de 8A95      		dec r24
 763 02e0 01F4      		brne 0b
 249:tmk_core/common/action_tapping.c ****                 } else if (is_tap_key(event.key)) {
 764               		.loc 1 249 0
 765 02e2 00C0      		rjmp .L85
 766               	.L66:
 250:tmk_core/common/action_tapping.c ****                     // Sequential tap can be interfered with other tap key.
 767               		.loc 1 250 0
 768 02e4 4D87      		std Y+13,r20
 769 02e6 5E87      		std Y+14,r21
 770 02e8 8D85      		ldd r24,Y+13
 771 02ea 9E85      		ldd r25,Y+14
 772 02ec 0E94 0000 		call is_tap_key
 773               	.LVL56:
 774 02f0 8111      		cpse r24,__zero_reg__
 775 02f2 00C0      		rjmp .L56
 260:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 776               		.loc 1 260 0
 777 02f4 8091 0000 		lds r24,tapping_key+5
 778 02f8 8160      		ori r24,lo8(1<<0)
 779 02fa 8093 0000 		sts tapping_key+5,r24
 261:tmk_core/common/action_tapping.c ****                     return true;
 780               		.loc 1 261 0
 781 02fe C701      		movw r24,r14
 782 0300 0E94 0000 		call process_record
 783               	.LVL57:
 262:tmk_core/common/action_tapping.c ****                 }
 784               		.loc 1 262 0
 785 0304 00C0      		rjmp .L85
 786               	.LVL58:
 787               	.L30:
 281:tmk_core/common/action_tapping.c ****             debug("Tapping: Start(Press tap key).\n");
 788               		.loc 1 281 0
 789 0306 6623      		tst r22
 790 0308 01F4      		brne .+2
 791 030a 00C0      		rjmp .L65
 281:tmk_core/common/action_tapping.c ****             debug("Tapping: Start(Press tap key).\n");
 792               		.loc 1 281 0 is_stmt 0 discriminator 1
 793 030c 4D87      		std Y+13,r20
 794 030e 5E87      		std Y+14,r21
 795 0310 8D85      		ldd r24,Y+13
 796 0312 9E85      		ldd r25,Y+14
 797 0314 0E94 0000 		call is_tap_key
 798               	.LVL59:
 799 0318 182F      		mov r17,r24
 800 031a 8823      		tst r24
 801 031c 01F4      		brne .+2
 802 031e 00C0      		rjmp .L65
 283:tmk_core/common/action_tapping.c ****             process_record_tap_hint(&tapping_key);
 803               		.loc 1 283 0 is_stmt 1
 804 0320 86E0      		ldi r24,lo8(6)
 805 0322 F701      		movw r30,r14
 806 0324 A0E0      		ldi r26,lo8(tapping_key)
 807 0326 B0E0      		ldi r27,hi8(tapping_key)
 808               		0:
 809 0328 0190      		ld r0,Z+
 810 032a 0D92      		st X+,r0
 811 032c 8A95      		dec r24
 812 032e 01F4      		brne 0b
 284:tmk_core/common/action_tapping.c ****             waiting_buffer_scan_tap();
 813               		.loc 1 284 0
 814 0330 80E0      		ldi r24,lo8(tapping_key)
 815 0332 90E0      		ldi r25,hi8(tapping_key)
 816 0334 0E94 0000 		call process_record_tap_hint
 817               	.LVL60:
 285:tmk_core/common/action_tapping.c ****             debug_tapping_key();
 818               		.loc 1 285 0
 819 0338 0E94 0000 		call waiting_buffer_scan_tap
 820               	.LVL61:
 821 033c 00C0      		rjmp .L126
 822               	.LVL62:
 823               	.L134:
 824               	.LBB29:
 127:tmk_core/common/action_tapping.c ****                             if (IS_MOD(action.key.code)) return false;
 825               		.loc 1 127 0 discriminator 1
 826 033e 8111      		cpse r24,__zero_reg__
 827 0340 00C0      		rjmp .L52
 828 0342 00C0      		rjmp .L85
 829               	.LVL63:
 830               	.L133:
 124:tmk_core/common/action_tapping.c ****                         case ACT_LMODS:
 831               		.loc 1 124 0
 832 0344 2430      		cpi r18,4
 833 0346 3105      		cpc r19,__zero_reg__
 834 0348 04F0      		brlt .+2
 835 034a 00C0      		rjmp .L65
 132:tmk_core/common/action_tapping.c ****                             if (IS_MOD(action.key.code)) return false;
 836               		.loc 1 132 0
 837 034c 9F70      		andi r25,lo8(15)
 838               	.LVL64:
 839 034e 01F4      		brne .+2
 840 0350 00C0      		rjmp .L52
 132:tmk_core/common/action_tapping.c ****                             if (IS_MOD(action.key.code)) return false;
 841               		.loc 1 132 0 is_stmt 0 discriminator 1
 842 0352 F701      		movw r30,r14
 843 0354 9581      		ldd r25,Z+5
 844 0356 907F      		andi r25,lo8(-16)
 845 0358 01F0      		breq .+2
 846 035a 00C0      		rjmp .L52
 847               	.LVL65:
 848               	.L85:
 849               	.LBE29:
 293:tmk_core/common/action_tapping.c **** 
 850               		.loc 1 293 0 is_stmt 1
 851 035c 812F      		mov r24,r17
 852               	.LVL66:
 853               	/* epilogue start */
 854 035e 6296      		adiw r28,18
 855 0360 0FB6      		in __tmp_reg__,__SREG__
 856 0362 F894      		cli
 857 0364 DEBF      		out __SP_H__,r29
 858 0366 0FBE      		out __SREG__,__tmp_reg__
 859 0368 CDBF      		out __SP_L__,r28
 860 036a DF91      		pop r29
 861 036c CF91      		pop r28
 862 036e 1F91      		pop r17
 863 0370 0F91      		pop r16
 864 0372 FF90      		pop r15
 865 0374 EF90      		pop r14
 866               	.LVL67:
 867 0376 DF90      		pop r13
 868 0378 CF90      		pop r12
 869               	.LVL68:
 870 037a 0895      		ret
 871               		.cfi_endproc
 872               	.LFE5:
 874               		.section	.text.action_tapping_process,"ax",@progbits
 875               	.global	action_tapping_process
 877               	action_tapping_process:
 878               	.LFB4:
  44:tmk_core/common/action_tapping.c ****     if (process_tapping(&record)) {
 879               		.loc 1 44 0
 880               		.cfi_startproc
 881 0000 1F93      		push r17
 882               	.LCFI13:
 883               		.cfi_def_cfa_offset 3
 884               		.cfi_offset 17, -2
 885 0002 CF93      		push r28
 886               	.LCFI14:
 887               		.cfi_def_cfa_offset 4
 888               		.cfi_offset 28, -3
 889 0004 DF93      		push r29
 890               	.LCFI15:
 891               		.cfi_def_cfa_offset 5
 892               		.cfi_offset 29, -4
 893 0006 CDB7      		in r28,__SP_L__
 894 0008 DEB7      		in r29,__SP_H__
 895               	.LCFI16:
 896               		.cfi_def_cfa_register 28
 897 000a 2C97      		sbiw r28,12
 898               	.LCFI17:
 899               		.cfi_def_cfa_offset 17
 900 000c 0FB6      		in __tmp_reg__,__SREG__
 901 000e F894      		cli
 902 0010 DEBF      		out __SP_H__,r29
 903 0012 0FBE      		out __SREG__,__tmp_reg__
 904 0014 CDBF      		out __SP_L__,r28
 905               	/* prologue: function */
 906               	/* frame size = 12 */
 907               	/* stack size = 15 */
 908               	.L__stack_usage = 15
 909 0016 4F83      		std Y+7,r20
 910 0018 5887      		std Y+8,r21
 911 001a 6987      		std Y+9,r22
 912 001c 7A87      		std Y+10,r23
 913 001e 8B87      		std Y+11,r24
 914 0020 9C87      		std Y+12,r25
  45:tmk_core/common/action_tapping.c ****         if (!IS_NOEVENT(record.event)) {
 915               		.loc 1 45 0
 916 0022 CE01      		movw r24,r28
 917 0024 0796      		adiw r24,7
 918 0026 0E94 0000 		call process_tapping
 919               	.LVL69:
 920 002a 8823      		tst r24
 921 002c 01F0      		breq .L136
 922 002e 8F81      		ldd r24,Y+7
 923 0030 9885      		ldd r25,Y+8
 924               	.LBB38:
 925               	.LBB39:
  49:tmk_core/common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
 926               		.loc 2 49 0
 927 0032 2A85      		ldd r18,Y+10
 928 0034 3B85      		ldd r19,Y+11
 929 0036 232B      		or r18,r19
 930 0038 01F0      		breq .L137
 931 003a 9F3F      		cpi r25,lo8(-1)
 932 003c 01F0      		breq .+2
 933 003e 00C0      		rjmp .L138
 934 0040 8F3F      		cpi r24,lo8(-1)
 935 0042 01F0      		breq .+2
 936 0044 00C0      		rjmp .L138
 937 0046 00C0      		rjmp .L137
 938               	.L136:
 939 0048 86E0      		ldi r24,lo8(6)
 940 004a FE01      		movw r30,r28
 941 004c 3796      		adiw r30,7
 942 004e DE01      		movw r26,r28
 943 0050 1196      		adiw r26,1
 944               		0:
 945 0052 0190      		ld r0,Z+
 946 0054 0D92      		st X+,r0
 947 0056 8A95      		dec r24
 948 0058 01F4      		brne 0b
 949 005a 6F81      		ldd r22,Y+7
 950               	.LVL70:
 951 005c 7885      		ldd r23,Y+8
 952               	.LVL71:
 953 005e EA85      		ldd r30,Y+10
 954 0060 FB85      		ldd r31,Y+11
 955               	.LVL72:
 956               	.LBE39:
 957               	.LBE38:
 958               	.LBB40:
 959               	.LBB41:
 960               	.LBB42:
 961               	.LBB43:
 962 0062 3097      		sbiw r30,0
 963 0064 01F0      		breq .L137
 964 0066 7F3F      		cpi r23,lo8(-1)
 965 0068 01F4      		brne .L140
 966 006a 6F3F      		cpi r22,lo8(-1)
 967 006c 01F0      		breq .L137
 968               	.L140:
 969               	.LBE43:
 970               	.LBE42:
 306:tmk_core/common/action_tapping.c ****         debug("waiting_buffer_enq: Over flow.\n");
 971               		.loc 1 306 0
 972 006e 2091 0000 		lds r18,waiting_buffer_head
 973 0072 30E0      		ldi r19,0
 974 0074 C901      		movw r24,r18
 975 0076 0196      		adiw r24,1
 976 0078 8770      		andi r24,7
 977 007a 9927      		clr r25
 978 007c 4091 0000 		lds r20,waiting_buffer_tail
 979 0080 50E0      		ldi r21,0
 980 0082 8417      		cp r24,r20
 981 0084 9507      		cpc r25,r21
 982 0086 01F4      		brne .+2
 983 0088 00C0      		rjmp .L160
 311:tmk_core/common/action_tapping.c ****     waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
 984               		.loc 1 311 0
 985 008a 6983      		std Y+1,r22
 986 008c 7A83      		std Y+2,r23
 987 008e FD83      		std Y+5,r31
 988 0090 EC83      		std Y+4,r30
 989 0092 96E0      		ldi r25,lo8(6)
 990 0094 929F      		mul r25,r18
 991 0096 D001      		movw r26,r0
 992 0098 939F      		mul r25,r19
 993 009a B00D      		add r27,r0
 994 009c 1124      		clr __zero_reg__
 995 009e A050      		subi r26,lo8(-(waiting_buffer))
 996 00a0 B040      		sbci r27,hi8(-(waiting_buffer))
 997 00a2 FE01      		movw r30,r28
 998               	.LVL73:
 999 00a4 3196      		adiw r30,1
 1000               		0:
 1001 00a6 0190      		ld r0,Z+
 1002 00a8 0D92      		st X+,r0
 1003 00aa 9A95      		dec r25
 1004 00ac 01F4      		brne 0b
 312:tmk_core/common/action_tapping.c **** 
 1005               		.loc 1 312 0
 1006 00ae 8093 0000 		sts waiting_buffer_head,r24
 314:tmk_core/common/action_tapping.c ****     return true;
 1007               		.loc 1 314 0
 1008 00b2 0E94 0000 		call debug_waiting_buffer
 1009               	.LVL74:
 1010               	.L137:
 1011               	.LBE41:
 1012               	.LBE40:
  64:tmk_core/common/action_tapping.c ****             debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
 1013               		.loc 1 64 0 discriminator 1
 1014 00b6 16E0      		ldi r17,lo8(6)
 1015               	.L141:
  63:tmk_core/common/action_tapping.c ****         if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
 1016               		.loc 1 63 0 discriminator 1
 1017 00b8 8091 0000 		lds r24,waiting_buffer_tail
 1018 00bc 9091 0000 		lds r25,waiting_buffer_head
 1019 00c0 8917      		cp r24,r25
 1020 00c2 01F0      		breq .L135
  64:tmk_core/common/action_tapping.c ****             debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
 1021               		.loc 1 64 0
 1022 00c4 189F      		mul r17,r24
 1023 00c6 C001      		movw r24,r0
 1024 00c8 1124      		clr __zero_reg__
 1025 00ca 8050      		subi r24,lo8(-(waiting_buffer))
 1026 00cc 9040      		sbci r25,hi8(-(waiting_buffer))
 1027 00ce 0E94 0000 		call process_tapping
 1028               	.LVL75:
 1029 00d2 8823      		tst r24
 1030 00d4 01F0      		breq .L135
  66:tmk_core/common/action_tapping.c ****         } else {
 1031               		.loc 1 66 0
 1032 00d6 E091 0000 		lds r30,waiting_buffer_tail
 1033 00da 1E9F      		mul r17,r30
 1034 00dc F001      		movw r30,r0
 1035 00de 1124      		clr __zero_reg__
 1036 00e0 E050      		subi r30,lo8(-(waiting_buffer))
 1037 00e2 F040      		sbci r31,hi8(-(waiting_buffer))
 1038 00e4 4081      		ld r20,Z
 1039 00e6 5181      		ldd r21,Z+1
 1040 00e8 6281      		ldd r22,Z+2
 1041 00ea 7381      		ldd r23,Z+3
 1042 00ec 8481      		ldd r24,Z+4
 1043 00ee 9581      		ldd r25,Z+5
 1044 00f0 0E94 0000 		call debug_record
 1045               	.LVL76:
  63:tmk_core/common/action_tapping.c ****         if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
 1046               		.loc 1 63 0
 1047 00f4 8091 0000 		lds r24,waiting_buffer_tail
 1048 00f8 90E0      		ldi r25,0
 1049 00fa 0196      		adiw r24,1
 1050 00fc 8770      		andi r24,7
 1051 00fe 9927      		clr r25
 1052 0100 8093 0000 		sts waiting_buffer_tail,r24
 1053 0104 00C0      		rjmp .L141
 1054               	.L138:
  47:tmk_core/common/action_tapping.c ****         }
 1055               		.loc 1 47 0
 1056 0106 4F81      		ldd r20,Y+7
 1057 0108 5885      		ldd r21,Y+8
 1058 010a 6985      		ldd r22,Y+9
 1059 010c 7A85      		ldd r23,Y+10
 1060 010e 8B85      		ldd r24,Y+11
 1061 0110 9C85      		ldd r25,Y+12
 1062 0112 0E94 0000 		call debug_record
 1063               	.LVL77:
 1064 0116 00C0      		rjmp .L137
 1065               	.LVL78:
 1066               	.L160:
  53:tmk_core/common/action_tapping.c ****             waiting_buffer_clear();
 1067               		.loc 1 53 0
 1068 0118 0E94 0000 		call clear_keyboard
 1069               	.LVL79:
 1070               	.LBB44:
 1071               	.LBB45:
 324:tmk_core/common/action_tapping.c ****     waiting_buffer_tail = 0;
 1072               		.loc 1 324 0
 1073 011c 1092 0000 		sts waiting_buffer_head,__zero_reg__
 325:tmk_core/common/action_tapping.c **** }
 1074               		.loc 1 325 0
 1075 0120 1092 0000 		sts waiting_buffer_tail,__zero_reg__
 1076               	.LBE45:
 1077               	.LBE44:
  55:tmk_core/common/action_tapping.c ****         }
 1078               		.loc 1 55 0
 1079 0124 E0E0      		ldi r30,lo8(tapping_key)
 1080 0126 F0E0      		ldi r31,hi8(tapping_key)
 1081 0128 86E0      		ldi r24,lo8(6)
 1082 012a DF01      		movw r26,r30
 1083               		0:
 1084 012c 1D92      		st X+,__zero_reg__
 1085 012e 8A95      		dec r24
 1086 0130 01F4      		brne 0b
 1087 0132 00C0      		rjmp .L137
 1088               	.L135:
 1089               	/* epilogue start */
  74:tmk_core/common/action_tapping.c **** 
 1090               		.loc 1 74 0
 1091 0134 2C96      		adiw r28,12
 1092 0136 0FB6      		in __tmp_reg__,__SREG__
 1093 0138 F894      		cli
 1094 013a DEBF      		out __SP_H__,r29
 1095 013c 0FBE      		out __SREG__,__tmp_reg__
 1096 013e CDBF      		out __SP_L__,r28
 1097 0140 DF91      		pop r29
 1098 0142 CF91      		pop r28
 1099 0144 1F91      		pop r17
 1100 0146 0895      		ret
 1101               		.cfi_endproc
 1102               	.LFE4:
 1104               		.section	.bss.waiting_buffer_tail,"aw",@nobits
 1107               	waiting_buffer_tail:
 1108 0000 00        		.zero	1
 1109               		.section	.bss.waiting_buffer_head,"aw",@nobits
 1112               	waiting_buffer_head:
 1113 0000 00        		.zero	1
 1114               		.section	.bss.waiting_buffer,"aw",@nobits
 1117               	waiting_buffer:
 1118 0000 0000 0000 		.zero	48
 1118      0000 0000 
 1118      0000 0000 
 1118      0000 0000 
 1118      0000 0000 
 1119               		.section	.bss.tapping_key,"aw",@nobits
 1122               	tapping_key:
 1123 0000 0000 0000 		.zero	6
 1123      0000 
 1124               		.text
 1125               	.Letext0:
 1126               		.file 3 "/usr/lib/avr/include/stdint.h"
 1127               		.file 4 "tmk_core/common/keycode.h"
 1128               		.file 5 "tmk_core/common/action_code.h"
 1129               		.file 6 "tmk_core/common/action.h"
 1130               		.file 7 "tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_tapping.c
     /tmp/cc8ZQnYA.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc8ZQnYA.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc8ZQnYA.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc8ZQnYA.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc8ZQnYA.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc8ZQnYA.s:12     .text.debug_waiting_buffer:0000000000000000 debug_waiting_buffer
     /tmp/cc8ZQnYA.s:1107   .bss.waiting_buffer_tail:0000000000000000 waiting_buffer_tail
     /tmp/cc8ZQnYA.s:1112   .bss.waiting_buffer_head:0000000000000000 waiting_buffer_head
     /tmp/cc8ZQnYA.s:1117   .bss.waiting_buffer:0000000000000000 waiting_buffer
     /tmp/cc8ZQnYA.s:82     .text.debug_tapping_key:0000000000000000 debug_tapping_key
     /tmp/cc8ZQnYA.s:1122   .bss.tapping_key:0000000000000000 tapping_key
     /tmp/cc8ZQnYA.s:104    .text.waiting_buffer_scan_tap:0000000000000000 waiting_buffer_scan_tap
     /tmp/cc8ZQnYA.s:231    .text.process_tapping:0000000000000000 process_tapping
     /tmp/cc8ZQnYA.s:877    .text.action_tapping_process:0000000000000000 action_tapping_process

UNDEFINED SYMBOLS
debug_record
process_record
debug_event
is_tap_key
layer_switch_get_action
process_record_tap_hint
clear_keyboard
__do_clear_bss
