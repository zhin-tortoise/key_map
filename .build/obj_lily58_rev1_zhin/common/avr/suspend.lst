   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.suspend_idle,"ax",@progbits
  11               	.global	suspend_idle
  13               	suspend_idle:
  14               	.LFB108:
  15               		.file 1 "tmk_core/common/avr/suspend.c"
   1:tmk_core/common/avr/suspend.c **** #include <stdbool.h>
   2:tmk_core/common/avr/suspend.c **** #include <avr/sleep.h>
   3:tmk_core/common/avr/suspend.c **** #include <avr/wdt.h>
   4:tmk_core/common/avr/suspend.c **** #include <avr/interrupt.h>
   5:tmk_core/common/avr/suspend.c **** #include "matrix.h"
   6:tmk_core/common/avr/suspend.c **** #include "action.h"
   7:tmk_core/common/avr/suspend.c **** #include "backlight.h"
   8:tmk_core/common/avr/suspend.c **** #include "suspend_avr.h"
   9:tmk_core/common/avr/suspend.c **** #include "suspend.h"
  10:tmk_core/common/avr/suspend.c **** #include "timer.h"
  11:tmk_core/common/avr/suspend.c **** #include "led.h"
  12:tmk_core/common/avr/suspend.c **** #include "host.h"
  13:tmk_core/common/avr/suspend.c **** #include "rgblight_reconfig.h"
  14:tmk_core/common/avr/suspend.c **** 
  15:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  16:tmk_core/common/avr/suspend.c **** 	#include "lufa.h"
  17:tmk_core/common/avr/suspend.c **** #endif
  18:tmk_core/common/avr/suspend.c **** 
  19:tmk_core/common/avr/suspend.c **** #ifdef AUDIO_ENABLE
  20:tmk_core/common/avr/suspend.c ****     #include "audio.h"
  21:tmk_core/common/avr/suspend.c **** #endif /* AUDIO_ENABLE */
  22:tmk_core/common/avr/suspend.c **** 
  23:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
  24:tmk_core/common/avr/suspend.c ****   #include "rgblight.h"
  25:tmk_core/common/avr/suspend.c ****   extern rgblight_config_t rgblight_config;
  26:tmk_core/common/avr/suspend.c ****   static bool rgblight_enabled;
  27:tmk_core/common/avr/suspend.c ****   static bool is_suspended;
  28:tmk_core/common/avr/suspend.c **** #endif
  29:tmk_core/common/avr/suspend.c **** 
  30:tmk_core/common/avr/suspend.c **** 
  31:tmk_core/common/avr/suspend.c **** #define wdt_intr_enable(value)   \
  32:tmk_core/common/avr/suspend.c **** __asm__ __volatile__ (  \
  33:tmk_core/common/avr/suspend.c ****     "in __tmp_reg__,__SREG__" "\n\t"    \
  34:tmk_core/common/avr/suspend.c ****     "cli" "\n\t"    \
  35:tmk_core/common/avr/suspend.c ****     "wdr" "\n\t"    \
  36:tmk_core/common/avr/suspend.c ****     "sts %0,%1" "\n\t"  \
  37:tmk_core/common/avr/suspend.c ****     "out __SREG__,__tmp_reg__" "\n\t"   \
  38:tmk_core/common/avr/suspend.c ****     "sts %0,%2" "\n\t" \
  39:tmk_core/common/avr/suspend.c ****     : /* no outputs */  \
  40:tmk_core/common/avr/suspend.c ****     : "M" (_SFR_MEM_ADDR(_WD_CONTROL_REG)), \
  41:tmk_core/common/avr/suspend.c ****     "r" (_BV(_WD_CHANGE_BIT) | _BV(WDE)), \
  42:tmk_core/common/avr/suspend.c ****     "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) | \
  43:tmk_core/common/avr/suspend.c ****         _BV(WDIE) | (value & 0x07)) ) \
  44:tmk_core/common/avr/suspend.c ****     : "r0"  \
  45:tmk_core/common/avr/suspend.c **** )
  46:tmk_core/common/avr/suspend.c **** 
  47:tmk_core/common/avr/suspend.c **** 
  48:tmk_core/common/avr/suspend.c **** /** \brief Suspend idle
  49:tmk_core/common/avr/suspend.c ****  *
  50:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  51:tmk_core/common/avr/suspend.c ****  */
  52:tmk_core/common/avr/suspend.c **** void suspend_idle(uint8_t time) {
  16               		.loc 1 52 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  53:tmk_core/common/avr/suspend.c ****     cli();
  23               		.loc 1 53 0
  24               	/* #APP */
  25               	 ;  53 "tmk_core/common/avr/suspend.c" 1
  26 0000 F894      		cli
  27               	 ;  0 "" 2
  54:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  28               		.loc 1 54 0
  29               	/* #NOAPP */
  30 0002 83B7      		in r24,0x33
  31               	.LVL1:
  32 0004 817F      		andi r24,lo8(-15)
  33 0006 83BF      		out 0x33,r24
  55:tmk_core/common/avr/suspend.c ****     sleep_enable();
  34               		.loc 1 55 0
  35 0008 83B7      		in r24,0x33
  36 000a 8160      		ori r24,lo8(1)
  37 000c 83BF      		out 0x33,r24
  56:tmk_core/common/avr/suspend.c ****     sei();
  38               		.loc 1 56 0
  39               	/* #APP */
  40               	 ;  56 "tmk_core/common/avr/suspend.c" 1
  41 000e 7894      		sei
  42               	 ;  0 "" 2
  57:tmk_core/common/avr/suspend.c ****     sleep_cpu();
  43               		.loc 1 57 0
  44               	 ;  57 "tmk_core/common/avr/suspend.c" 1
  45 0010 8895      		sleep
  46               		
  47               	 ;  0 "" 2
  58:tmk_core/common/avr/suspend.c ****     sleep_disable();
  48               		.loc 1 58 0
  49               	/* #NOAPP */
  50 0012 83B7      		in r24,0x33
  51 0014 8E7F      		andi r24,lo8(-2)
  52 0016 83BF      		out 0x33,r24
  53 0018 0895      		ret
  54               		.cfi_endproc
  55               	.LFE108:
  57               		.section	.text.suspend_power_down_user,"ax",@progbits
  58               		.weak	suspend_power_down_user
  60               	suspend_power_down_user:
  61               	.LFB109:
  59:tmk_core/common/avr/suspend.c **** }
  60:tmk_core/common/avr/suspend.c **** 
  61:tmk_core/common/avr/suspend.c **** 
  62:tmk_core/common/avr/suspend.c **** // TODO: This needs some cleanup
  63:tmk_core/common/avr/suspend.c **** 
  64:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  65:tmk_core/common/avr/suspend.c ****  *
  66:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  67:tmk_core/common/avr/suspend.c ****  */
  68:tmk_core/common/avr/suspend.c **** __attribute__ ((weak))
  69:tmk_core/common/avr/suspend.c **** void suspend_power_down_user (void) { }
  62               		.loc 1 69 0
  63               		.cfi_startproc
  64               	/* prologue: function */
  65               	/* frame size = 0 */
  66               	/* stack size = 0 */
  67               	.L__stack_usage = 0
  68 0000 0895      		ret
  69               		.cfi_endproc
  70               	.LFE109:
  72               		.section	.text.suspend_power_down_kb,"ax",@progbits
  73               		.weak	suspend_power_down_kb
  75               	suspend_power_down_kb:
  76               	.LFB110:
  70:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  71:tmk_core/common/avr/suspend.c ****  *
  72:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  73:tmk_core/common/avr/suspend.c ****  */
  74:tmk_core/common/avr/suspend.c **** __attribute__ ((weak))
  75:tmk_core/common/avr/suspend.c **** void suspend_power_down_kb(void) {
  77               		.loc 1 75 0
  78               		.cfi_startproc
  79               	/* prologue: function */
  80               	/* frame size = 0 */
  81               	/* stack size = 0 */
  82               	.L__stack_usage = 0
  76:tmk_core/common/avr/suspend.c ****   suspend_power_down_user();
  83               		.loc 1 76 0
  84 0000 0C94 0000 		jmp suspend_power_down_user
  85               	.LVL2:
  86               		.cfi_endproc
  87               	.LFE110:
  89               		.section	.text.suspend_power_down,"ax",@progbits
  90               	.global	suspend_power_down
  92               	suspend_power_down:
  93               	.LFB112:
  77:tmk_core/common/avr/suspend.c **** }
  78:tmk_core/common/avr/suspend.c **** 
  79:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
  80:tmk_core/common/avr/suspend.c **** /** \brief Power down MCU with watchdog timer
  81:tmk_core/common/avr/suspend.c ****  *
  82:tmk_core/common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  83:tmk_core/common/avr/suspend.c ****  *          WDTO_15MS
  84:tmk_core/common/avr/suspend.c ****  *          WDTO_30MS
  85:tmk_core/common/avr/suspend.c ****  *          WDTO_60MS
  86:tmk_core/common/avr/suspend.c ****  *          WDTO_120MS
  87:tmk_core/common/avr/suspend.c ****  *          WDTO_250MS
  88:tmk_core/common/avr/suspend.c ****  *          WDTO_500MS
  89:tmk_core/common/avr/suspend.c ****  *          WDTO_1S
  90:tmk_core/common/avr/suspend.c ****  *          WDTO_2S
  91:tmk_core/common/avr/suspend.c ****  *          WDTO_4S
  92:tmk_core/common/avr/suspend.c ****  *          WDTO_8S
  93:tmk_core/common/avr/suspend.c ****  */
  94:tmk_core/common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  95:tmk_core/common/avr/suspend.c **** 
  96:tmk_core/common/avr/suspend.c **** /** \brief Power down
  97:tmk_core/common/avr/suspend.c ****  *
  98:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  99:tmk_core/common/avr/suspend.c ****  */
 100:tmk_core/common/avr/suspend.c **** static void power_down(uint8_t wdto) {
 101:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
 102:tmk_core/common/avr/suspend.c ****   if (USB_DeviceState == DEVICE_STATE_Configured) return;
 103:tmk_core/common/avr/suspend.c **** #endif
 104:tmk_core/common/avr/suspend.c ****   wdt_timeout = wdto;
 105:tmk_core/common/avr/suspend.c **** 
 106:tmk_core/common/avr/suspend.c ****   // Watchdog Interrupt Mode
 107:tmk_core/common/avr/suspend.c ****   wdt_intr_enable(wdto);
 108:tmk_core/common/avr/suspend.c **** 
 109:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 110:tmk_core/common/avr/suspend.c ****   backlight_set(0);
 111:tmk_core/common/avr/suspend.c **** #endif
 112:tmk_core/common/avr/suspend.c **** 
 113:tmk_core/common/avr/suspend.c ****   // Turn off LED indicators
 114:tmk_core/common/avr/suspend.c ****   uint8_t leds_off = 0;
 115:tmk_core/common/avr/suspend.c **** #if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 116:tmk_core/common/avr/suspend.c ****   if (is_backlight_enabled()) {
 117:tmk_core/common/avr/suspend.c ****     // Don't try to turn off Caps Lock indicator as it is backlight and backlight is already off
 118:tmk_core/common/avr/suspend.c ****     leds_off |= (1<<USB_LED_CAPS_LOCK);
 119:tmk_core/common/avr/suspend.c ****   }
 120:tmk_core/common/avr/suspend.c **** #endif
 121:tmk_core/common/avr/suspend.c ****   led_set(leds_off);
 122:tmk_core/common/avr/suspend.c **** 
 123:tmk_core/common/avr/suspend.c **** #ifdef AUDIO_ENABLE
 124:tmk_core/common/avr/suspend.c ****   // This sometimes disables the start-up noise, so it's been disabled
 125:tmk_core/common/avr/suspend.c ****   // stop_all_notes();
 126:tmk_core/common/avr/suspend.c **** #endif /* AUDIO_ENABLE */
 127:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 128:tmk_core/common/avr/suspend.c **** #ifdef RGBLIGHT_ANIMATIONS
 129:tmk_core/common/avr/suspend.c ****   rgblight_timer_disable();
 130:tmk_core/common/avr/suspend.c **** #endif
 131:tmk_core/common/avr/suspend.c ****   if (!is_suspended) {
 132:tmk_core/common/avr/suspend.c ****     is_suspended = true;
 133:tmk_core/common/avr/suspend.c ****     rgblight_enabled = rgblight_config.enable;
 134:tmk_core/common/avr/suspend.c ****     rgblight_disable_noeeprom();
 135:tmk_core/common/avr/suspend.c ****   }
 136:tmk_core/common/avr/suspend.c **** #endif
 137:tmk_core/common/avr/suspend.c ****   suspend_power_down_kb();
 138:tmk_core/common/avr/suspend.c **** 
 139:tmk_core/common/avr/suspend.c ****     // TODO: more power saving
 140:tmk_core/common/avr/suspend.c ****     // See PicoPower application note
 141:tmk_core/common/avr/suspend.c ****     // - I/O port input with pullup
 142:tmk_core/common/avr/suspend.c ****     // - prescale clock
 143:tmk_core/common/avr/suspend.c ****     // - BOD disable
 144:tmk_core/common/avr/suspend.c ****     // - Power Reduction Register PRR
 145:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 146:tmk_core/common/avr/suspend.c ****     sleep_enable();
 147:tmk_core/common/avr/suspend.c ****     sei();
 148:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 149:tmk_core/common/avr/suspend.c ****     sleep_disable();
 150:tmk_core/common/avr/suspend.c **** 
 151:tmk_core/common/avr/suspend.c ****     // Disable watchdog after sleep
 152:tmk_core/common/avr/suspend.c ****     wdt_disable();
 153:tmk_core/common/avr/suspend.c **** }
 154:tmk_core/common/avr/suspend.c **** #endif
 155:tmk_core/common/avr/suspend.c **** 
 156:tmk_core/common/avr/suspend.c **** /** \brief Suspend power down
 157:tmk_core/common/avr/suspend.c ****  *
 158:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 159:tmk_core/common/avr/suspend.c ****  */
 160:tmk_core/common/avr/suspend.c **** void suspend_power_down(void) {
  94               		.loc 1 160 0
  95               		.cfi_startproc
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  98               	/* stack size = 0 */
  99               	.L__stack_usage = 0
 161:tmk_core/common/avr/suspend.c **** 	suspend_power_down_kb();
 100               		.loc 1 161 0
 101 0000 0E94 0000 		call suspend_power_down_kb
 102               	.LVL3:
 103               	.LBB11:
 104               	.LBB12:
 102:tmk_core/common/avr/suspend.c **** #endif
 105               		.loc 1 102 0
 106 0004 8091 0000 		lds r24,USB_DeviceState
 107 0008 8430      		cpi r24,lo8(4)
 108 000a 01F0      		breq .L4
 104:tmk_core/common/avr/suspend.c **** 
 109               		.loc 1 104 0
 110 000c 1092 0000 		sts wdt_timeout,__zero_reg__
 107:tmk_core/common/avr/suspend.c **** 
 111               		.loc 1 107 0
 112 0010 20E4      		ldi r18,lo8(64)
 113 0012 88E1      		ldi r24,lo8(24)
 114 0014 90E0      		ldi r25,0
 115               	/* #APP */
 116               	 ;  107 "tmk_core/common/avr/suspend.c" 1
 117 0016 0FB6      		in __tmp_reg__,__SREG__
 118 0018 F894      		cli
 119 001a A895      		wdr
 120 001c 8093 6000 		sts 96,r24
 121 0020 0FBE      		out __SREG__,__tmp_reg__
 122 0022 2093 6000 		sts 96,r18
 123               		
 124               	 ;  0 "" 2
 125               	.LVL4:
 121:tmk_core/common/avr/suspend.c **** 
 126               		.loc 1 121 0
 127               	/* #NOAPP */
 128 0026 80E0      		ldi r24,0
 129 0028 0E94 0000 		call led_set
 130               	.LVL5:
 137:tmk_core/common/avr/suspend.c **** 
 131               		.loc 1 137 0
 132 002c 0E94 0000 		call suspend_power_down_kb
 133               	.LVL6:
 145:tmk_core/common/avr/suspend.c ****     sleep_enable();
 134               		.loc 1 145 0
 135 0030 83B7      		in r24,0x33
 136 0032 817F      		andi r24,lo8(-15)
 137 0034 8460      		ori r24,lo8(4)
 138 0036 83BF      		out 0x33,r24
 146:tmk_core/common/avr/suspend.c ****     sei();
 139               		.loc 1 146 0
 140 0038 83B7      		in r24,0x33
 141 003a 8160      		ori r24,lo8(1)
 142 003c 83BF      		out 0x33,r24
 147:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 143               		.loc 1 147 0
 144               	/* #APP */
 145               	 ;  147 "tmk_core/common/avr/suspend.c" 1
 146 003e 7894      		sei
 147               	 ;  0 "" 2
 148:tmk_core/common/avr/suspend.c ****     sleep_disable();
 148               		.loc 1 148 0
 149               	 ;  148 "tmk_core/common/avr/suspend.c" 1
 150 0040 8895      		sleep
 151               		
 152               	 ;  0 "" 2
 149:tmk_core/common/avr/suspend.c **** 
 153               		.loc 1 149 0
 154               	/* #NOAPP */
 155 0042 83B7      		in r24,0x33
 156 0044 8E7F      		andi r24,lo8(-2)
 157 0046 83BF      		out 0x33,r24
 158               	.LBB13:
 159               	.LBB14:
 160               		.file 2 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** 
 102:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 103:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** #else
 105:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 106:/usr/lib/avr/include/avr/wdt.h **** #endif
 107:/usr/lib/avr/include/avr/wdt.h **** 
 108:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 109:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 110:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 111:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 112:/usr/lib/avr/include/avr/wdt.h **** #else
 113:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 114:/usr/lib/avr/include/avr/wdt.h **** #endif
 115:/usr/lib/avr/include/avr/wdt.h **** 
 116:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 117:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 118:/usr/lib/avr/include/avr/wdt.h **** #else
 119:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 120:/usr/lib/avr/include/avr/wdt.h **** #endif
 121:/usr/lib/avr/include/avr/wdt.h **** 
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** /**
 124:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 125:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 126:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 127:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 128:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 129:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 130:/usr/lib/avr/include/avr/wdt.h **** 
 131:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 132:/usr/lib/avr/include/avr/wdt.h **** */
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h **** 
 135:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** /*
 138:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 139:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 140:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 141:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 142:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 143:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 144:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 145:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 146:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 147:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 148:/usr/lib/avr/include/avr/wdt.h **** */
 149:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 150:/usr/lib/avr/include/avr/wdt.h **** do { \
 151:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 152:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 153:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 155:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 156:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 157:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 158:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 159:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 160:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 161:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 162:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 163:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 164:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 165:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 166:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 167:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 168:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 169:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 170:/usr/lib/avr/include/avr/wdt.h **** ); \
 171:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 172:/usr/lib/avr/include/avr/wdt.h **** 
 173:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 174:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 175:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 176:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 177:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 178:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 179:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 180:/usr/lib/avr/include/avr/wdt.h ****     : \
 181:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 182:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 183:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 184:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 185:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 186:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 187:/usr/lib/avr/include/avr/wdt.h **** );
 188:/usr/lib/avr/include/avr/wdt.h **** 
 189:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 190:/usr/lib/avr/include/avr/wdt.h **** 
 191:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 192:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 193:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 194:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 195:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 196:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 197:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 198:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 199:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 200:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 201:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 202:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 203:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 204:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 205:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 206:/usr/lib/avr/include/avr/wdt.h **** )
 207:/usr/lib/avr/include/avr/wdt.h **** 
 208:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 209:/usr/lib/avr/include/avr/wdt.h **** do { \
 210:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 211:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 212:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 213:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 214:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 215:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 216:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 217:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 218:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 219:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 220:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 221:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 222:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 223:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 224:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 225:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 226:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 227:/usr/lib/avr/include/avr/wdt.h **** ); \
 228:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 229:/usr/lib/avr/include/avr/wdt.h **** 
 230:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 231:/usr/lib/avr/include/avr/wdt.h **** 
 232:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 233:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 234:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 235:/usr/lib/avr/include/avr/wdt.h **** {
 236:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 237:/usr/lib/avr/include/avr/wdt.h **** 	{
 238:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 239:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 240:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 241:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 242:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 243:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 244:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 245:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 246:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 247:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 248:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 249:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 250:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 251:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 252:/usr/lib/avr/include/avr/wdt.h **** 			);
 253:/usr/lib/avr/include/avr/wdt.h **** 	}
 254:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 255:/usr/lib/avr/include/avr/wdt.h **** 	{
 256:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 257:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 258:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 259:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 260:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 261:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 262:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 263:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 264:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 265:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 266:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 267:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 268:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 269:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 270:/usr/lib/avr/include/avr/wdt.h **** 			);
 271:/usr/lib/avr/include/avr/wdt.h **** 	}
 272:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 273:/usr/lib/avr/include/avr/wdt.h **** 	{
 274:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 275:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 276:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 277:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 278:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 279:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 280:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 281:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 282:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 283:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 284:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 285:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 286:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 287:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 288:/usr/lib/avr/include/avr/wdt.h **** 			);
 289:/usr/lib/avr/include/avr/wdt.h **** 	}
 290:/usr/lib/avr/include/avr/wdt.h **** 	else
 291:/usr/lib/avr/include/avr/wdt.h ****  	{
 292:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 293:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 294:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 295:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 296:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 297:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 298:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 299:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 300:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 301:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 302:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 303:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 304:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 305:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 306:/usr/lib/avr/include/avr/wdt.h **** 			);
 307:/usr/lib/avr/include/avr/wdt.h **** 	}
 308:/usr/lib/avr/include/avr/wdt.h **** }
 309:/usr/lib/avr/include/avr/wdt.h **** 
 310:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 311:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 312:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 313:/usr/lib/avr/include/avr/wdt.h **** {
 314:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 315:/usr/lib/avr/include/avr/wdt.h **** 	{
 316:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 317:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 318:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 319:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 320:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 321:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 322:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 323:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 327:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 328:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 329:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 330:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 331:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 332:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 333:/usr/lib/avr/include/avr/wdt.h **** 				);
 334:/usr/lib/avr/include/avr/wdt.h **** 	}
 335:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 336:/usr/lib/avr/include/avr/wdt.h **** 	{
 337:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 338:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 339:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 340:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 341:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 348:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 352:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 353:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 				);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 357:/usr/lib/avr/include/avr/wdt.h **** 	{
 358:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 359:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 360:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 361:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 362:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 363:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 364:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 365:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 366:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 369:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 370:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 371:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 372:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 373:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 374:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 375:/usr/lib/avr/include/avr/wdt.h **** 				);
 376:/usr/lib/avr/include/avr/wdt.h **** 	}
 377:/usr/lib/avr/include/avr/wdt.h **** 	else
 378:/usr/lib/avr/include/avr/wdt.h **** 	{
 379:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 380:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 381:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 382:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 383:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 384:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 385:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 386:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 387:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 390:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 391:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 392:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 393:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 394:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 395:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 396:/usr/lib/avr/include/avr/wdt.h **** 				);
 397:/usr/lib/avr/include/avr/wdt.h **** 	}
 398:/usr/lib/avr/include/avr/wdt.h **** }
 399:/usr/lib/avr/include/avr/wdt.h **** 
 400:/usr/lib/avr/include/avr/wdt.h **** #else
 401:/usr/lib/avr/include/avr/wdt.h **** 
 402:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 403:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 404:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 405:/usr/lib/avr/include/avr/wdt.h **** {
 406:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 407:/usr/lib/avr/include/avr/wdt.h **** 	{
 408:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 409:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 416:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 417:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 418:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 419:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 420:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 421:/usr/lib/avr/include/avr/wdt.h **** 		);
 422:/usr/lib/avr/include/avr/wdt.h **** 	}
 423:/usr/lib/avr/include/avr/wdt.h **** 	else
 424:/usr/lib/avr/include/avr/wdt.h **** 	{
 425:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 426:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 427:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 428:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 429:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 433:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 434:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 435:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 436:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 437:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 438:/usr/lib/avr/include/avr/wdt.h **** 		);
 439:/usr/lib/avr/include/avr/wdt.h **** 	}
 440:/usr/lib/avr/include/avr/wdt.h **** }
 441:/usr/lib/avr/include/avr/wdt.h **** 
 442:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 443:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 444:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 445:/usr/lib/avr/include/avr/wdt.h **** {
 446:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 447:/usr/lib/avr/include/avr/wdt.h **** 	{
 448:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 449:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 450:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 451:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 452:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 453:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 454:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 455:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 456:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 457:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 459:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 460:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 461:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 462:/usr/lib/avr/include/avr/wdt.h **** 		);
 463:/usr/lib/avr/include/avr/wdt.h **** 	}
 464:/usr/lib/avr/include/avr/wdt.h **** 	else
 465:/usr/lib/avr/include/avr/wdt.h **** 	{
 466:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 467:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 161               		.loc 2 467 0
 162               	/* #APP */
 163               	 ;  467 "/usr/lib/avr/include/avr/wdt.h" 1
 164 0048 0FB6      		in __tmp_reg__,__SREG__
 165 004a F894      		cli
 166 004c A895      		wdr
 167 004e 8091 6000 		lds r24,96
 168 0052 8861      		ori r24,24
 169 0054 8093 6000 		sts 96,r24
 170 0058 1092 6000 		sts 96,__zero_reg__
 171 005c 0FBE      		out __SREG__,__tmp_reg__
 172               		
 173               	 ;  0 "" 2
 174               	.LVL7:
 175               	/* #NOAPP */
 176               	.L4:
 177 005e 0895      		ret
 178               	.LBE14:
 179               	.LBE13:
 180               	.LBE12:
 181               	.LBE11:
 182               		.cfi_endproc
 183               	.LFE112:
 185               		.section	.text.matrix_power_up,"ax",@progbits
 186               		.weak	matrix_power_up
 188               	matrix_power_up:
 189               	.LFB113:
 162:tmk_core/common/avr/suspend.c **** 
 163:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 164:tmk_core/common/avr/suspend.c ****     power_down(WDTO_15MS);
 165:tmk_core/common/avr/suspend.c **** #endif
 166:tmk_core/common/avr/suspend.c **** }
 167:tmk_core/common/avr/suspend.c **** 
 168:tmk_core/common/avr/suspend.c **** __attribute__ ((weak)) void matrix_power_up(void) {}
 190               		.loc 1 168 0
 191               		.cfi_startproc
 192               	/* prologue: function */
 193               	/* frame size = 0 */
 194               	/* stack size = 0 */
 195               	.L__stack_usage = 0
 196 0000 0895      		ret
 197               		.cfi_endproc
 198               	.LFE113:
 200               		.section	.text.matrix_power_down,"ax",@progbits
 201               		.weak	matrix_power_down
 203               	matrix_power_down:
 204               	.LFB114:
 169:tmk_core/common/avr/suspend.c **** __attribute__ ((weak)) void matrix_power_down(void) {}
 205               		.loc 1 169 0
 206               		.cfi_startproc
 207               	/* prologue: function */
 208               	/* frame size = 0 */
 209               	/* stack size = 0 */
 210               	.L__stack_usage = 0
 211 0000 0895      		ret
 212               		.cfi_endproc
 213               	.LFE114:
 215               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 216               	.global	suspend_wakeup_condition
 218               	suspend_wakeup_condition:
 219               	.LFB115:
 170:tmk_core/common/avr/suspend.c **** bool suspend_wakeup_condition(void) {
 220               		.loc 1 170 0
 221               		.cfi_startproc
 222               		.loc 1 170 0
 223 0000 CF93      		push r28
 224               	.LCFI0:
 225               		.cfi_def_cfa_offset 3
 226               		.cfi_offset 28, -2
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 1 */
 230               	.L__stack_usage = 1
 171:tmk_core/common/avr/suspend.c ****     matrix_power_up();
 231               		.loc 1 171 0
 232 0002 0E94 0000 		call matrix_power_up
 233               	.LVL8:
 172:tmk_core/common/avr/suspend.c ****     matrix_scan();
 234               		.loc 1 172 0
 235 0006 0E94 0000 		call matrix_scan
 236               	.LVL9:
 173:tmk_core/common/avr/suspend.c ****     matrix_power_down();
 237               		.loc 1 173 0
 238 000a 0E94 0000 		call matrix_power_down
 239               	.LVL10:
 240               	.LBB15:
 174:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 241               		.loc 1 174 0
 242 000e C0E0      		ldi r28,0
 243               	.LVL11:
 244               	.L14:
 175:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 245               		.loc 1 175 0
 246 0010 8C2F      		mov r24,r28
 247 0012 0E94 0000 		call matrix_get_row
 248               	.LVL12:
 249 0016 8111      		cpse r24,__zero_reg__
 250 0018 00C0      		rjmp .L15
 174:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 251               		.loc 1 174 0 discriminator 2
 252 001a CF5F      		subi r28,lo8(-(1))
 253               	.LVL13:
 254 001c CA30      		cpi r28,lo8(10)
 255 001e 01F4      		brne .L14
 256 0020 00C0      		rjmp .L13
 257               	.L15:
 258               		.loc 1 175 0
 259 0022 81E0      		ldi r24,lo8(1)
 260               	.L13:
 261               	/* epilogue start */
 262               	.LBE15:
 176:tmk_core/common/avr/suspend.c ****     }
 177:tmk_core/common/avr/suspend.c ****      return false;
 178:tmk_core/common/avr/suspend.c **** }
 263               		.loc 1 178 0
 264 0024 CF91      		pop r28
 265               	.LVL14:
 266 0026 0895      		ret
 267               		.cfi_endproc
 268               	.LFE115:
 270               		.section	.text.suspend_wakeup_init_user,"ax",@progbits
 271               		.weak	suspend_wakeup_init_user
 273               	suspend_wakeup_init_user:
 274               	.LFB116:
 179:tmk_core/common/avr/suspend.c **** 
 180:tmk_core/common/avr/suspend.c **** /** \brief run user level code immediately after wakeup
 181:tmk_core/common/avr/suspend.c ****  *
 182:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 183:tmk_core/common/avr/suspend.c ****  */
 184:tmk_core/common/avr/suspend.c **** __attribute__ ((weak))
 185:tmk_core/common/avr/suspend.c **** void suspend_wakeup_init_user(void) { }
 275               		.loc 1 185 0
 276               		.cfi_startproc
 277               	/* prologue: function */
 278               	/* frame size = 0 */
 279               	/* stack size = 0 */
 280               	.L__stack_usage = 0
 281 0000 0895      		ret
 282               		.cfi_endproc
 283               	.LFE116:
 285               		.section	.text.suspend_wakeup_init_kb,"ax",@progbits
 286               		.weak	suspend_wakeup_init_kb
 288               	suspend_wakeup_init_kb:
 289               	.LFB117:
 186:tmk_core/common/avr/suspend.c **** 
 187:tmk_core/common/avr/suspend.c **** /** \brief run keyboard level code immediately after wakeup
 188:tmk_core/common/avr/suspend.c ****  *
 189:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 190:tmk_core/common/avr/suspend.c ****  */
 191:tmk_core/common/avr/suspend.c **** __attribute__ ((weak))
 192:tmk_core/common/avr/suspend.c **** void suspend_wakeup_init_kb(void) {
 290               		.loc 1 192 0
 291               		.cfi_startproc
 292               	/* prologue: function */
 293               	/* frame size = 0 */
 294               	/* stack size = 0 */
 295               	.L__stack_usage = 0
 193:tmk_core/common/avr/suspend.c ****   suspend_wakeup_init_user();
 296               		.loc 1 193 0
 297 0000 0C94 0000 		jmp suspend_wakeup_init_user
 298               	.LVL15:
 299               		.cfi_endproc
 300               	.LFE117:
 302               		.section	.text.suspend_wakeup_init,"ax",@progbits
 303               	.global	suspend_wakeup_init
 305               	suspend_wakeup_init:
 306               	.LFB118:
 194:tmk_core/common/avr/suspend.c **** }
 195:tmk_core/common/avr/suspend.c **** /** \brief run immediately after wakeup
 196:tmk_core/common/avr/suspend.c ****  *
 197:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 198:tmk_core/common/avr/suspend.c ****  */
 199:tmk_core/common/avr/suspend.c **** void suspend_wakeup_init(void) {
 307               		.loc 1 199 0
 308               		.cfi_startproc
 309               	/* prologue: function */
 310               	/* frame size = 0 */
 311               	/* stack size = 0 */
 312               	.L__stack_usage = 0
 200:tmk_core/common/avr/suspend.c ****     // clear keyboard state
 201:tmk_core/common/avr/suspend.c ****     clear_keyboard();
 313               		.loc 1 201 0
 314 0000 0E94 0000 		call clear_keyboard
 315               	.LVL16:
 202:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 203:tmk_core/common/avr/suspend.c ****     backlight_init();
 204:tmk_core/common/avr/suspend.c **** #endif
 205:tmk_core/common/avr/suspend.c **** 	led_set(host_keyboard_leds());
 316               		.loc 1 205 0
 317 0004 0E94 0000 		call host_keyboard_leds
 318               	.LVL17:
 319 0008 0E94 0000 		call led_set
 320               	.LVL18:
 206:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 207:tmk_core/common/avr/suspend.c ****   is_suspended = false;
 208:tmk_core/common/avr/suspend.c ****   if (rgblight_enabled) {
 209:tmk_core/common/avr/suspend.c ****     #ifdef BOOTLOADER_TEENSY
 210:tmk_core/common/avr/suspend.c ****       wait_ms(10);
 211:tmk_core/common/avr/suspend.c ****     #endif
 212:tmk_core/common/avr/suspend.c ****     rgblight_enable_noeeprom();
 213:tmk_core/common/avr/suspend.c ****   }
 214:tmk_core/common/avr/suspend.c **** #ifdef RGBLIGHT_ANIMATIONS
 215:tmk_core/common/avr/suspend.c ****   rgblight_timer_enable();
 216:tmk_core/common/avr/suspend.c **** #endif
 217:tmk_core/common/avr/suspend.c **** #endif
 218:tmk_core/common/avr/suspend.c ****     suspend_wakeup_init_kb();
 321               		.loc 1 218 0
 322 000c 0C94 0000 		jmp suspend_wakeup_init_kb
 323               	.LVL19:
 324               		.cfi_endproc
 325               	.LFE118:
 327               		.section	.text.__vector_12,"ax",@progbits
 328               	.global	__vector_12
 330               	__vector_12:
 331               	.LFB119:
 219:tmk_core/common/avr/suspend.c **** }
 220:tmk_core/common/avr/suspend.c **** 
 221:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 222:tmk_core/common/avr/suspend.c **** /* watchdog timeout */
 223:tmk_core/common/avr/suspend.c **** ISR(WDT_vect) {
 332               		.loc 1 223 0
 333               		.cfi_startproc
 334 0000 1F92      		push r1
 335               	.LCFI1:
 336               		.cfi_def_cfa_offset 3
 337               		.cfi_offset 1, -2
 338 0002 0F92      		push r0
 339               	.LCFI2:
 340               		.cfi_def_cfa_offset 4
 341               		.cfi_offset 0, -3
 342 0004 0FB6      		in r0,__SREG__
 343 0006 0F92      		push r0
 344 0008 1124      		clr __zero_reg__
 345 000a 8F93      		push r24
 346               	.LCFI3:
 347               		.cfi_def_cfa_offset 5
 348               		.cfi_offset 24, -4
 349 000c 9F93      		push r25
 350               	.LCFI4:
 351               		.cfi_def_cfa_offset 6
 352               		.cfi_offset 25, -5
 353 000e AF93      		push r26
 354               	.LCFI5:
 355               		.cfi_def_cfa_offset 7
 356               		.cfi_offset 26, -6
 357 0010 BF93      		push r27
 358               	.LCFI6:
 359               		.cfi_def_cfa_offset 8
 360               		.cfi_offset 27, -7
 361               	/* prologue: Signal */
 362               	/* frame size = 0 */
 363               	/* stack size = 7 */
 364               	.L__stack_usage = 7
 224:tmk_core/common/avr/suspend.c ****     // compensate timer for sleep
 225:tmk_core/common/avr/suspend.c ****     switch (wdt_timeout) {
 365               		.loc 1 225 0
 366 0012 8091 0000 		lds r24,wdt_timeout
 367 0016 8111      		cpse r24,__zero_reg__
 368 0018 00C0      		rjmp .L20
 226:tmk_core/common/avr/suspend.c ****         case WDTO_15MS:
 227:tmk_core/common/avr/suspend.c ****             timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
 369               		.loc 1 227 0
 370 001a 8091 0000 		lds r24,timer_count
 371 001e 9091 0000 		lds r25,timer_count+1
 372 0022 A091 0000 		lds r26,timer_count+2
 373 0026 B091 0000 		lds r27,timer_count+3
 374 002a 4196      		adiw r24,17
 375 002c A11D      		adc r26,__zero_reg__
 376 002e B11D      		adc r27,__zero_reg__
 377 0030 8093 0000 		sts timer_count,r24
 378 0034 9093 0000 		sts timer_count+1,r25
 379 0038 A093 0000 		sts timer_count+2,r26
 380 003c B093 0000 		sts timer_count+3,r27
 381               	.L20:
 382               	/* epilogue start */
 228:tmk_core/common/avr/suspend.c ****             break;
 229:tmk_core/common/avr/suspend.c ****         default:
 230:tmk_core/common/avr/suspend.c ****             ;
 231:tmk_core/common/avr/suspend.c ****     }
 232:tmk_core/common/avr/suspend.c **** }
 383               		.loc 1 232 0
 384 0040 BF91      		pop r27
 385 0042 AF91      		pop r26
 386 0044 9F91      		pop r25
 387 0046 8F91      		pop r24
 388 0048 0F90      		pop r0
 389 004a 0FBE      		out __SREG__,r0
 390 004c 0F90      		pop r0
 391 004e 1F90      		pop r1
 392 0050 1895      		reti
 393               		.cfi_endproc
 394               	.LFE119:
 396               		.section	.bss.wdt_timeout,"aw",@nobits
 399               	wdt_timeout:
 400 0000 00        		.zero	1
 401               		.text
 402               	.Letext0:
 403               		.file 3 "/usr/lib/avr/include/stdint.h"
 404               		.file 4 "tmk_core/common/matrix.h"
 405               		.file 5 "tmk_core/common/timer.h"
 406               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 407               		.file 7 "tmk_core/common/host.h"
 408               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 409               		.file 9 "tmk_core/common/led.h"
 410               		.file 10 "tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 suspend.c
     /tmp/ccotiwf0.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccotiwf0.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccotiwf0.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccotiwf0.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccotiwf0.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccotiwf0.s:13     .text.suspend_idle:0000000000000000 suspend_idle
     /tmp/ccotiwf0.s:60     .text.suspend_power_down_user:0000000000000000 suspend_power_down_user
     /tmp/ccotiwf0.s:75     .text.suspend_power_down_kb:0000000000000000 suspend_power_down_kb
     /tmp/ccotiwf0.s:92     .text.suspend_power_down:0000000000000000 suspend_power_down
     /tmp/ccotiwf0.s:399    .bss.wdt_timeout:0000000000000000 wdt_timeout
     /tmp/ccotiwf0.s:188    .text.matrix_power_up:0000000000000000 matrix_power_up
     /tmp/ccotiwf0.s:203    .text.matrix_power_down:0000000000000000 matrix_power_down
     /tmp/ccotiwf0.s:218    .text.suspend_wakeup_condition:0000000000000000 suspend_wakeup_condition
     /tmp/ccotiwf0.s:273    .text.suspend_wakeup_init_user:0000000000000000 suspend_wakeup_init_user
     /tmp/ccotiwf0.s:288    .text.suspend_wakeup_init_kb:0000000000000000 suspend_wakeup_init_kb
     /tmp/ccotiwf0.s:305    .text.suspend_wakeup_init:0000000000000000 suspend_wakeup_init
     /tmp/ccotiwf0.s:330    .text.__vector_12:0000000000000000 __vector_12

UNDEFINED SYMBOLS
USB_DeviceState
led_set
matrix_scan
matrix_get_row
clear_keyboard
host_keyboard_leds
timer_count
__do_clear_bss
