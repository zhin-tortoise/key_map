   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.disable_jtag,"ax",@progbits
  11               	.global	disable_jtag
  13               	disable_jtag:
  14               	.LFB4:
  15               		.file 1 "tmk_core/common/keyboard.c"
   1:tmk_core/common/keyboard.c **** /*
   2:tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.c **** 
   4:tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.c **** (at your option) any later version.
   8:tmk_core/common/keyboard.c **** 
   9:tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.c **** 
  14:tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.c **** */
  17:tmk_core/common/keyboard.c **** 
  18:tmk_core/common/keyboard.c **** #include <stdint.h>
  19:tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:tmk_core/common/keyboard.c **** #include "matrix.h"
  21:tmk_core/common/keyboard.c **** #include "keymap.h"
  22:tmk_core/common/keyboard.c **** #include "host.h"
  23:tmk_core/common/keyboard.c **** #include "led.h"
  24:tmk_core/common/keyboard.c **** #include "keycode.h"
  25:tmk_core/common/keyboard.c **** #include "timer.h"
  26:tmk_core/common/keyboard.c **** #include "print.h"
  27:tmk_core/common/keyboard.c **** #include "debug.h"
  28:tmk_core/common/keyboard.c **** #include "command.h"
  29:tmk_core/common/keyboard.c **** #include "util.h"
  30:tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:tmk_core/common/keyboard.c **** #include "backlight.h"
  33:tmk_core/common/keyboard.c **** #include "action_layer.h"
  34:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  35:tmk_core/common/keyboard.c **** #   include "bootmagic.h"
  36:tmk_core/common/keyboard.c **** #else
  37:tmk_core/common/keyboard.c **** #   include "magic.h"
  38:tmk_core/common/keyboard.c **** #endif
  39:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  40:tmk_core/common/keyboard.c **** #   include "mousekey.h"
  41:tmk_core/common/keyboard.c **** #endif
  42:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  43:tmk_core/common/keyboard.c **** #   include "ps2_mouse.h"
  44:tmk_core/common/keyboard.c **** #endif
  45:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  46:tmk_core/common/keyboard.c **** #   include "serial_mouse.h"
  47:tmk_core/common/keyboard.c **** #endif
  48:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  49:tmk_core/common/keyboard.c **** #   include "adb.h"
  50:tmk_core/common/keyboard.c **** #endif
  51:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  52:tmk_core/common/keyboard.c **** #   include "rgblight.h"
  53:tmk_core/common/keyboard.c **** #endif
  54:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  55:tmk_core/common/keyboard.c **** #   include "process_steno.h"
  56:tmk_core/common/keyboard.c **** #endif
  57:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  58:tmk_core/common/keyboard.c **** #   include "fauxclicky.h"
  59:tmk_core/common/keyboard.c **** #endif
  60:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  61:tmk_core/common/keyboard.c **** #   include "serial_link/system/serial_link.h"
  62:tmk_core/common/keyboard.c **** #endif
  63:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  64:tmk_core/common/keyboard.c **** #   include "visualizer/visualizer.h"
  65:tmk_core/common/keyboard.c **** #endif
  66:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  67:tmk_core/common/keyboard.c **** #   include "pointing_device.h"
  68:tmk_core/common/keyboard.c **** #endif
  69:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  70:tmk_core/common/keyboard.c **** #   include "process_midi.h"
  71:tmk_core/common/keyboard.c **** #endif
  72:tmk_core/common/keyboard.c **** #ifdef HD44780_ENABLE
  73:tmk_core/common/keyboard.c **** #   include "hd44780.h"
  74:tmk_core/common/keyboard.c **** #endif
  75:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
  76:tmk_core/common/keyboard.c **** #   include "qwiic.h"
  77:tmk_core/common/keyboard.c **** #endif
  78:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
  79:tmk_core/common/keyboard.c ****   #include "velocikey.h"
  80:tmk_core/common/keyboard.c **** #endif
  81:tmk_core/common/keyboard.c **** 
  82:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  83:tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
  84:tmk_core/common/keyboard.c **** static matrix_row_t get_real_keys(uint8_t row, matrix_row_t rowdata){
  85:tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
  86:tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
  87:tmk_core/common/keyboard.c ****         //read each key in the row data and check if the keymap defines it as a real key
  88:tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1<<col))){
  89:tmk_core/common/keyboard.c ****             //this creates new row data, if a key is defined in the keymap, it will be set here
  90:tmk_core/common/keyboard.c ****             out |= 1<<col;
  91:tmk_core/common/keyboard.c ****         }
  92:tmk_core/common/keyboard.c ****     }
  93:tmk_core/common/keyboard.c ****     return out;
  94:tmk_core/common/keyboard.c **** }
  95:tmk_core/common/keyboard.c **** 
  96:tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata)
  97:tmk_core/common/keyboard.c **** {
  98:tmk_core/common/keyboard.c ****     rowdata &= rowdata-1; //if there are less than two bits (keys) set, rowdata will become zero
  99:tmk_core/common/keyboard.c ****     return rowdata;
 100:tmk_core/common/keyboard.c **** }
 101:tmk_core/common/keyboard.c **** 
 102:tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata)
 103:tmk_core/common/keyboard.c **** {
 104:tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
 105:tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
 106:tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
 107:tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
 108:tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 109:tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0){
 110:tmk_core/common/keyboard.c ****         return false;
 111:tmk_core/common/keyboard.c ****     }
 112:tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 113:tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 114:tmk_core/common/keyboard.c ****     so they are filtered out.
 115:tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 116:tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 117:tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 118:tmk_core/common/keyboard.c ****     */
 119:tmk_core/common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 120:tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)){
 121:tmk_core/common/keyboard.c ****             return true;
 122:tmk_core/common/keyboard.c ****         }
 123:tmk_core/common/keyboard.c ****     }
 124:tmk_core/common/keyboard.c ****     return false;
 125:tmk_core/common/keyboard.c **** }
 126:tmk_core/common/keyboard.c **** 
 127:tmk_core/common/keyboard.c **** #endif
 128:tmk_core/common/keyboard.c **** 
 129:tmk_core/common/keyboard.c **** void disable_jtag(void) {
  16               		.loc 1 129 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 130:tmk_core/common/keyboard.c **** // To use PORTF disable JTAG with writing JTD bit twice within four cycles.
 131:tmk_core/common/keyboard.c **** #if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__) || defined(__AVR_ATmega32U4__))
 132:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
  22               		.loc 1 132 0
  23 0000 85B7      		in r24,0x35
  24 0002 8068      		ori r24,lo8(-128)
  25 0004 85BF      		out 0x35,r24
 133:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
  26               		.loc 1 133 0
  27 0006 85B7      		in r24,0x35
  28 0008 8068      		ori r24,lo8(-128)
  29 000a 85BF      		out 0x35,r24
  30 000c 0895      		ret
  31               		.cfi_endproc
  32               	.LFE4:
  34               		.section	.text.matrix_setup,"ax",@progbits
  35               		.weak	matrix_setup
  37               	matrix_setup:
  38               	.LFB5:
 134:tmk_core/common/keyboard.c **** #endif
 135:tmk_core/common/keyboard.c **** }
 136:tmk_core/common/keyboard.c **** 
 137:tmk_core/common/keyboard.c **** /** \brief matrix_setup
 138:tmk_core/common/keyboard.c ****  *
 139:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 140:tmk_core/common/keyboard.c ****  */
 141:tmk_core/common/keyboard.c **** __attribute__ ((weak))
 142:tmk_core/common/keyboard.c **** void matrix_setup(void) {
  39               		.loc 1 142 0
  40               		.cfi_startproc
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
  45 0000 0895      		ret
  46               		.cfi_endproc
  47               	.LFE5:
  49               		.section	.text.keyboard_pre_init_user,"ax",@progbits
  50               		.weak	keyboard_pre_init_user
  52               	keyboard_pre_init_user:
  53               	.LFB6:
 143:tmk_core/common/keyboard.c **** }
 144:tmk_core/common/keyboard.c **** 
 145:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_user
 146:tmk_core/common/keyboard.c ****  *
 147:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 148:tmk_core/common/keyboard.c ****  */
 149:tmk_core/common/keyboard.c **** __attribute__ ((weak))
 150:tmk_core/common/keyboard.c **** void keyboard_pre_init_user(void) { }
  54               		.loc 1 150 0
  55               		.cfi_startproc
  56               	/* prologue: function */
  57               	/* frame size = 0 */
  58               	/* stack size = 0 */
  59               	.L__stack_usage = 0
  60 0000 0895      		ret
  61               		.cfi_endproc
  62               	.LFE6:
  64               		.section	.text.keyboard_pre_init_kb,"ax",@progbits
  65               		.weak	keyboard_pre_init_kb
  67               	keyboard_pre_init_kb:
  68               	.LFB7:
 151:tmk_core/common/keyboard.c **** 
 152:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_kb
 153:tmk_core/common/keyboard.c ****  *
 154:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 155:tmk_core/common/keyboard.c ****  */
 156:tmk_core/common/keyboard.c **** __attribute__ ((weak))
 157:tmk_core/common/keyboard.c **** void keyboard_pre_init_kb(void) {
  69               		.loc 1 157 0
  70               		.cfi_startproc
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
 158:tmk_core/common/keyboard.c ****   keyboard_pre_init_user();
  75               		.loc 1 158 0
  76 0000 0C94 0000 		jmp keyboard_pre_init_user
  77               	.LVL0:
  78               		.cfi_endproc
  79               	.LFE7:
  81               		.section	.text.keyboard_post_init_user,"ax",@progbits
  82               		.weak	keyboard_post_init_user
  84               	keyboard_post_init_user:
  85               	.LFB8:
 159:tmk_core/common/keyboard.c **** }
 160:tmk_core/common/keyboard.c **** 
 161:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_user
 162:tmk_core/common/keyboard.c ****  *
 163:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 164:tmk_core/common/keyboard.c ****  */
 165:tmk_core/common/keyboard.c **** 
 166:tmk_core/common/keyboard.c **** __attribute__ ((weak))
 167:tmk_core/common/keyboard.c **** void keyboard_post_init_user() {}
  86               		.loc 1 167 0
  87               		.cfi_startproc
  88               	/* prologue: function */
  89               	/* frame size = 0 */
  90               	/* stack size = 0 */
  91               	.L__stack_usage = 0
  92 0000 0895      		ret
  93               		.cfi_endproc
  94               	.LFE8:
  96               		.section	.text.keyboard_post_init_kb,"ax",@progbits
  97               		.weak	keyboard_post_init_kb
  99               	keyboard_post_init_kb:
 100               	.LFB9:
 168:tmk_core/common/keyboard.c **** 
 169:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_kb
 170:tmk_core/common/keyboard.c ****  *
 171:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 172:tmk_core/common/keyboard.c ****  */
 173:tmk_core/common/keyboard.c **** 
 174:tmk_core/common/keyboard.c **** __attribute__ ((weak))
 175:tmk_core/common/keyboard.c **** void keyboard_post_init_kb(void) {
 101               		.loc 1 175 0
 102               		.cfi_startproc
 103               	/* prologue: function */
 104               	/* frame size = 0 */
 105               	/* stack size = 0 */
 106               	.L__stack_usage = 0
 176:tmk_core/common/keyboard.c ****   keyboard_post_init_user();
 107               		.loc 1 176 0
 108 0000 0C94 0000 		jmp keyboard_post_init_user
 109               	.LVL1:
 110               		.cfi_endproc
 111               	.LFE9:
 113               		.section	.text.keyboard_setup,"ax",@progbits
 114               	.global	keyboard_setup
 116               	keyboard_setup:
 117               	.LFB10:
 177:tmk_core/common/keyboard.c **** }
 178:tmk_core/common/keyboard.c **** 
 179:tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 180:tmk_core/common/keyboard.c ****  *
 181:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 182:tmk_core/common/keyboard.c ****  */
 183:tmk_core/common/keyboard.c **** void keyboard_setup(void) {
 118               		.loc 1 183 0
 119               		.cfi_startproc
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 0 */
 123               	.L__stack_usage = 0
 184:tmk_core/common/keyboard.c ****     disable_jtag();
 124               		.loc 1 184 0
 125 0000 0E94 0000 		call disable_jtag
 126               	.LVL2:
 185:tmk_core/common/keyboard.c ****     matrix_setup();
 127               		.loc 1 185 0
 128 0004 0E94 0000 		call matrix_setup
 129               	.LVL3:
 186:tmk_core/common/keyboard.c ****     keyboard_pre_init_kb();
 130               		.loc 1 186 0
 131 0008 0C94 0000 		jmp keyboard_pre_init_kb
 132               	.LVL4:
 133               		.cfi_endproc
 134               	.LFE10:
 136               		.section	.text.is_keyboard_master,"ax",@progbits
 137               		.weak	is_keyboard_master
 139               	is_keyboard_master:
 140               	.LFB11:
 187:tmk_core/common/keyboard.c **** }
 188:tmk_core/common/keyboard.c **** 
 189:tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 190:tmk_core/common/keyboard.c ****  *
 191:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 192:tmk_core/common/keyboard.c ****  */
 193:tmk_core/common/keyboard.c **** __attribute__((weak))
 194:tmk_core/common/keyboard.c **** bool is_keyboard_master(void) {
 141               		.loc 1 194 0
 142               		.cfi_startproc
 143               	/* prologue: function */
 144               	/* frame size = 0 */
 145               	/* stack size = 0 */
 146               	.L__stack_usage = 0
 195:tmk_core/common/keyboard.c ****     return true;
 196:tmk_core/common/keyboard.c **** }
 147               		.loc 1 196 0
 148 0000 81E0      		ldi r24,lo8(1)
 149 0002 0895      		ret
 150               		.cfi_endproc
 151               	.LFE11:
 153               		.section	.text.keyboard_init,"ax",@progbits
 154               	.global	keyboard_init
 156               	keyboard_init:
 157               	.LFB12:
 197:tmk_core/common/keyboard.c **** 
 198:tmk_core/common/keyboard.c **** /** \brief keyboard_init
 199:tmk_core/common/keyboard.c ****  *
 200:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 201:tmk_core/common/keyboard.c ****  */
 202:tmk_core/common/keyboard.c **** void keyboard_init(void) {
 158               		.loc 1 202 0
 159               		.cfi_startproc
 160               	/* prologue: function */
 161               	/* frame size = 0 */
 162               	/* stack size = 0 */
 163               	.L__stack_usage = 0
 203:tmk_core/common/keyboard.c ****     timer_init();
 164               		.loc 1 203 0
 165 0000 0E94 0000 		call timer_init
 166               	.LVL5:
 204:tmk_core/common/keyboard.c ****     matrix_init();
 167               		.loc 1 204 0
 168 0004 0E94 0000 		call matrix_init
 169               	.LVL6:
 205:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 206:tmk_core/common/keyboard.c ****     qwiic_init();
 207:tmk_core/common/keyboard.c **** #endif
 208:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 209:tmk_core/common/keyboard.c ****     ps2_mouse_init();
 210:tmk_core/common/keyboard.c **** #endif
 211:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 212:tmk_core/common/keyboard.c ****     serial_mouse_init();
 213:tmk_core/common/keyboard.c **** #endif
 214:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 215:tmk_core/common/keyboard.c ****     adb_mouse_init();
 216:tmk_core/common/keyboard.c **** #endif
 217:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 218:tmk_core/common/keyboard.c ****     bootmagic();
 219:tmk_core/common/keyboard.c **** #else
 220:tmk_core/common/keyboard.c ****     magic();
 170               		.loc 1 220 0
 171 0008 0E94 0000 		call magic
 172               	.LVL7:
 221:tmk_core/common/keyboard.c **** #endif
 222:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 223:tmk_core/common/keyboard.c ****     backlight_init();
 224:tmk_core/common/keyboard.c **** #endif
 225:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 226:tmk_core/common/keyboard.c ****     rgblight_init();
 227:tmk_core/common/keyboard.c **** #endif
 228:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 229:tmk_core/common/keyboard.c ****     steno_init();
 230:tmk_core/common/keyboard.c **** #endif
 231:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 232:tmk_core/common/keyboard.c ****     fauxclicky_init();
 233:tmk_core/common/keyboard.c **** #endif
 234:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 235:tmk_core/common/keyboard.c ****     pointing_device_init();
 236:tmk_core/common/keyboard.c **** #endif
 237:tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 238:tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 239:tmk_core/common/keyboard.c **** #endif
 240:tmk_core/common/keyboard.c ****     keyboard_post_init_kb(); /* Always keep this last */
 173               		.loc 1 240 0
 174 000c 0C94 0000 		jmp keyboard_post_init_kb
 175               	.LVL8:
 176               		.cfi_endproc
 177               	.LFE12:
 179               		.section	.text.keyboard_task,"ax",@progbits
 180               	.global	keyboard_task
 182               	keyboard_task:
 183               	.LFB13:
 241:tmk_core/common/keyboard.c **** }
 242:tmk_core/common/keyboard.c **** 
 243:tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 244:tmk_core/common/keyboard.c ****  *
 245:tmk_core/common/keyboard.c ****  * Do routine keyboard jobs:
 246:tmk_core/common/keyboard.c ****  *
 247:tmk_core/common/keyboard.c ****  * * scan matrix
 248:tmk_core/common/keyboard.c ****  * * handle mouse movements
 249:tmk_core/common/keyboard.c ****  * * run visualizer code
 250:tmk_core/common/keyboard.c ****  * * handle midi commands
 251:tmk_core/common/keyboard.c ****  * * light LEDs
 252:tmk_core/common/keyboard.c ****  *
 253:tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 254:tmk_core/common/keyboard.c ****  */
 255:tmk_core/common/keyboard.c **** void keyboard_task(void)
 256:tmk_core/common/keyboard.c **** {
 184               		.loc 1 256 0
 185               		.cfi_startproc
 186 0000 CF92      		push r12
 187               	.LCFI0:
 188               		.cfi_def_cfa_offset 3
 189               		.cfi_offset 12, -2
 190 0002 DF92      		push r13
 191               	.LCFI1:
 192               		.cfi_def_cfa_offset 4
 193               		.cfi_offset 13, -3
 194 0004 EF92      		push r14
 195               	.LCFI2:
 196               		.cfi_def_cfa_offset 5
 197               		.cfi_offset 14, -4
 198 0006 FF92      		push r15
 199               	.LCFI3:
 200               		.cfi_def_cfa_offset 6
 201               		.cfi_offset 15, -5
 202 0008 0F93      		push r16
 203               	.LCFI4:
 204               		.cfi_def_cfa_offset 7
 205               		.cfi_offset 16, -6
 206 000a 1F93      		push r17
 207               	.LCFI5:
 208               		.cfi_def_cfa_offset 8
 209               		.cfi_offset 17, -7
 210 000c CF93      		push r28
 211               	.LCFI6:
 212               		.cfi_def_cfa_offset 9
 213               		.cfi_offset 28, -8
 214 000e DF93      		push r29
 215               	.LCFI7:
 216               		.cfi_def_cfa_offset 10
 217               		.cfi_offset 29, -9
 218 0010 CDB7      		in r28,__SP_L__
 219 0012 DEB7      		in r29,__SP_H__
 220               	.LCFI8:
 221               		.cfi_def_cfa_register 28
 222 0014 2B97      		sbiw r28,11
 223               	.LCFI9:
 224               		.cfi_def_cfa_offset 21
 225 0016 0FB6      		in __tmp_reg__,__SREG__
 226 0018 F894      		cli
 227 001a DEBF      		out __SP_H__,r29
 228 001c 0FBE      		out __SREG__,__tmp_reg__
 229 001e CDBF      		out __SP_L__,r28
 230               	/* prologue: function */
 231               	/* frame size = 11 */
 232               	/* stack size = 19 */
 233               	.L__stack_usage = 19
 234               	.LVL9:
 257:tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 258:tmk_core/common/keyboard.c ****     static uint8_t led_status = 0;
 259:tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = 0;
 260:tmk_core/common/keyboard.c ****     matrix_row_t matrix_change = 0;
 261:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 262:tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 263:tmk_core/common/keyboard.c **** #endif
 264:tmk_core/common/keyboard.c **** 
 265:tmk_core/common/keyboard.c ****     matrix_scan();
 235               		.loc 1 265 0
 236 0020 0E94 0000 		call matrix_scan
 237               	.LVL10:
 266:tmk_core/common/keyboard.c **** 
 267:tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 238               		.loc 1 267 0
 239 0024 0E94 0000 		call is_keyboard_master
 240               	.LVL11:
 241 0028 8111      		cpse r24,__zero_reg__
 242 002a 00C0      		rjmp .L11
 243               	.LVL12:
 244               	.L15:
 268:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 269:tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 270:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 271:tmk_core/common/keyboard.c ****             if (matrix_change) {
 272:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 273:tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) { continue; }
 274:tmk_core/common/keyboard.c **** #endif
 275:tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 276:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 277:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 278:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 279:tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 280:tmk_core/common/keyboard.c ****                             .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 281:tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 282:tmk_core/common/keyboard.c ****                         });
 283:tmk_core/common/keyboard.c ****                         // record a processed key
 284:tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1<<c);
 285:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 286:tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 287:tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 288:tmk_core/common/keyboard.c **** #endif
 289:tmk_core/common/keyboard.c ****                         // process a key per task call
 290:tmk_core/common/keyboard.c ****                         goto MATRIX_LOOP_END;
 291:tmk_core/common/keyboard.c ****                     }
 292:tmk_core/common/keyboard.c ****                 }
 293:tmk_core/common/keyboard.c ****             }
 294:tmk_core/common/keyboard.c ****         }
 295:tmk_core/common/keyboard.c ****     }
 296:tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 297:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 298:tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 299:tmk_core/common/keyboard.c ****     if (!keys_processed)
 300:tmk_core/common/keyboard.c **** #endif
 301:tmk_core/common/keyboard.c ****     action_exec(TICK);
 245               		.loc 1 301 0
 246 002c 8FEF      		ldi r24,lo8(-1)
 247 002e 8983      		std Y+1,r24
 248 0030 8A83      		std Y+2,r24
 249 0032 1B82      		std Y+3,__zero_reg__
 250 0034 0E94 0000 		call timer_read
 251               	.LVL13:
 252 0038 8160      		ori r24,1
 253 003a 782F      		mov r23,r24
 254 003c 9D83      		std Y+5,r25
 255 003e 8C83      		std Y+4,r24
 256 0040 4981      		ldd r20,Y+1
 257 0042 5A81      		ldd r21,Y+2
 258 0044 6B81      		ldd r22,Y+3
 259 0046 8D81      		ldd r24,Y+5
 260 0048 0E94 0000 		call action_exec
 261               	.LVL14:
 262 004c 00C0      		rjmp .L12
 263               	.LVL15:
 264               	.L11:
 265 004e 80E0      		ldi r24,lo8(matrix_prev.2835)
 266 0050 C82E      		mov r12,r24
 267 0052 80E0      		ldi r24,hi8(matrix_prev.2835)
 268 0054 D82E      		mov r13,r24
 267:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 269               		.loc 1 267 0
 270 0056 00E0      		ldi r16,0
 271 0058 10E0      		ldi r17,0
 272               	.LVL16:
 273               	.L14:
 274 005a E02E      		mov r14,r16
 275               	.LVL17:
 276               	.LBB6:
 269:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 277               		.loc 1 269 0
 278 005c 802F      		mov r24,r16
 279 005e 0E94 0000 		call matrix_get_row
 280               	.LVL18:
 270:tmk_core/common/keyboard.c ****             if (matrix_change) {
 281               		.loc 1 270 0
 282 0062 F601      		movw r30,r12
 283 0064 4191      		ld r20,Z+
 284 0066 6F01      		movw r12,r30
 285 0068 F42E      		mov r15,r20
 286 006a F826      		eor r15,r24
 287               	.LVL19:
 271:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 288               		.loc 1 271 0
 289 006c 01F4      		brne .L13
 290               	.LVL20:
 291               	.L20:
 292 006e 0F5F      		subi r16,-1
 293 0070 1F4F      		sbci r17,-1
 294               	.LVL21:
 268:tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 295               		.loc 1 268 0
 296 0072 0A30      		cpi r16,10
 297 0074 1105      		cpc r17,__zero_reg__
 298 0076 01F4      		brne .L14
 299 0078 00C0      		rjmp .L15
 300               	.LVL22:
 301               	.L13:
 275:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 302               		.loc 1 275 0
 303 007a 9091 0000 		lds r25,debug_config
 304 007e 91FF      		sbrs r25,1
 305 0080 00C0      		rjmp .L16
 275:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 306               		.loc 1 275 0 is_stmt 0 discriminator 1
 307 0082 8B87      		std Y+11,r24
 308 0084 0E94 0000 		call matrix_print
 309               	.LVL23:
 310 0088 8B85      		ldd r24,Y+11
 311               	.L16:
 312               	.LVL24:
 313               	.LBE6:
 267:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 314               		.loc 1 267 0 is_stmt 1
 315 008a 20E0      		ldi r18,0
 316 008c 30E0      		ldi r19,0
 317               	.LBB8:
 318               	.LBB7:
 277:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 319               		.loc 1 277 0
 320 008e 4F2D      		mov r20,r15
 321 0090 50E0      		ldi r21,0
 322               	.LVL25:
 323               	.L19:
 324 0092 922F      		mov r25,r18
 325               	.LVL26:
 326 0094 BA01      		movw r22,r20
 327 0096 022E      		mov r0,r18
 328 0098 00C0      		rjmp 2f
 329               		1:
 330 009a 7595      		asr r23
 331 009c 6795      		ror r22
 332               		2:
 333 009e 0A94      		dec r0
 334 00a0 02F4      		brpl 1b
 335 00a2 60FF      		sbrs r22,0
 336 00a4 00C0      		rjmp .L17
 278:tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 337               		.loc 1 278 0
 338 00a6 2E83      		std Y+6,r18
 339 00a8 EF82      		std Y+7,r14
 280:tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 340               		.loc 1 280 0
 341 00aa 21E0      		ldi r18,lo8(1)
 342 00ac 30E0      		ldi r19,0
 343               	.LVL27:
 344 00ae 6901      		movw r12,r18
 345 00b0 00C0      		rjmp 2f
 346               		1:
 347 00b2 CC0C      		lsl r12
 348 00b4 DD1C      		rol r13
 349               		2:
 350 00b6 9A95      		dec r25
 351 00b8 02F4      		brpl 1b
 352 00ba 90E0      		ldi r25,0
 353 00bc 8C21      		and r24,r12
 354 00be 9D21      		and r25,r13
 355 00c0 892B      		or r24,r25
 356 00c2 01F4      		brne .L18
 357 00c4 20E0      		ldi r18,0
 358               	.L18:
 278:tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 359               		.loc 1 278 0
 360 00c6 2887      		std Y+8,r18
 281:tmk_core/common/keyboard.c ****                         });
 361               		.loc 1 281 0
 362 00c8 0E94 0000 		call timer_read
 363               	.LVL28:
 364 00cc 8160      		ori r24,1
 278:tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 365               		.loc 1 278 0
 366 00ce 782F      		mov r23,r24
 367 00d0 9A87      		std Y+10,r25
 368 00d2 8987      		std Y+9,r24
 369 00d4 4E81      		ldd r20,Y+6
 370 00d6 5F81      		ldd r21,Y+7
 371 00d8 6885      		ldd r22,Y+8
 372 00da 8A85      		ldd r24,Y+10
 373 00dc 0E94 0000 		call action_exec
 374               	.LVL29:
 284:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 375               		.loc 1 284 0
 376 00e0 F801      		movw r30,r16
 377 00e2 E050      		subi r30,lo8(-(matrix_prev.2835))
 378 00e4 F040      		sbci r31,hi8(-(matrix_prev.2835))
 379 00e6 8081      		ld r24,Z
 380 00e8 C826      		eor r12,r24
 381 00ea C082      		st Z,r12
 290:tmk_core/common/keyboard.c ****                     }
 382               		.loc 1 290 0
 383 00ec 00C0      		rjmp .L12
 384               	.LVL30:
 385               	.L17:
 386 00ee 2F5F      		subi r18,-1
 387 00f0 3F4F      		sbci r19,-1
 388               	.LVL31:
 276:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 389               		.loc 1 276 0 discriminator 2
 390 00f2 2630      		cpi r18,6
 391 00f4 3105      		cpc r19,__zero_reg__
 392 00f6 01F4      		brne .L19
 393 00f8 00C0      		rjmp .L20
 394               	.LVL32:
 395               	.L12:
 396               	.LBE7:
 397               	.LBE8:
 302:tmk_core/common/keyboard.c **** 
 303:tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 304:tmk_core/common/keyboard.c **** 
 305:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 306:tmk_core/common/keyboard.c ****     qwiic_task();
 307:tmk_core/common/keyboard.c **** #endif
 308:tmk_core/common/keyboard.c **** 
 309:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 310:tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 311:tmk_core/common/keyboard.c ****     mousekey_task();
 398               		.loc 1 311 0
 399 00fa 0E94 0000 		call mousekey_task
 400               	.LVL33:
 312:tmk_core/common/keyboard.c **** #endif
 313:tmk_core/common/keyboard.c **** 
 314:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 315:tmk_core/common/keyboard.c ****     ps2_mouse_task();
 316:tmk_core/common/keyboard.c **** #endif
 317:tmk_core/common/keyboard.c **** 
 318:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 319:tmk_core/common/keyboard.c ****     serial_mouse_task();
 320:tmk_core/common/keyboard.c **** #endif
 321:tmk_core/common/keyboard.c **** 
 322:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 323:tmk_core/common/keyboard.c ****     adb_mouse_task();
 324:tmk_core/common/keyboard.c **** #endif
 325:tmk_core/common/keyboard.c **** 
 326:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 327:tmk_core/common/keyboard.c **** 	serial_link_update();
 328:tmk_core/common/keyboard.c **** #endif
 329:tmk_core/common/keyboard.c **** 
 330:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 331:tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 332:tmk_core/common/keyboard.c **** #endif
 333:tmk_core/common/keyboard.c **** 
 334:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 335:tmk_core/common/keyboard.c ****     pointing_device_task();
 336:tmk_core/common/keyboard.c **** #endif
 337:tmk_core/common/keyboard.c **** 
 338:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 339:tmk_core/common/keyboard.c ****     midi_task();
 340:tmk_core/common/keyboard.c **** #endif
 341:tmk_core/common/keyboard.c **** 
 342:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
 343:tmk_core/common/keyboard.c ****     if (velocikey_enabled()) { velocikey_decelerate();  }
 344:tmk_core/common/keyboard.c **** #endif
 345:tmk_core/common/keyboard.c **** 
 346:tmk_core/common/keyboard.c ****     // update LED
 347:tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 401               		.loc 1 347 0
 402 00fe 1091 0000 		lds r17,led_status.2836
 403 0102 0E94 0000 		call host_keyboard_leds
 404               	.LVL34:
 405 0106 1817      		cp r17,r24
 406 0108 01F0      		breq .L10
 348:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 407               		.loc 1 348 0
 408 010a 0E94 0000 		call host_keyboard_leds
 409               	.LVL35:
 410 010e 8093 0000 		sts led_status.2836,r24
 411               	.LVL36:
 412               	/* epilogue start */
 349:tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 350:tmk_core/common/keyboard.c ****     }
 351:tmk_core/common/keyboard.c **** }
 413               		.loc 1 351 0
 414 0112 2B96      		adiw r28,11
 415 0114 0FB6      		in __tmp_reg__,__SREG__
 416 0116 F894      		cli
 417 0118 DEBF      		out __SP_H__,r29
 418 011a 0FBE      		out __SREG__,__tmp_reg__
 419 011c CDBF      		out __SP_L__,r28
 420 011e DF91      		pop r29
 421 0120 CF91      		pop r28
 422 0122 1F91      		pop r17
 423 0124 0F91      		pop r16
 424 0126 FF90      		pop r15
 425 0128 EF90      		pop r14
 426 012a DF90      		pop r13
 427 012c CF90      		pop r12
 428               	.LBB9:
 429               	.LBB10:
 352:tmk_core/common/keyboard.c **** 
 353:tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 354:tmk_core/common/keyboard.c ****  *
 355:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 356:tmk_core/common/keyboard.c ****  */
 357:tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 358:tmk_core/common/keyboard.c **** {
 359:tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 360:tmk_core/common/keyboard.c ****     led_set(leds);
 430               		.loc 1 360 0
 431 012e 0C94 0000 		jmp led_set
 432               	.LVL37:
 433               	.L10:
 434               	/* epilogue start */
 435               	.LBE10:
 436               	.LBE9:
 351:tmk_core/common/keyboard.c **** 
 437               		.loc 1 351 0
 438 0132 2B96      		adiw r28,11
 439 0134 0FB6      		in __tmp_reg__,__SREG__
 440 0136 F894      		cli
 441 0138 DEBF      		out __SP_H__,r29
 442 013a 0FBE      		out __SREG__,__tmp_reg__
 443 013c CDBF      		out __SP_L__,r28
 444 013e DF91      		pop r29
 445 0140 CF91      		pop r28
 446 0142 1F91      		pop r17
 447 0144 0F91      		pop r16
 448 0146 FF90      		pop r15
 449 0148 EF90      		pop r14
 450 014a DF90      		pop r13
 451 014c CF90      		pop r12
 452 014e 0895      		ret
 453               		.cfi_endproc
 454               	.LFE13:
 456               		.section	.text.keyboard_set_leds,"ax",@progbits
 457               	.global	keyboard_set_leds
 459               	keyboard_set_leds:
 460               	.LFB14:
 358:tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 461               		.loc 1 358 0
 462               		.cfi_startproc
 463               	.LVL38:
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 468               		.loc 1 360 0
 469 0000 0C94 0000 		jmp led_set
 470               	.LVL39:
 471               		.cfi_endproc
 472               	.LFE14:
 474               		.section	.bss.led_status.2836,"aw",@nobits
 477               	led_status.2836:
 478 0000 00        		.zero	1
 479               		.section	.bss.matrix_prev.2835,"aw",@nobits
 482               	matrix_prev.2835:
 483 0000 0000 0000 		.zero	10
 483      0000 0000 
 483      0000 
 484               		.text
 485               	.Letext0:
 486               		.file 2 "/usr/lib/avr/include/stdint.h"
 487               		.file 3 "tmk_core/common/keyboard.h"
 488               		.file 4 "tmk_core/common/matrix.h"
 489               		.file 5 "tmk_core/common/debug.h"
 490               		.file 6 "tmk_core/common/timer.h"
 491               		.file 7 "tmk_core/common/magic.h"
 492               		.file 8 "tmk_core/common/action.h"
 493               		.file 9 "tmk_core/common/led.h"
 494               		.file 10 "tmk_core/common/mousekey.h"
 495               		.file 11 "tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/ccdwySSu.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccdwySSu.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccdwySSu.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccdwySSu.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccdwySSu.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccdwySSu.s:13     .text.disable_jtag:0000000000000000 disable_jtag
     /tmp/ccdwySSu.s:37     .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/ccdwySSu.s:52     .text.keyboard_pre_init_user:0000000000000000 keyboard_pre_init_user
     /tmp/ccdwySSu.s:67     .text.keyboard_pre_init_kb:0000000000000000 keyboard_pre_init_kb
     /tmp/ccdwySSu.s:84     .text.keyboard_post_init_user:0000000000000000 keyboard_post_init_user
     /tmp/ccdwySSu.s:99     .text.keyboard_post_init_kb:0000000000000000 keyboard_post_init_kb
     /tmp/ccdwySSu.s:116    .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/ccdwySSu.s:139    .text.is_keyboard_master:0000000000000000 is_keyboard_master
     /tmp/ccdwySSu.s:156    .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/ccdwySSu.s:182    .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/ccdwySSu.s:482    .bss.matrix_prev.2835:0000000000000000 matrix_prev.2835
     /tmp/ccdwySSu.s:477    .bss.led_status.2836:0000000000000000 led_status.2836
     /tmp/ccdwySSu.s:459    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
magic
matrix_scan
timer_read
action_exec
matrix_get_row
debug_config
matrix_print
mousekey_task
host_keyboard_leds
led_set
__do_clear_bss
