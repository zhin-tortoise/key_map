   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB0:
  15               		.file 1 "tmk_core/common/action_util.h"
   1:tmk_core/common/action_util.h **** /*
   2:tmk_core/common/action_util.h **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.h **** 
   4:tmk_core/common/action_util.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.h **** (at your option) any later version.
   8:tmk_core/common/action_util.h **** 
   9:tmk_core/common/action_util.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.h **** GNU General Public License for more details.
  13:tmk_core/common/action_util.h **** 
  14:tmk_core/common/action_util.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.h **** */
  17:tmk_core/common/action_util.h **** #ifndef ACTION_UTIL_H
  18:tmk_core/common/action_util.h **** #define ACTION_UTIL_H
  19:tmk_core/common/action_util.h **** 
  20:tmk_core/common/action_util.h **** #include <stdint.h>
  21:tmk_core/common/action_util.h **** #include "report.h"
  22:tmk_core/common/action_util.h **** 
  23:tmk_core/common/action_util.h **** #ifdef __cplusplus
  24:tmk_core/common/action_util.h **** extern "C" {
  25:tmk_core/common/action_util.h **** #endif
  26:tmk_core/common/action_util.h **** 
  27:tmk_core/common/action_util.h **** extern report_keyboard_t *keyboard_report;
  28:tmk_core/common/action_util.h **** 
  29:tmk_core/common/action_util.h **** void send_keyboard_report(void);
  30:tmk_core/common/action_util.h **** 
  31:tmk_core/common/action_util.h **** /* key */
  32:tmk_core/common/action_util.h **** inline void add_key(uint8_t key) {
  16               		.loc 1 32 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  33:tmk_core/common/action_util.h ****   add_key_to_report(keyboard_report, key);
  23               		.loc 1 33 0
  24 0000 682F      		mov r22,r24
  25 0002 8091 0000 		lds r24,keyboard_report
  26 0006 9091 0000 		lds r25,keyboard_report+1
  27               	.LVL1:
  28 000a 0C94 0000 		jmp add_key_to_report
  29               	.LVL2:
  30               		.cfi_endproc
  31               	.LFE0:
  33               		.section	.text.del_key,"ax",@progbits
  34               	.global	del_key
  36               	del_key:
  37               	.LFB1:
  34:tmk_core/common/action_util.h **** }
  35:tmk_core/common/action_util.h **** 
  36:tmk_core/common/action_util.h **** inline void del_key(uint8_t key) {
  38               		.loc 1 36 0
  39               		.cfi_startproc
  40               	.LVL3:
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
  37:tmk_core/common/action_util.h ****   del_key_from_report(keyboard_report, key);
  45               		.loc 1 37 0
  46 0000 682F      		mov r22,r24
  47 0002 8091 0000 		lds r24,keyboard_report
  48 0006 9091 0000 		lds r25,keyboard_report+1
  49               	.LVL4:
  50 000a 0C94 0000 		jmp del_key_from_report
  51               	.LVL5:
  52               		.cfi_endproc
  53               	.LFE1:
  55               		.section	.text.clear_keys,"ax",@progbits
  56               	.global	clear_keys
  58               	clear_keys:
  59               	.LFB2:
  38:tmk_core/common/action_util.h **** }
  39:tmk_core/common/action_util.h **** 
  40:tmk_core/common/action_util.h **** inline void clear_keys(void) {
  60               		.loc 1 40 0
  61               		.cfi_startproc
  62               	/* prologue: function */
  63               	/* frame size = 0 */
  64               	/* stack size = 0 */
  65               	.L__stack_usage = 0
  41:tmk_core/common/action_util.h ****   clear_keys_from_report(keyboard_report);
  66               		.loc 1 41 0
  67 0000 8091 0000 		lds r24,keyboard_report
  68 0004 9091 0000 		lds r25,keyboard_report+1
  69 0008 0C94 0000 		jmp clear_keys_from_report
  70               	.LVL6:
  71               		.cfi_endproc
  72               	.LFE2:
  74               		.section	.text.get_oneshot_locked_mods,"ax",@progbits
  75               	.global	get_oneshot_locked_mods
  77               	get_oneshot_locked_mods:
  78               	.LFB7:
  79               		.file 2 "tmk_core/common/action_util.c"
   1:tmk_core/common/action_util.c **** /*
   2:tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.c **** 
   4:tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.c **** (at your option) any later version.
   8:tmk_core/common/action_util.c **** 
   9:tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:tmk_core/common/action_util.c **** 
  14:tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.c **** */
  17:tmk_core/common/action_util.c **** #include "host.h"
  18:tmk_core/common/action_util.c **** #include "report.h"
  19:tmk_core/common/action_util.c **** #include "debug.h"
  20:tmk_core/common/action_util.c **** #include "action_util.h"
  21:tmk_core/common/action_util.c **** #include "action_layer.h"
  22:tmk_core/common/action_util.c **** #include "timer.h"
  23:tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:tmk_core/common/action_util.c **** 
  25:tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:tmk_core/common/action_util.c **** 
  27:tmk_core/common/action_util.c **** 
  28:tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  29:tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  30:tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  31:tmk_core/common/action_util.c **** 
  32:tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  33:tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  34:tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  35:tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  36:tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  37:tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  38:tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  39:tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  40:tmk_core/common/action_util.c **** #endif
  41:tmk_core/common/action_util.c **** 
  42:tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  43:tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  44:tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  45:tmk_core/common/action_util.c **** 
  46:tmk_core/common/action_util.c **** extern inline void add_key(uint8_t key);
  47:tmk_core/common/action_util.c **** extern inline void del_key(uint8_t key);
  48:tmk_core/common/action_util.c **** extern inline void clear_keys(void);
  49:tmk_core/common/action_util.c **** 
  50:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  51:tmk_core/common/action_util.c **** static uint8_t oneshot_mods = 0;
  52:tmk_core/common/action_util.c **** static uint8_t oneshot_locked_mods = 0;
  53:tmk_core/common/action_util.c **** uint8_t get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
  80               		.loc 2 53 0
  81               		.cfi_startproc
  82               	/* prologue: function */
  83               	/* frame size = 0 */
  84               	/* stack size = 0 */
  85               	.L__stack_usage = 0
  86               		.loc 2 53 0
  87 0000 8091 0000 		lds r24,oneshot_locked_mods
  88 0004 0895      		ret
  89               		.cfi_endproc
  90               	.LFE7:
  92               		.section	.text.has_oneshot_mods_timed_out,"ax",@progbits
  93               	.global	has_oneshot_mods_timed_out
  95               	has_oneshot_mods_timed_out:
  96               	.LFB10:
  54:tmk_core/common/action_util.c **** void set_oneshot_locked_mods(uint8_t mods) {
  55:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
  56:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
  57:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  58:tmk_core/common/action_util.c ****     }
  59:tmk_core/common/action_util.c **** }
  60:tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) {
  61:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
  62:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
  63:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  64:tmk_core/common/action_util.c ****     }
  65:tmk_core/common/action_util.c **** }
  66:tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  67:tmk_core/common/action_util.c **** static uint16_t oneshot_time = 0;
  68:tmk_core/common/action_util.c **** bool has_oneshot_mods_timed_out(void) {
  69:tmk_core/common/action_util.c ****   return TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT;
  70:tmk_core/common/action_util.c **** }
  71:tmk_core/common/action_util.c **** #else
  72:tmk_core/common/action_util.c **** bool has_oneshot_mods_timed_out(void) {
  97               		.loc 2 72 0
  98               		.cfi_startproc
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
  73:tmk_core/common/action_util.c ****     return false;
  74:tmk_core/common/action_util.c **** }
 103               		.loc 2 74 0
 104 0000 80E0      		ldi r24,0
 105 0002 0895      		ret
 106               		.cfi_endproc
 107               	.LFE10:
 109               		.section	.text.get_oneshot_layer,"ax",@progbits
 110               	.global	get_oneshot_layer
 112               	get_oneshot_layer:
 113               	.LFB11:
  75:tmk_core/common/action_util.c **** #endif
  76:tmk_core/common/action_util.c **** #endif
  77:tmk_core/common/action_util.c **** 
  78:tmk_core/common/action_util.c **** /* oneshot layer */
  79:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  80:tmk_core/common/action_util.c **** /** \brief oneshot_layer_data bits
  81:tmk_core/common/action_util.c ****  * LLLL LSSS
  82:tmk_core/common/action_util.c ****  * where:
  83:tmk_core/common/action_util.c ****  *   L => are layer bits
  84:tmk_core/common/action_util.c ****  *   S => oneshot state bits
  85:tmk_core/common/action_util.c ****  */
  86:tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  87:tmk_core/common/action_util.c **** 
  88:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
 114               		.loc 2 88 0
 115               		.cfi_startproc
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
 120               		.loc 2 88 0
 121 0000 8091 0000 		lds r24,oneshot_layer_data
 122 0004 8595      		asr r24
 123 0006 8595      		asr r24
 124 0008 8595      		asr r24
 125 000a 0895      		ret
 126               		.cfi_endproc
 127               	.LFE11:
 129               		.section	.text.get_oneshot_layer_state,"ax",@progbits
 130               	.global	get_oneshot_layer_state
 132               	get_oneshot_layer_state:
 133               	.LFB12:
  89:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 134               		.loc 2 89 0
 135               		.cfi_startproc
 136               	/* prologue: function */
 137               	/* frame size = 0 */
 138               	/* stack size = 0 */
 139               	.L__stack_usage = 0
 140               		.loc 2 89 0
 141 0000 8091 0000 		lds r24,oneshot_layer_data
 142 0004 8770      		andi r24,lo8(7)
 143 0006 0895      		ret
 144               		.cfi_endproc
 145               	.LFE12:
 147               		.section	.text.is_oneshot_layer_active,"ax",@progbits
 148               	.global	is_oneshot_layer_active
 150               	is_oneshot_layer_active:
 151               	.LFB16:
  90:tmk_core/common/action_util.c **** 
  91:tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  92:tmk_core/common/action_util.c **** static uint16_t oneshot_layer_time = 0;
  93:tmk_core/common/action_util.c **** inline bool has_oneshot_layer_timed_out() {
  94:tmk_core/common/action_util.c ****     return TIMER_DIFF_16(timer_read(), oneshot_layer_time) >= ONESHOT_TIMEOUT &&
  95:tmk_core/common/action_util.c ****         !(get_oneshot_layer_state() & ONESHOT_TOGGLED);
  96:tmk_core/common/action_util.c **** }
  97:tmk_core/common/action_util.c **** #endif
  98:tmk_core/common/action_util.c **** 
  99:tmk_core/common/action_util.c **** /** \brief Set oneshot layer 
 100:tmk_core/common/action_util.c ****  *
 101:tmk_core/common/action_util.c ****  * FIXME: needs doc
 102:tmk_core/common/action_util.c ****  */
 103:tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state)
 104:tmk_core/common/action_util.c **** {
 105:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 106:tmk_core/common/action_util.c ****     layer_on(layer);
 107:tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 108:tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
 109:tmk_core/common/action_util.c **** #endif
 110:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 111:tmk_core/common/action_util.c **** }
 112:tmk_core/common/action_util.c **** /** \brief Reset oneshot layer 
 113:tmk_core/common/action_util.c ****  *
 114:tmk_core/common/action_util.c ****  * FIXME: needs doc
 115:tmk_core/common/action_util.c ****  */
 116:tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 117:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 118:tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 119:tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 120:tmk_core/common/action_util.c **** #endif
 121:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 122:tmk_core/common/action_util.c **** }
 123:tmk_core/common/action_util.c **** /** \brief Clear oneshot layer 
 124:tmk_core/common/action_util.c ****  *
 125:tmk_core/common/action_util.c ****  * FIXME: needs doc
 126:tmk_core/common/action_util.c ****  */
 127:tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state)
 128:tmk_core/common/action_util.c **** {
 129:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 130:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 131:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 132:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 133:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 134:tmk_core/common/action_util.c ****     }
 135:tmk_core/common/action_util.c **** }
 136:tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 137:tmk_core/common/action_util.c ****  *
 138:tmk_core/common/action_util.c ****  * FIXME: needs doc
 139:tmk_core/common/action_util.c ****  */
 140:tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void)
 141:tmk_core/common/action_util.c **** {
 152               		.loc 2 141 0
 153               		.cfi_startproc
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
 158               	.LBB12:
 159               	.LBB13:
  89:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 160               		.loc 2 89 0
 161 0000 9091 0000 		lds r25,oneshot_layer_data
 162 0004 9770      		andi r25,lo8(7)
 163               	.LBE13:
 164               	.LBE12:
 142:tmk_core/common/action_util.c ****     return get_oneshot_layer_state();
 165               		.loc 2 142 0
 166 0006 81E0      		ldi r24,lo8(1)
 167 0008 01F4      		brne .L9
 168 000a 80E0      		ldi r24,0
 169               	.L9:
 143:tmk_core/common/action_util.c **** }
 170               		.loc 2 143 0
 171 000c 0895      		ret
 172               		.cfi_endproc
 173               	.LFE16:
 175               		.section	.text.get_mods,"ax",@progbits
 176               	.global	get_mods
 178               	get_mods:
 179               	.LFB18:
 144:tmk_core/common/action_util.c **** #endif
 145:tmk_core/common/action_util.c **** 
 146:tmk_core/common/action_util.c **** /** \brief Send keyboard report
 147:tmk_core/common/action_util.c ****  *
 148:tmk_core/common/action_util.c ****  * FIXME: needs doc
 149:tmk_core/common/action_util.c ****  */
 150:tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 151:tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 152:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 153:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 154:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 155:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 156:tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 157:tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 158:tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 159:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 160:tmk_core/common/action_util.c ****         }
 161:tmk_core/common/action_util.c **** #endif
 162:tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 163:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 164:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 165:tmk_core/common/action_util.c ****         }
 166:tmk_core/common/action_util.c ****     }
 167:tmk_core/common/action_util.c **** 
 168:tmk_core/common/action_util.c **** #endif
 169:tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 170:tmk_core/common/action_util.c **** }
 171:tmk_core/common/action_util.c **** 
 172:tmk_core/common/action_util.c **** /** \brief Get mods
 173:tmk_core/common/action_util.c ****  *
 174:tmk_core/common/action_util.c ****  * FIXME: needs doc
 175:tmk_core/common/action_util.c ****  */
 176:tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 180               		.loc 2 176 0
 181               		.cfi_startproc
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 0 */
 185               	.L__stack_usage = 0
 186               		.loc 2 176 0
 187 0000 8091 0000 		lds r24,real_mods
 188 0004 0895      		ret
 189               		.cfi_endproc
 190               	.LFE18:
 192               		.section	.text.add_mods,"ax",@progbits
 193               	.global	add_mods
 195               	add_mods:
 196               	.LFB19:
 177:tmk_core/common/action_util.c **** /** \brief add mods
 178:tmk_core/common/action_util.c ****  *
 179:tmk_core/common/action_util.c ****  * FIXME: needs doc
 180:tmk_core/common/action_util.c ****  */
 181:tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 197               		.loc 2 181 0
 198               		.cfi_startproc
 199               	.LVL7:
 200               	/* prologue: function */
 201               	/* frame size = 0 */
 202               	/* stack size = 0 */
 203               	.L__stack_usage = 0
 204               		.loc 2 181 0
 205 0000 9091 0000 		lds r25,real_mods
 206 0004 892B      		or r24,r25
 207               	.LVL8:
 208 0006 8093 0000 		sts real_mods,r24
 209 000a 0895      		ret
 210               		.cfi_endproc
 211               	.LFE19:
 213               		.section	.text.del_mods,"ax",@progbits
 214               	.global	del_mods
 216               	del_mods:
 217               	.LFB20:
 182:tmk_core/common/action_util.c **** /** \brief del mods
 183:tmk_core/common/action_util.c ****  *
 184:tmk_core/common/action_util.c ****  * FIXME: needs doc
 185:tmk_core/common/action_util.c ****  */
 186:tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 218               		.loc 2 186 0
 219               		.cfi_startproc
 220               	.LVL9:
 221               	/* prologue: function */
 222               	/* frame size = 0 */
 223               	/* stack size = 0 */
 224               	.L__stack_usage = 0
 225               		.loc 2 186 0
 226 0000 8095      		com r24
 227               	.LVL10:
 228 0002 9091 0000 		lds r25,real_mods
 229 0006 8923      		and r24,r25
 230               	.LVL11:
 231 0008 8093 0000 		sts real_mods,r24
 232 000c 0895      		ret
 233               		.cfi_endproc
 234               	.LFE20:
 236               		.section	.text.set_mods,"ax",@progbits
 237               	.global	set_mods
 239               	set_mods:
 240               	.LFB21:
 187:tmk_core/common/action_util.c **** /** \brief set mods
 188:tmk_core/common/action_util.c ****  *
 189:tmk_core/common/action_util.c ****  * FIXME: needs doc
 190:tmk_core/common/action_util.c ****  */
 191:tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 241               		.loc 2 191 0
 242               		.cfi_startproc
 243               	.LVL12:
 244               	/* prologue: function */
 245               	/* frame size = 0 */
 246               	/* stack size = 0 */
 247               	.L__stack_usage = 0
 248               		.loc 2 191 0
 249 0000 8093 0000 		sts real_mods,r24
 250 0004 0895      		ret
 251               		.cfi_endproc
 252               	.LFE21:
 254               		.section	.text.clear_mods,"ax",@progbits
 255               	.global	clear_mods
 257               	clear_mods:
 258               	.LFB22:
 192:tmk_core/common/action_util.c **** /** \brief clear mods
 193:tmk_core/common/action_util.c ****  *
 194:tmk_core/common/action_util.c ****  * FIXME: needs doc
 195:tmk_core/common/action_util.c ****  */
 196:tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 259               		.loc 2 196 0
 260               		.cfi_startproc
 261               	/* prologue: function */
 262               	/* frame size = 0 */
 263               	/* stack size = 0 */
 264               	.L__stack_usage = 0
 265               		.loc 2 196 0
 266 0000 1092 0000 		sts real_mods,__zero_reg__
 267 0004 0895      		ret
 268               		.cfi_endproc
 269               	.LFE22:
 271               		.section	.text.get_weak_mods,"ax",@progbits
 272               	.global	get_weak_mods
 274               	get_weak_mods:
 275               	.LFB23:
 197:tmk_core/common/action_util.c **** 
 198:tmk_core/common/action_util.c **** /** \brief get weak mods
 199:tmk_core/common/action_util.c ****  *
 200:tmk_core/common/action_util.c ****  * FIXME: needs doc
 201:tmk_core/common/action_util.c ****  */
 202:tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 276               		.loc 2 202 0
 277               		.cfi_startproc
 278               	/* prologue: function */
 279               	/* frame size = 0 */
 280               	/* stack size = 0 */
 281               	.L__stack_usage = 0
 282               		.loc 2 202 0
 283 0000 8091 0000 		lds r24,weak_mods
 284 0004 0895      		ret
 285               		.cfi_endproc
 286               	.LFE23:
 288               		.section	.text.add_weak_mods,"ax",@progbits
 289               	.global	add_weak_mods
 291               	add_weak_mods:
 292               	.LFB24:
 203:tmk_core/common/action_util.c **** /** \brief add weak mods
 204:tmk_core/common/action_util.c ****  *
 205:tmk_core/common/action_util.c ****  * FIXME: needs doc
 206:tmk_core/common/action_util.c ****  */
 207:tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 293               		.loc 2 207 0
 294               		.cfi_startproc
 295               	.LVL13:
 296               	/* prologue: function */
 297               	/* frame size = 0 */
 298               	/* stack size = 0 */
 299               	.L__stack_usage = 0
 300               		.loc 2 207 0
 301 0000 9091 0000 		lds r25,weak_mods
 302 0004 892B      		or r24,r25
 303               	.LVL14:
 304 0006 8093 0000 		sts weak_mods,r24
 305 000a 0895      		ret
 306               		.cfi_endproc
 307               	.LFE24:
 309               		.section	.text.del_weak_mods,"ax",@progbits
 310               	.global	del_weak_mods
 312               	del_weak_mods:
 313               	.LFB25:
 208:tmk_core/common/action_util.c **** /** \brief del weak mods
 209:tmk_core/common/action_util.c ****  *
 210:tmk_core/common/action_util.c ****  * FIXME: needs doc
 211:tmk_core/common/action_util.c ****  */
 212:tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 314               		.loc 2 212 0
 315               		.cfi_startproc
 316               	.LVL15:
 317               	/* prologue: function */
 318               	/* frame size = 0 */
 319               	/* stack size = 0 */
 320               	.L__stack_usage = 0
 321               		.loc 2 212 0
 322 0000 8095      		com r24
 323               	.LVL16:
 324 0002 9091 0000 		lds r25,weak_mods
 325 0006 8923      		and r24,r25
 326               	.LVL17:
 327 0008 8093 0000 		sts weak_mods,r24
 328 000c 0895      		ret
 329               		.cfi_endproc
 330               	.LFE25:
 332               		.section	.text.set_weak_mods,"ax",@progbits
 333               	.global	set_weak_mods
 335               	set_weak_mods:
 336               	.LFB26:
 213:tmk_core/common/action_util.c **** /** \brief set weak mods
 214:tmk_core/common/action_util.c ****  *
 215:tmk_core/common/action_util.c ****  * FIXME: needs doc
 216:tmk_core/common/action_util.c ****  */
 217:tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 337               		.loc 2 217 0
 338               		.cfi_startproc
 339               	.LVL18:
 340               	/* prologue: function */
 341               	/* frame size = 0 */
 342               	/* stack size = 0 */
 343               	.L__stack_usage = 0
 344               		.loc 2 217 0
 345 0000 8093 0000 		sts weak_mods,r24
 346 0004 0895      		ret
 347               		.cfi_endproc
 348               	.LFE26:
 350               		.section	.text.clear_weak_mods,"ax",@progbits
 351               	.global	clear_weak_mods
 353               	clear_weak_mods:
 354               	.LFB27:
 218:tmk_core/common/action_util.c **** /** \brief clear weak mods
 219:tmk_core/common/action_util.c ****  *
 220:tmk_core/common/action_util.c ****  * FIXME: needs doc
 221:tmk_core/common/action_util.c ****  */
 222:tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 355               		.loc 2 222 0
 356               		.cfi_startproc
 357               	/* prologue: function */
 358               	/* frame size = 0 */
 359               	/* stack size = 0 */
 360               	.L__stack_usage = 0
 361               		.loc 2 222 0
 362 0000 1092 0000 		sts weak_mods,__zero_reg__
 363 0004 0895      		ret
 364               		.cfi_endproc
 365               	.LFE27:
 367               		.section	.text.get_macro_mods,"ax",@progbits
 368               	.global	get_macro_mods
 370               	get_macro_mods:
 371               	.LFB28:
 223:tmk_core/common/action_util.c **** 
 224:tmk_core/common/action_util.c **** /* macro modifier */
 225:tmk_core/common/action_util.c **** /** \brief get macro mods
 226:tmk_core/common/action_util.c ****  *
 227:tmk_core/common/action_util.c ****  * FIXME: needs doc
 228:tmk_core/common/action_util.c ****  */
 229:tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 372               		.loc 2 229 0
 373               		.cfi_startproc
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 0 */
 377               	.L__stack_usage = 0
 378               		.loc 2 229 0
 379 0000 8091 0000 		lds r24,macro_mods
 380 0004 0895      		ret
 381               		.cfi_endproc
 382               	.LFE28:
 384               		.section	.text.add_macro_mods,"ax",@progbits
 385               	.global	add_macro_mods
 387               	add_macro_mods:
 388               	.LFB29:
 230:tmk_core/common/action_util.c **** /** \brief add macro mods
 231:tmk_core/common/action_util.c ****  *
 232:tmk_core/common/action_util.c ****  * FIXME: needs doc
 233:tmk_core/common/action_util.c ****  */
 234:tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 389               		.loc 2 234 0
 390               		.cfi_startproc
 391               	.LVL19:
 392               	/* prologue: function */
 393               	/* frame size = 0 */
 394               	/* stack size = 0 */
 395               	.L__stack_usage = 0
 396               		.loc 2 234 0
 397 0000 9091 0000 		lds r25,macro_mods
 398 0004 892B      		or r24,r25
 399               	.LVL20:
 400 0006 8093 0000 		sts macro_mods,r24
 401 000a 0895      		ret
 402               		.cfi_endproc
 403               	.LFE29:
 405               		.section	.text.del_macro_mods,"ax",@progbits
 406               	.global	del_macro_mods
 408               	del_macro_mods:
 409               	.LFB30:
 235:tmk_core/common/action_util.c **** /** \brief del macro mods
 236:tmk_core/common/action_util.c ****  *
 237:tmk_core/common/action_util.c ****  * FIXME: needs doc
 238:tmk_core/common/action_util.c ****  */
 239:tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 410               		.loc 2 239 0
 411               		.cfi_startproc
 412               	.LVL21:
 413               	/* prologue: function */
 414               	/* frame size = 0 */
 415               	/* stack size = 0 */
 416               	.L__stack_usage = 0
 417               		.loc 2 239 0
 418 0000 8095      		com r24
 419               	.LVL22:
 420 0002 9091 0000 		lds r25,macro_mods
 421 0006 8923      		and r24,r25
 422               	.LVL23:
 423 0008 8093 0000 		sts macro_mods,r24
 424 000c 0895      		ret
 425               		.cfi_endproc
 426               	.LFE30:
 428               		.section	.text.set_macro_mods,"ax",@progbits
 429               	.global	set_macro_mods
 431               	set_macro_mods:
 432               	.LFB31:
 240:tmk_core/common/action_util.c **** /** \brief set macro mods
 241:tmk_core/common/action_util.c ****  *
 242:tmk_core/common/action_util.c ****  * FIXME: needs doc
 243:tmk_core/common/action_util.c ****  */
 244:tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 433               		.loc 2 244 0
 434               		.cfi_startproc
 435               	.LVL24:
 436               	/* prologue: function */
 437               	/* frame size = 0 */
 438               	/* stack size = 0 */
 439               	.L__stack_usage = 0
 440               		.loc 2 244 0
 441 0000 8093 0000 		sts macro_mods,r24
 442 0004 0895      		ret
 443               		.cfi_endproc
 444               	.LFE31:
 446               		.section	.text.clear_macro_mods,"ax",@progbits
 447               	.global	clear_macro_mods
 449               	clear_macro_mods:
 450               	.LFB32:
 245:tmk_core/common/action_util.c **** /** \brief clear macro mods
 246:tmk_core/common/action_util.c ****  *
 247:tmk_core/common/action_util.c ****  * FIXME: needs doc
 248:tmk_core/common/action_util.c ****  */
 249:tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 451               		.loc 2 249 0
 452               		.cfi_startproc
 453               	/* prologue: function */
 454               	/* frame size = 0 */
 455               	/* stack size = 0 */
 456               	.L__stack_usage = 0
 457               		.loc 2 249 0
 458 0000 1092 0000 		sts macro_mods,__zero_reg__
 459 0004 0895      		ret
 460               		.cfi_endproc
 461               	.LFE32:
 463               		.section	.text.get_oneshot_mods,"ax",@progbits
 464               	.global	get_oneshot_mods
 466               	get_oneshot_mods:
 467               	.LFB35:
 250:tmk_core/common/action_util.c **** 
 251:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 252:tmk_core/common/action_util.c **** /** \brief set oneshot mods
 253:tmk_core/common/action_util.c ****  *
 254:tmk_core/common/action_util.c ****  * FIXME: needs doc
 255:tmk_core/common/action_util.c ****  */
 256:tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods) {
 257:tmk_core/common/action_util.c ****   if (oneshot_mods != mods) {
 258:tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 259:tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 260:tmk_core/common/action_util.c **** #endif
 261:tmk_core/common/action_util.c ****     oneshot_mods = mods;
 262:tmk_core/common/action_util.c ****     oneshot_mods_changed_kb(mods);
 263:tmk_core/common/action_util.c ****   }
 264:tmk_core/common/action_util.c **** }
 265:tmk_core/common/action_util.c **** /** \brief clear oneshot mods
 266:tmk_core/common/action_util.c ****  *
 267:tmk_core/common/action_util.c ****  * FIXME: needs doc
 268:tmk_core/common/action_util.c ****  */
 269:tmk_core/common/action_util.c **** void clear_oneshot_mods(void) {
 270:tmk_core/common/action_util.c ****   if (oneshot_mods) {
 271:tmk_core/common/action_util.c ****     oneshot_mods = 0;
 272:tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 273:tmk_core/common/action_util.c ****     oneshot_time = 0;
 274:tmk_core/common/action_util.c **** #endif
 275:tmk_core/common/action_util.c ****     oneshot_mods_changed_kb(oneshot_mods);
 276:tmk_core/common/action_util.c ****   }
 277:tmk_core/common/action_util.c **** }
 278:tmk_core/common/action_util.c **** /** \brief get oneshot mods
 279:tmk_core/common/action_util.c ****  *
 280:tmk_core/common/action_util.c ****  * FIXME: needs doc
 281:tmk_core/common/action_util.c ****  */
 282:tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void)
 283:tmk_core/common/action_util.c **** {
 468               		.loc 2 283 0
 469               		.cfi_startproc
 470               	/* prologue: function */
 471               	/* frame size = 0 */
 472               	/* stack size = 0 */
 473               	.L__stack_usage = 0
 284:tmk_core/common/action_util.c ****     return oneshot_mods;
 285:tmk_core/common/action_util.c **** }
 474               		.loc 2 285 0
 475 0000 8091 0000 		lds r24,oneshot_mods
 476 0004 0895      		ret
 477               		.cfi_endproc
 478               	.LFE35:
 480               		.section	.text.oneshot_locked_mods_changed_user,"ax",@progbits
 481               		.weak	oneshot_locked_mods_changed_user
 483               	oneshot_locked_mods_changed_user:
 484               	.LFB36:
 286:tmk_core/common/action_util.c **** #endif
 287:tmk_core/common/action_util.c **** 
 288:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 289:tmk_core/common/action_util.c ****  * 
 290:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change. 
 291:tmk_core/common/action_util.c ****  */
 292:tmk_core/common/action_util.c **** __attribute__((weak))
 293:tmk_core/common/action_util.c **** void oneshot_locked_mods_changed_user(uint8_t mods) { }
 485               		.loc 2 293 0
 486               		.cfi_startproc
 487               	.LVL25:
 488               	/* prologue: function */
 489               	/* frame size = 0 */
 490               	/* stack size = 0 */
 491               	.L__stack_usage = 0
 492 0000 0895      		ret
 493               		.cfi_endproc
 494               	.LFE36:
 496               		.section	.text.oneshot_locked_mods_changed_kb,"ax",@progbits
 497               		.weak	oneshot_locked_mods_changed_kb
 499               	oneshot_locked_mods_changed_kb:
 500               	.LFB37:
 294:tmk_core/common/action_util.c **** 
 295:tmk_core/common/action_util.c **** /** \brief Called when the locked one shot modifiers have been changed.
 296:tmk_core/common/action_util.c ****  * 
 297:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change. 
 298:tmk_core/common/action_util.c ****  */
 299:tmk_core/common/action_util.c **** __attribute__((weak))
 300:tmk_core/common/action_util.c **** void oneshot_locked_mods_changed_kb(uint8_t mods) {
 501               		.loc 2 300 0
 502               		.cfi_startproc
 503               	.LVL26:
 504               	/* prologue: function */
 505               	/* frame size = 0 */
 506               	/* stack size = 0 */
 507               	.L__stack_usage = 0
 301:tmk_core/common/action_util.c ****     oneshot_locked_mods_changed_user(mods);
 508               		.loc 2 301 0
 509 0000 0C94 0000 		jmp oneshot_locked_mods_changed_user
 510               	.LVL27:
 511               		.cfi_endproc
 512               	.LFE37:
 514               		.section	.text.set_oneshot_locked_mods,"ax",@progbits
 515               	.global	set_oneshot_locked_mods
 517               	set_oneshot_locked_mods:
 518               	.LFB8:
  54:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
 519               		.loc 2 54 0
 520               		.cfi_startproc
 521               	.LVL28:
 522               	/* prologue: function */
 523               	/* frame size = 0 */
 524               	/* stack size = 0 */
 525               	.L__stack_usage = 0
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
 526               		.loc 2 55 0
 527 0000 9091 0000 		lds r25,oneshot_locked_mods
 528 0004 8917      		cp r24,r25
 529 0006 01F0      		breq .L29
  56:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 530               		.loc 2 56 0
 531 0008 8093 0000 		sts oneshot_locked_mods,r24
  57:tmk_core/common/action_util.c ****     }
 532               		.loc 2 57 0
 533 000c 0C94 0000 		jmp oneshot_locked_mods_changed_kb
 534               	.LVL29:
 535               	.L29:
 536 0010 0895      		ret
 537               		.cfi_endproc
 538               	.LFE8:
 540               		.section	.text.clear_oneshot_locked_mods,"ax",@progbits
 541               	.global	clear_oneshot_locked_mods
 543               	clear_oneshot_locked_mods:
 544               	.LFB9:
  60:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
 545               		.loc 2 60 0
 546               		.cfi_startproc
 547               	/* prologue: function */
 548               	/* frame size = 0 */
 549               	/* stack size = 0 */
 550               	.L__stack_usage = 0
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
 551               		.loc 2 61 0
 552 0000 8091 0000 		lds r24,oneshot_locked_mods
 553 0004 8823      		tst r24
 554 0006 01F0      		breq .L31
  62:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 555               		.loc 2 62 0
 556 0008 1092 0000 		sts oneshot_locked_mods,__zero_reg__
  63:tmk_core/common/action_util.c ****     }
 557               		.loc 2 63 0
 558 000c 80E0      		ldi r24,0
 559 000e 0C94 0000 		jmp oneshot_locked_mods_changed_kb
 560               	.LVL30:
 561               	.L31:
 562 0012 0895      		ret
 563               		.cfi_endproc
 564               	.LFE9:
 566               		.section	.text.oneshot_mods_changed_user,"ax",@progbits
 567               		.weak	oneshot_mods_changed_user
 569               	oneshot_mods_changed_user:
 570               	.LFB38:
 302:tmk_core/common/action_util.c **** }
 303:tmk_core/common/action_util.c **** 
 304:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 305:tmk_core/common/action_util.c ****  * 
 306:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 307:tmk_core/common/action_util.c ****  */
 308:tmk_core/common/action_util.c **** __attribute__((weak))
 309:tmk_core/common/action_util.c **** void oneshot_mods_changed_user(uint8_t mods) { }
 571               		.loc 2 309 0
 572               		.cfi_startproc
 573               	.LVL31:
 574               	/* prologue: function */
 575               	/* frame size = 0 */
 576               	/* stack size = 0 */
 577               	.L__stack_usage = 0
 578 0000 0895      		ret
 579               		.cfi_endproc
 580               	.LFE38:
 582               		.section	.text.oneshot_mods_changed_kb,"ax",@progbits
 583               		.weak	oneshot_mods_changed_kb
 585               	oneshot_mods_changed_kb:
 586               	.LFB39:
 310:tmk_core/common/action_util.c **** 
 311:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 312:tmk_core/common/action_util.c ****  * 
 313:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 314:tmk_core/common/action_util.c ****  */
 315:tmk_core/common/action_util.c **** __attribute__((weak))
 316:tmk_core/common/action_util.c **** void oneshot_mods_changed_kb(uint8_t mods) {
 587               		.loc 2 316 0
 588               		.cfi_startproc
 589               	.LVL32:
 590               	/* prologue: function */
 591               	/* frame size = 0 */
 592               	/* stack size = 0 */
 593               	.L__stack_usage = 0
 317:tmk_core/common/action_util.c ****     oneshot_mods_changed_user(mods);
 594               		.loc 2 317 0
 595 0000 0C94 0000 		jmp oneshot_mods_changed_user
 596               	.LVL33:
 597               		.cfi_endproc
 598               	.LFE39:
 600               		.section	.text.set_oneshot_mods,"ax",@progbits
 601               	.global	set_oneshot_mods
 603               	set_oneshot_mods:
 604               	.LFB33:
 256:tmk_core/common/action_util.c ****   if (oneshot_mods != mods) {
 605               		.loc 2 256 0
 606               		.cfi_startproc
 607               	.LVL34:
 608               	/* prologue: function */
 609               	/* frame size = 0 */
 610               	/* stack size = 0 */
 611               	.L__stack_usage = 0
 257:tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 612               		.loc 2 257 0
 613 0000 9091 0000 		lds r25,oneshot_mods
 614 0004 9817      		cp r25,r24
 615 0006 01F0      		breq .L35
 261:tmk_core/common/action_util.c ****     oneshot_mods_changed_kb(mods);
 616               		.loc 2 261 0
 617 0008 8093 0000 		sts oneshot_mods,r24
 262:tmk_core/common/action_util.c ****   }
 618               		.loc 2 262 0
 619 000c 0C94 0000 		jmp oneshot_mods_changed_kb
 620               	.LVL35:
 621               	.L35:
 622 0010 0895      		ret
 623               		.cfi_endproc
 624               	.LFE33:
 626               		.section	.text.clear_oneshot_mods,"ax",@progbits
 627               	.global	clear_oneshot_mods
 629               	clear_oneshot_mods:
 630               	.LFB34:
 269:tmk_core/common/action_util.c ****   if (oneshot_mods) {
 631               		.loc 2 269 0
 632               		.cfi_startproc
 633               	/* prologue: function */
 634               	/* frame size = 0 */
 635               	/* stack size = 0 */
 636               	.L__stack_usage = 0
 270:tmk_core/common/action_util.c ****     oneshot_mods = 0;
 637               		.loc 2 270 0
 638 0000 8091 0000 		lds r24,oneshot_mods
 639 0004 8823      		tst r24
 640 0006 01F0      		breq .L37
 271:tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 641               		.loc 2 271 0
 642 0008 1092 0000 		sts oneshot_mods,__zero_reg__
 275:tmk_core/common/action_util.c ****   }
 643               		.loc 2 275 0
 644 000c 80E0      		ldi r24,0
 645 000e 0C94 0000 		jmp oneshot_mods_changed_kb
 646               	.LVL36:
 647               	.L37:
 648 0012 0895      		ret
 649               		.cfi_endproc
 650               	.LFE34:
 652               		.section	.text.send_keyboard_report,"ax",@progbits
 653               	.global	send_keyboard_report
 655               	send_keyboard_report:
 656               	.LFB17:
 150:tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 657               		.loc 2 150 0
 658               		.cfi_startproc
 659               	/* prologue: function */
 660               	/* frame size = 0 */
 661               	/* stack size = 0 */
 662               	.L__stack_usage = 0
 151:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 663               		.loc 2 151 0
 664 0000 E091 0000 		lds r30,keyboard_report
 665 0004 F091 0000 		lds r31,keyboard_report+1
 666 0008 8091 0000 		lds r24,real_mods
 667 000c 8083      		st Z,r24
 152:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 668               		.loc 2 152 0
 669 000e E091 0000 		lds r30,keyboard_report
 670 0012 F091 0000 		lds r31,keyboard_report+1
 671 0016 9081      		ld r25,Z
 672 0018 8091 0000 		lds r24,weak_mods
 673 001c 892B      		or r24,r25
 674 001e 8083      		st Z,r24
 153:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 675               		.loc 2 153 0
 676 0020 E091 0000 		lds r30,keyboard_report
 677 0024 F091 0000 		lds r31,keyboard_report+1
 678 0028 9081      		ld r25,Z
 679 002a 8091 0000 		lds r24,macro_mods
 680 002e 892B      		or r24,r25
 681 0030 8083      		st Z,r24
 155:tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 682               		.loc 2 155 0
 683 0032 8091 0000 		lds r24,oneshot_mods
 684 0036 8823      		tst r24
 685 0038 01F0      		breq .L41
 162:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 686               		.loc 2 162 0
 687 003a E091 0000 		lds r30,keyboard_report
 688 003e F091 0000 		lds r31,keyboard_report+1
 689 0042 9081      		ld r25,Z
 690 0044 892B      		or r24,r25
 691 0046 8083      		st Z,r24
 163:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 692               		.loc 2 163 0
 693 0048 8091 0000 		lds r24,keyboard_report
 694 004c 9091 0000 		lds r25,keyboard_report+1
 695 0050 0E94 0000 		call has_anykey
 696               	.LVL37:
 697 0054 8111      		cpse r24,__zero_reg__
 164:tmk_core/common/action_util.c ****         }
 698               		.loc 2 164 0
 699 0056 0E94 0000 		call clear_oneshot_mods
 700               	.LVL38:
 701               	.L41:
 169:tmk_core/common/action_util.c **** }
 702               		.loc 2 169 0
 703 005a 8091 0000 		lds r24,keyboard_report
 704 005e 9091 0000 		lds r25,keyboard_report+1
 705 0062 0C94 0000 		jmp host_keyboard_send
 706               	.LVL39:
 707               		.cfi_endproc
 708               	.LFE17:
 710               		.section	.text.oneshot_layer_changed_user,"ax",@progbits
 711               		.weak	oneshot_layer_changed_user
 713               	oneshot_layer_changed_user:
 714               	.LFB40:
 318:tmk_core/common/action_util.c **** }
 319:tmk_core/common/action_util.c **** 
 320:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 321:tmk_core/common/action_util.c ****  * 
 322:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off. 
 323:tmk_core/common/action_util.c ****  */
 324:tmk_core/common/action_util.c **** __attribute__((weak))
 325:tmk_core/common/action_util.c **** void oneshot_layer_changed_user(uint8_t layer) { }
 715               		.loc 2 325 0
 716               		.cfi_startproc
 717               	.LVL40:
 718               	/* prologue: function */
 719               	/* frame size = 0 */
 720               	/* stack size = 0 */
 721               	.L__stack_usage = 0
 722 0000 0895      		ret
 723               		.cfi_endproc
 724               	.LFE40:
 726               		.section	.text.oneshot_layer_changed_kb,"ax",@progbits
 727               		.weak	oneshot_layer_changed_kb
 729               	oneshot_layer_changed_kb:
 730               	.LFB41:
 326:tmk_core/common/action_util.c **** 
 327:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 328:tmk_core/common/action_util.c ****  * 
 329:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 330:tmk_core/common/action_util.c ****  */
 331:tmk_core/common/action_util.c **** __attribute__((weak))
 332:tmk_core/common/action_util.c **** void oneshot_layer_changed_kb(uint8_t layer) {
 731               		.loc 2 332 0
 732               		.cfi_startproc
 733               	.LVL41:
 734               	/* prologue: function */
 735               	/* frame size = 0 */
 736               	/* stack size = 0 */
 737               	.L__stack_usage = 0
 333:tmk_core/common/action_util.c ****     oneshot_layer_changed_user(layer);
 738               		.loc 2 333 0
 739 0000 0C94 0000 		jmp oneshot_layer_changed_user
 740               	.LVL42:
 741               		.cfi_endproc
 742               	.LFE41:
 744               		.section	.text.set_oneshot_layer,"ax",@progbits
 745               	.global	set_oneshot_layer
 747               	set_oneshot_layer:
 748               	.LFB13:
 104:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 749               		.loc 2 104 0
 750               		.cfi_startproc
 751               	.LVL43:
 752               	/* prologue: function */
 753               	/* frame size = 0 */
 754               	/* stack size = 0 */
 755               	.L__stack_usage = 0
 105:tmk_core/common/action_util.c ****     layer_on(layer);
 756               		.loc 2 105 0
 757 0000 98E0      		ldi r25,lo8(8)
 758 0002 899F      		mul r24,r25
 759 0004 9001      		movw r18,r0
 760 0006 1124      		clr __zero_reg__
 761 0008 262B      		or r18,r22
 762 000a 2093 0000 		sts oneshot_layer_data,r18
 106:tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 763               		.loc 2 106 0
 764 000e 0E94 0000 		call layer_on
 765               	.LVL44:
 766               	.LBB14:
 767               	.LBB15:
  88:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 768               		.loc 2 88 0
 769 0012 8091 0000 		lds r24,oneshot_layer_data
 770               	.LBE15:
 771               	.LBE14:
 110:tmk_core/common/action_util.c **** }
 772               		.loc 2 110 0
 773 0016 8595      		asr r24
 774 0018 8595      		asr r24
 775 001a 8595      		asr r24
 776 001c 0C94 0000 		jmp oneshot_layer_changed_kb
 777               	.LVL45:
 778               		.cfi_endproc
 779               	.LFE13:
 781               		.section	.text.reset_oneshot_layer,"ax",@progbits
 782               	.global	reset_oneshot_layer
 784               	reset_oneshot_layer:
 785               	.LFB14:
 116:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 786               		.loc 2 116 0
 787               		.cfi_startproc
 788               	/* prologue: function */
 789               	/* frame size = 0 */
 790               	/* stack size = 0 */
 791               	.L__stack_usage = 0
 117:tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 792               		.loc 2 117 0
 793 0000 1092 0000 		sts oneshot_layer_data,__zero_reg__
 121:tmk_core/common/action_util.c **** }
 794               		.loc 2 121 0
 795 0004 80E0      		ldi r24,0
 796 0006 0C94 0000 		jmp oneshot_layer_changed_kb
 797               	.LVL46:
 798               		.cfi_endproc
 799               	.LFE14:
 801               		.section	.text.clear_oneshot_layer_state,"ax",@progbits
 802               	.global	clear_oneshot_layer_state
 804               	clear_oneshot_layer_state:
 805               	.LFB15:
 128:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 806               		.loc 2 128 0
 807               		.cfi_startproc
 808               	.LVL47:
 809               	/* prologue: function */
 810               	/* frame size = 0 */
 811               	/* stack size = 0 */
 812               	.L__stack_usage = 0
 129:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 813               		.loc 2 129 0
 814 0000 2091 0000 		lds r18,oneshot_layer_data
 815               	.LVL48:
 130:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 816               		.loc 2 130 0
 817 0004 8095      		com r24
 818               	.LVL49:
 819 0006 8223      		and r24,r18
 820               	.LVL50:
 821 0008 8093 0000 		sts oneshot_layer_data,r24
 822               	.LBB16:
 823               	.LBB17:
  89:tmk_core/common/action_util.c **** 
 824               		.loc 2 89 0
 825 000c 982F      		mov r25,r24
 826 000e 9770      		andi r25,lo8(7)
 827               	.LBE17:
 828               	.LBE16:
 131:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 829               		.loc 2 131 0
 830 0010 01F4      		brne .L50
 131:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 831               		.loc 2 131 0 is_stmt 0 discriminator 1
 832 0012 30E0      		ldi r19,0
 833 0014 482F      		mov r20,r24
 834 0016 082E      		mov __tmp_reg__,r24
 835 0018 000C      		lsl r0
 836 001a 550B      		sbc r21,r21
 837 001c 2417      		cp r18,r20
 838 001e 3507      		cpc r19,r21
 839 0020 01F0      		breq .L50
 132:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 840               		.loc 2 132 0 is_stmt 1
 841 0022 8595      		asr r24
 842 0024 8595      		asr r24
 843 0026 8595      		asr r24
 844 0028 0E94 0000 		call layer_off
 845               	.LVL51:
 133:tmk_core/common/action_util.c ****     }
 846               		.loc 2 133 0
 847 002c 0C94 0000 		jmp reset_oneshot_layer
 848               	.LVL52:
 849               	.L50:
 850 0030 0895      		ret
 851               		.cfi_endproc
 852               	.LFE15:
 854               		.section	.text.has_anymod,"ax",@progbits
 855               	.global	has_anymod
 857               	has_anymod:
 858               	.LFB42:
 334:tmk_core/common/action_util.c **** }
 335:tmk_core/common/action_util.c **** 
 336:tmk_core/common/action_util.c **** /** \brief inspect keyboard state
 337:tmk_core/common/action_util.c ****  *
 338:tmk_core/common/action_util.c ****  * FIXME: needs doc
 339:tmk_core/common/action_util.c ****  */
 340:tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 341:tmk_core/common/action_util.c **** {
 859               		.loc 2 341 0
 860               		.cfi_startproc
 861               	/* prologue: function */
 862               	/* frame size = 0 */
 863               	/* stack size = 0 */
 864               	.L__stack_usage = 0
 342:tmk_core/common/action_util.c ****     return bitpop(real_mods);
 865               		.loc 2 342 0
 866 0000 8091 0000 		lds r24,real_mods
 867 0004 0C94 0000 		jmp bitpop
 868               	.LVL53:
 869               		.cfi_endproc
 870               	.LFE42:
 872               		.section	.bss.oneshot_layer_data,"aw",@nobits
 875               	oneshot_layer_data:
 876 0000 00        		.zero	1
 877               		.section	.bss.oneshot_locked_mods,"aw",@nobits
 880               	oneshot_locked_mods:
 881 0000 00        		.zero	1
 882               		.section	.bss.oneshot_mods,"aw",@nobits
 885               	oneshot_mods:
 886 0000 00        		.zero	1
 887               	.global	keyboard_report
 888               		.section	.data.keyboard_report,"aw",@progbits
 891               	keyboard_report:
 892 0000 0000      		.word	__compound_literal.0
 893               		.section	.bss.__compound_literal.0,"aw",@nobits
 896               	__compound_literal.0:
 897 0000 0000 0000 		.zero	8
 897      0000 0000 
 898               		.section	.bss.macro_mods,"aw",@nobits
 901               	macro_mods:
 902 0000 00        		.zero	1
 903               		.section	.bss.weak_mods,"aw",@nobits
 906               	weak_mods:
 907 0000 00        		.zero	1
 908               		.section	.bss.real_mods,"aw",@nobits
 911               	real_mods:
 912 0000 00        		.zero	1
 913               		.text
 914               	.Letext0:
 915               		.file 3 "/usr/lib/avr/include/stdint.h"
 916               		.file 4 "tmk_core/common/report.h"
 917               		.file 5 "tmk_core/common/host.h"
 918               		.file 6 "tmk_core/common/action_layer.h"
 919               		.file 7 "tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/ccIo1wZN.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccIo1wZN.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccIo1wZN.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccIo1wZN.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccIo1wZN.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccIo1wZN.s:13     .text.add_key:0000000000000000 add_key
     /tmp/ccIo1wZN.s:891    .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/ccIo1wZN.s:36     .text.del_key:0000000000000000 del_key
     /tmp/ccIo1wZN.s:58     .text.clear_keys:0000000000000000 clear_keys
     /tmp/ccIo1wZN.s:77     .text.get_oneshot_locked_mods:0000000000000000 get_oneshot_locked_mods
     /tmp/ccIo1wZN.s:880    .bss.oneshot_locked_mods:0000000000000000 oneshot_locked_mods
     /tmp/ccIo1wZN.s:95     .text.has_oneshot_mods_timed_out:0000000000000000 has_oneshot_mods_timed_out
     /tmp/ccIo1wZN.s:112    .text.get_oneshot_layer:0000000000000000 get_oneshot_layer
     /tmp/ccIo1wZN.s:875    .bss.oneshot_layer_data:0000000000000000 oneshot_layer_data
     /tmp/ccIo1wZN.s:132    .text.get_oneshot_layer_state:0000000000000000 get_oneshot_layer_state
     /tmp/ccIo1wZN.s:150    .text.is_oneshot_layer_active:0000000000000000 is_oneshot_layer_active
     /tmp/ccIo1wZN.s:178    .text.get_mods:0000000000000000 get_mods
     /tmp/ccIo1wZN.s:911    .bss.real_mods:0000000000000000 real_mods
     /tmp/ccIo1wZN.s:195    .text.add_mods:0000000000000000 add_mods
     /tmp/ccIo1wZN.s:216    .text.del_mods:0000000000000000 del_mods
     /tmp/ccIo1wZN.s:239    .text.set_mods:0000000000000000 set_mods
     /tmp/ccIo1wZN.s:257    .text.clear_mods:0000000000000000 clear_mods
     /tmp/ccIo1wZN.s:274    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/ccIo1wZN.s:906    .bss.weak_mods:0000000000000000 weak_mods
     /tmp/ccIo1wZN.s:291    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/ccIo1wZN.s:312    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/ccIo1wZN.s:335    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/ccIo1wZN.s:353    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/ccIo1wZN.s:370    .text.get_macro_mods:0000000000000000 get_macro_mods
     /tmp/ccIo1wZN.s:901    .bss.macro_mods:0000000000000000 macro_mods
     /tmp/ccIo1wZN.s:387    .text.add_macro_mods:0000000000000000 add_macro_mods
     /tmp/ccIo1wZN.s:408    .text.del_macro_mods:0000000000000000 del_macro_mods
     /tmp/ccIo1wZN.s:431    .text.set_macro_mods:0000000000000000 set_macro_mods
     /tmp/ccIo1wZN.s:449    .text.clear_macro_mods:0000000000000000 clear_macro_mods
     /tmp/ccIo1wZN.s:466    .text.get_oneshot_mods:0000000000000000 get_oneshot_mods
     /tmp/ccIo1wZN.s:885    .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/ccIo1wZN.s:483    .text.oneshot_locked_mods_changed_user:0000000000000000 oneshot_locked_mods_changed_user
     /tmp/ccIo1wZN.s:499    .text.oneshot_locked_mods_changed_kb:0000000000000000 oneshot_locked_mods_changed_kb
     /tmp/ccIo1wZN.s:517    .text.set_oneshot_locked_mods:0000000000000000 set_oneshot_locked_mods
     /tmp/ccIo1wZN.s:543    .text.clear_oneshot_locked_mods:0000000000000000 clear_oneshot_locked_mods
     /tmp/ccIo1wZN.s:569    .text.oneshot_mods_changed_user:0000000000000000 oneshot_mods_changed_user
     /tmp/ccIo1wZN.s:585    .text.oneshot_mods_changed_kb:0000000000000000 oneshot_mods_changed_kb
     /tmp/ccIo1wZN.s:603    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/ccIo1wZN.s:629    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/ccIo1wZN.s:655    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/ccIo1wZN.s:713    .text.oneshot_layer_changed_user:0000000000000000 oneshot_layer_changed_user
     /tmp/ccIo1wZN.s:729    .text.oneshot_layer_changed_kb:0000000000000000 oneshot_layer_changed_kb
     /tmp/ccIo1wZN.s:747    .text.set_oneshot_layer:0000000000000000 set_oneshot_layer
     /tmp/ccIo1wZN.s:784    .text.reset_oneshot_layer:0000000000000000 reset_oneshot_layer
     /tmp/ccIo1wZN.s:804    .text.clear_oneshot_layer_state:0000000000000000 clear_oneshot_layer_state
     /tmp/ccIo1wZN.s:857    .text.has_anymod:0000000000000000 has_anymod
     /tmp/ccIo1wZN.s:896    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
add_key_to_report
del_key_from_report
clear_keys_from_report
has_anykey
host_keyboard_send
layer_on
layer_off
bitpop
__do_copy_data
__do_clear_bss
